[
["index.html", "Aprendizaje de máquina Temario y referencias", " Aprendizaje de máquina Felipe González 2018-11-12 Temario y referencias Todas las notas y material del curso estarán en este repositorio. Introducción al aprendizaje máquina Regresión lineal múltiple y descenso en gradiente Problemas de clasificación y regresión logística Validación cruzada y métodos de remuestreo Regularización y selección de modelos Redes neuronales Diagnóstico y mejora en problemas de aprendizaje supervisado. Árboles y bosques aleatorios Máquinas de soporte vectorial Componentes principales y análisis de conglomerados Evaluación Tareas semanales (25%) Examen parcial (30% práctico, 20% teórico) Un examen final (25% práctico) Software: R y Rstudio R Sitio de R (CRAN) Rstudio Interfaz gráfica para trabajar en R. Recursos para aprender R Referencias principales An Introduction to Statistical Learning, James et al. (2014) Curso de Machine Learning de Andrew Ng, Ng (2017) Deep Learning, Goodfellow, Bengio, and Courville (2016) Otras referencias Pattern Recognition and Machine Learning, Bishop (2006) The Elements of Statistical Learning, Hastie, Tibshirani y Friedman, Hastie, Tibshirani, and Friedman (2017) References "],
["introduccion.html", "Clase 1 Introducción 1.1 ¿Qué es aprendizaje de máquina (machine learning)? 1.2 Aprendizaje Supervisado 1.3 Predicciones 1.4 Tarea de aprendizaje supervisado 1.5 Balance de complejidad y rigidez 1.6 ¿Cómo estimar f? 1.7 Resumen 1.8 Tarea", " Clase 1 Introducción 1.1 ¿Qué es aprendizaje de máquina (machine learning)? Métodos computacionales para aprender de datos con el fin de producir reglas para mejorar el desempeño en alguna tarea o toma de decisión. En este curso nos enfocamos en las tareas de aprendizaje supervisado (predecir o estimar una variable respuesta a partir de datos de entrada) y aprendizaje no supervisado (describir estructuras interesantes en datos, donde no necesariamente hay una respuesta que predecir). Ejemplos de tareas de aprendizaje: Predecir si un cliente de tarjeta de crédito va a caer en impago en los próximos tres meses. Reconocer palabras escritas a mano (OCR). Detectar llamados de ballenas en grabaciones de boyas. Estimar el ingreso mensual de un hogar a partir de las características de la vivienda, posesiones y equipamiento y localización geográfica. Dividir a los clientes de Netflix según sus gustos. Recomendar artículos a clientes de un programa de lealtad o servicio online. Las razones usuales para intentar resolver estos problemas computacionalmente son diversas: Quisiéramos obtener una respuesta barata, rápida, automatizada, y con suficiente precisión. Por ejemplo, reconocer caracteres en una placa de coche de una fotografía se puede hacer por personas, pero eso es lento y costoso. Igual oír cada segundo de grabación de las boyas para saber si hay ballenas o no. Hacer mediciones directas del ingreso de un hogar requiere mucho tiempo y esfuerzo. Quisiéramos superar el desempeño actual de los expertos o de reglas simples utilizando datos: por ejemplo, en la decisión de dar o no un préstamo a un solicitante, puede ser posible tomar mejores decisiones con algoritmos que con evaluaciones personales o con reglas simples que toman en cuenta el ingreso mensual, por ejemplo. Queremos entender de manera más completa y sistemática el comportamiento de un fenómeno, identificando variables o patrones importantes. Es posible aproximarse a todos estos problemas usando reglas (por ejemplo, si los pixeles del centro de la imagen están vacíos, entonces es un cero, si el crédito total es mayor al 50% del ingreso anual, declinar el préstamo, etc) Las razones para intentar usar aprendizaje para producir reglas en lugar de intentar construir estas reglas directamente son, por ejemplo: Cuando conjuntos de reglas creadas a mano se desempeñan mal (por ejemplo, para otorgar créditos, reconocer caracteres, etc.) Reglas creadas a mano pueden ser difíciles de mantener (por ejemplo, un corrector ortográfico.) Ejemplo: reconocimiento de dígitos escritos a mano ¿Cómo reconocer los siguientes dígitos de manera automática? En los datos tenemos los valores de cada pixel (los caracteres son imagenes de 16x16 pixeles), y una etiqueta asociada, que es el número que la imagen representa. Podemos ver las imágenes y las etiquetas: library(tidyverse) zip_train &lt;- read_csv(file = &#39;datos/zip-train.csv&#39;) muestra_1 &lt;- sample_n(zip_train, 10) graficar_digitos(muestra_1) muestra_2 &lt;- sample_n(zip_train, 10) graficar_digitos(muestra_2) Los 16x16=256 están escritos acomodando las filas de la imagen en vector de 256 valores (cada renglón de zip_train). Un dígito entonces se representa como sigue: dim(zip_train) ## [1] 7291 257 as.numeric(zip_train[1,]) ## [1] 6.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -0.631 0.862 ## [11] -0.167 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 ## [21] -1.000 -1.000 -1.000 -0.992 0.297 1.000 0.307 -1.000 -1.000 -1.000 ## [31] -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -0.410 ## [41] 1.000 0.986 -0.565 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 ## [51] -1.000 -1.000 -1.000 -1.000 -0.683 0.825 1.000 0.562 -1.000 -1.000 ## [61] -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -0.938 ## [71] 0.540 1.000 0.778 -0.715 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 ## [81] -1.000 -1.000 -1.000 -1.000 -1.000 0.100 1.000 0.922 -0.439 -1.000 ## [91] -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 ## [101] -0.257 0.950 1.000 -0.162 -1.000 -1.000 -1.000 -0.987 -0.714 -0.832 ## [111] -1.000 -1.000 -1.000 -1.000 -1.000 -0.797 0.909 1.000 0.300 -0.961 ## [121] -1.000 -1.000 -0.550 0.485 0.996 0.867 0.092 -1.000 -1.000 -1.000 ## [131] -1.000 0.278 1.000 0.877 -0.824 -1.000 -0.905 0.145 0.977 1.000 ## [141] 1.000 1.000 0.990 -0.745 -1.000 -1.000 -0.950 0.847 1.000 0.327 ## [151] -1.000 -1.000 0.355 1.000 0.655 -0.109 -0.185 1.000 0.988 -0.723 ## [161] -1.000 -1.000 -0.630 1.000 1.000 0.068 -0.925 0.113 0.960 0.308 ## [171] -0.884 -1.000 -0.075 1.000 0.641 -0.995 -1.000 -1.000 -0.677 1.000 ## [181] 1.000 0.753 0.341 1.000 0.707 -0.942 -1.000 -1.000 0.545 1.000 ## [191] 0.027 -1.000 -1.000 -1.000 -0.903 0.792 1.000 1.000 1.000 1.000 ## [201] 0.536 0.184 0.812 0.837 0.978 0.864 -0.630 -1.000 -1.000 -1.000 ## [211] -1.000 -0.452 0.828 1.000 1.000 1.000 1.000 1.000 1.000 1.000 ## [221] 1.000 0.135 -1.000 -1.000 -1.000 -1.000 -1.000 -1.000 -0.483 0.813 ## [231] 1.000 1.000 1.000 1.000 1.000 1.000 0.219 -0.943 -1.000 -1.000 ## [241] -1.000 -1.000 -1.000 -1.000 -1.000 -0.974 -0.429 0.304 0.823 1.000 ## [251] 0.482 -0.474 -0.991 -1.000 -1.000 -1.000 -1.000 Un enfoque más utilizado anteriormente para resolver este tipo de problemas consistía en procesar estas imágenes con filtros hechos a mano (por ejemplo, calcular cuántos pixeles están prendidos, si existen ciertas curvas o trazos) para después construir reglas para determinar cada dígito. Actualmente, el enfoque más exitoso es utilizar métodos de aprendizaje que aprendan automáticamente esos filtros y esas reglas basadas en filtros (redes convolucionales). Ejemplo: predecir ingreso trimestral Consideramos la medición de ingreso total trimestral para una muestra de hogares de la encuesta de ENIGH. Cada una de estas mediciones es muy costosa en tiempo y dinero. dat_ingreso &lt;- read_csv(file = &#39;datos/enigh-ejemplo.csv&#39;) head(dat_ingreso) %&gt;% select(TAM_HOG, INGCOR, NOM_ENT_1, FOCOS, PISOS, marginación, tamaño_localidad) %&gt;% knitr::kable() TAM_HOG INGCOR NOM_ENT_1 FOCOS PISOS marginación tamaño_localidad 4 30238.13 Jalisco 11 3 Muy bajo De 15 mil a 100 mil 3 61147.41 México 10 2 Bajo De 15 mil a 100 mil 2 6170.21 Puebla 1 1 Alto De 2500 a 15 mil 2 14639.79 Distrito Federal 5 2 Muy bajo 100 mil o más 1 40638.35 Chihuahua 8 3 Muy bajo De 15 mil a 100 mil 2 21172.35 Baja California 4 2 Muy bajo 100 mil o más ggplot(dat_ingreso, aes(x=INGTOT/1000)) + geom_histogram(bins = 100) + scale_x_log10(breaks = c(2.5, 5, 10, 20, 40, 80, 160, 320, 640, 1280)) + xlab(&quot;Ingreso trimestral (miles de pesos)&quot;) Pero quizá podemos usar otras variables más fácilmente medibles para predecir el ingreso de un hogar. Por ejemplo, si consideramos el número de focos en la vivienda: ggplot(dat_ingreso, aes(x = FOCOS, y = INGTOT/1000)) + geom_point() + scale_y_log10(breaks = c(2.5, 5, 10, 20, 40, 80, 160, 320, 640, 1280)) + ylab(&quot;Ingreso trimestral (miles de pesos)&quot;) + xlim(c(0,50)) O el tamaño de la localidad: ggplot(dat_ingreso, aes(x = tamaño_localidad, y = INGTOT/1000)) + geom_boxplot() + scale_y_log10(breaks = c(2.5, 5, 10, 20, 40, 80, 160, 320, 640, 1280)) + ylab(&quot;Ingreso trimestral (miles de pesos)&quot;) En algunas encuestas se pregunta directamente el ingreso mensual del hogar. La respuesta es generalmente una mala estimación del verdadero ingreso, por lo que actualmente se prefiere utilizar aprendizaje para estimar a partir de otras variables que son más fielmente reportadas por encuestados (años de estudio, ocupación, número de focos en el hogar, etc.) Aprendizaje supervisado Las tareas de aprendizaje se divide en dos grandes partes: aprendizaje supervisado y aprendizaje no supervisado. Aprendizaje supervisado Construir un modelo o algoritmo para predecir o estimar un target o una variable de salida a partir de ciertas variables de entrada. Predecir y estimar, en este contexto, se refieren a cosas similares. Generalmente se usa predecir cuando se trata de variables que no son observables ahora, sino en el futuro, y estimar cuando nos interesan variables actuales que no podemos observar ahora por costos o por la naturaleza del fenómeno. Por ejemplo, para identificar a los clientes con alto riesgo de impago de tarjeta de crédito, utilizamos datos históricos de clientes que han pagado y no han pagado. Con estos datos entrenamos un algoritmo para detectar anticipadamente los clientes con alto riesgo de impago. Usualmente dividimos los problemas de aprendizaje supervisado en dos tipos, dependiendo de la variables salida: Problemas de regresión: cuando la salida es una variable numérica. El ejemplo de estimación de ingreso es un problema de regresión Problemas de clasificación: cuando la salida es una variable categórica. El ejemplo de detección de dígitos escritos a manos es un problema de clasificación. Ejemplo: predecir el rendimiento de un coche. Estimar directamente el rendimiento (km por litro de combustible) de un coche es costoso: hay que hacer varias pruebas en diversas condiciones, etc. ¿Podríamos estimar el rendimiento de un coche usando variables más accesibles, peso del coche, año de producción, etc.? library(ISLR) datos &lt;- Auto[, c(&#39;name&#39;, &#39;weight&#39;,&#39;year&#39;, &#39;mpg&#39;)] datos$peso_kg &lt;- datos$weight*0.45359237 datos$rendimiento_kpl &lt;- datos$mpg*(1.609344/3.78541178) set.seed(213) datos_muestra &lt;- sample_n(datos, 50) datos_muestra %&gt;% select(name, peso_kg, rendimiento_kpl) ## name peso_kg rendimiento_kpl ## 9 pontiac catalina 2007.1462 5.952012 ## 139 dodge coronet custom (sw) 2021.6612 5.952012 ## 248 datsun b210 gx 938.9362 16.750662 ## 229 ford granada 1598.9131 7.865159 ## 166 chevrolet monza 2+2 1461.0210 8.502874 ## 321 datsun 510 hatchback 1104.0438 15.730317 ## 5 ford torino 1564.4401 7.227443 ## 145 toyota corona 747.9738 13.179455 ## 282 mercury zephyr 6 1356.2412 8.417845 ## 297 amc spirit dl 1211.0916 11.648938 ## 19 datsun pl510 966.1517 11.478880 ## 320 mazda 626 1153.0318 13.306998 ## 218 buick opel isuzu deluxe 977.4916 12.754311 ## 1 chevrolet chevelle malibu 1589.3877 7.652587 ## 195 amc hornet 1399.3325 9.565733 ## 317 dodge aspen 1533.5958 8.120245 ## 35 plymouth satellite custom 1559.9042 6.802299 ## 356 honda prelude 1002.4391 14.327343 ## 250 oldsmobile cutlass salon brougham 1526.3383 8.460360 ## 373 pontiac phoenix 1240.5751 11.478880 ## 80 renault 12 (sw) 992.9137 11.053736 ## 201 ford granada ghia 1621.1391 7.652587 ## 202 pontiac ventura sj 1653.3442 7.865159 ## 59 dodge colt hardtop 964.3374 10.628593 ## 277 saab 99gle 1267.7907 9.183104 ## 108 amc gremlin 1265.0691 7.652587 ## 329 mercedes-benz 240d 1474.1752 12.754311 ## 220 plymouth arrow gs 1043.2625 10.841165 ## 209 plymouth volare premier v8 1787.1539 5.526868 ## 263 chevrolet monte carlo landau 1553.5539 8.162759 ## 178 audi 100ls 1221.9778 9.778305 ## 182 honda civic cvcc 814.1983 14.029742 ## 16 plymouth duster 1285.0272 9.353162 ## 191 ford gran torino 1911.8918 6.164584 ## 113 ford pinto 1047.7984 8.077730 ## 285 dodge aspen 6 1524.0704 8.757960 ## 49 ford mustang 1423.8264 7.652587 ## 243 bmw 320i 1179.3402 9.140590 ## 271 toyota celica gt liftback 1140.7848 8.970532 ## 349 toyota tercel 929.8644 16.027918 ## 339 plymouth reliant 1129.4450 11.563909 ## 309 pontiac phoenix 1159.3821 14.242314 ## 345 plymouth champ 850.4857 16.580605 ## 91 mercury marquis brougham 2246.1894 5.101724 ## 275 audi 5000 1283.6664 8.630417 ## 46 amc hornet sportabout (sw) 1343.5406 7.652587 ## 255 ford fairmont (auto) 1344.9014 8.587903 ## 7 chevrolet impala 1974.9412 5.952012 ## 378 plymouth horizon miser 963.8838 16.155461 ## 6 ford galaxie 500 1969.0445 6.377156 Y podríamos comenzar graficando rendimiento contra peso. Cada punto representa un coche distinto. En esta gráfica vemos que los valores de rendimiento varían según según peso de una manera sistemática: cuanto más grande es el peso, más bajo es el rendimiento: library(ggplot2) ggplot(datos_muestra, aes(x=peso_kg, y=rendimiento_kpl)) + geom_point() Podemos entonces ajustar una curva, que para cada nivel de peso da un valor de rendimiento que se ‘aleja lo menos posible’ de los valores de rendimiento cercanos. Por ejemplo: según la curva roja, ¿cómo haríamos la predicción para un peso de 1500 kg? ggplot(datos_muestra, aes(x=peso_kg, y=rendimiento_kpl)) + geom_point() + geom_smooth(se =FALSE, colour=&#39;red&#39;, size=1.1, span=0.4, method=&#39;loess&#39;) + geom_smooth(se =FALSE, colour=&#39;gray&#39;, size=1.1, span=2, method=&#39;loess&#39;) Aprendizaje no supervisado Aprendizaje no supervisado En este caso no hay target o variable salida. Buscamos modelar y entender las relaciones entre variables y entre observaciones, o patrones importantes o interesantes en los datos. Los problemas supervisados tienen un objetivo claro: hacer las mejores predicciones posibles bajo ciertas restricciones. Los problemas no supervisados tienden a tener objetivos más vagos, y por lo mismo pueden ser más difíciles. Ejemplo: tipos de coches en el mercado Quisieramos encontrar categorías de coches tales que: las categorías son diferentes entre sí, y los coches en una misma categoría son similares entre sí. Esta agrupación nos permite entender la estructura general de los datos, cómo están organizados en términos de similitud de características. En este ejemplo, encontramos un plano de máxima variabilidad donde proyectamos los coches, y después formamos grupos de coches similares: autos &lt;- Auto %&gt;% select(mpg, displacement, horsepower, acceleration) comps_autos &lt;- princomp(autos, cor = TRUE) clust &lt;- hclust(dist(comps_autos$scores[,1:2]), method = &#39;ward.D&#39;) autos$grupo &lt;- cutree(clust, k = 4) autos$Comp.1 &lt;- comps_autos$scores[,1] autos$Comp.2 &lt;- comps_autos$scores[,2] autos$nombre &lt;- Auto$name ggplot(autos, aes(x=Comp.1, y=Comp.2, colour=factor(grupo), label=nombre)) + geom_point() ¿Cómo interpretamos los grupos? head(filter(autos, grupo==1)) ## mpg displacement horsepower acceleration grupo Comp.1 Comp.2 ## 1 18 307 130 12.0 1 -1.817719 0.5042535 ## 2 15 350 165 11.5 1 -2.800712 0.3938195 ## 3 18 318 150 11.0 1 -2.310357 0.7966085 ## 4 16 304 150 12.0 1 -2.213807 0.3989781 ## 5 17 302 140 10.5 1 -2.225309 0.9183779 ## 6 15 429 198 10.0 1 -3.900596 0.6915313 ## nombre ## 1 chevrolet chevelle malibu ## 2 buick skylark 320 ## 3 plymouth satellite ## 4 amc rebel sst ## 5 ford torino ## 6 ford galaxie 500 head(filter(autos, grupo==3)) ## mpg displacement horsepower acceleration grupo Comp.1 Comp.2 ## 1 22 198 95 15.5 3 0.01913364 -0.090471378 ## 2 18 199 97 15.5 3 -0.26705470 -0.339015545 ## 3 21 200 85 16.0 3 0.16412490 -0.315611651 ## 4 21 199 90 15.0 3 -0.05362631 -0.004579963 ## 5 19 232 100 13.0 3 -0.79359758 0.413938751 ## 6 16 225 105 15.5 3 -0.63973365 -0.517394423 ## nombre ## 1 plymouth duster ## 2 amc hornet ## 3 ford maverick ## 4 amc gremlin ## 5 amc gremlin ## 6 plymouth satellite custom head(filter(autos, grupo==2)) ## mpg displacement horsepower acceleration grupo Comp.1 Comp.2 ## 1 24 113 95 15.0 2 0.50234800 0.3800473 ## 2 27 97 88 14.5 2 0.79722704 0.7509781 ## 3 24 107 90 14.5 2 0.52837050 0.5437610 ## 4 26 121 113 12.5 2 -0.04757934 1.2605758 ## 5 27 97 88 14.5 2 0.79722704 0.7509781 ## 6 28 140 90 15.5 2 0.76454526 0.4100595 ## nombre ## 1 toyota corona mark ii ## 2 datsun pl510 ## 3 audi 100 ls ## 4 bmw 2002 ## 5 datsun pl510 ## 6 chevrolet vega 2300 head(filter(autos, grupo==4)) ## mpg displacement horsepower acceleration grupo Comp.1 Comp.2 ## 1 26 97 46 20.5 4 2.2421696 -1.1703377 ## 2 25 110 87 17.5 4 1.0737328 -0.3205227 ## 3 25 104 95 17.5 4 0.9902507 -0.3021997 ## 4 22 140 72 19.0 4 1.1727317 -1.0419917 ## 5 30 79 70 19.5 4 2.0927389 -0.5620939 ## 6 31 71 65 19.0 4 2.1920905 -0.3319627 ## nombre ## 1 volkswagen 1131 deluxe sedan ## 2 peugeot 504 ## 3 saab 99e ## 4 chevrolet vega (sw) ## 5 peugeot 304 ## 6 toyota corolla 1200 1.2 Aprendizaje Supervisado Por el momento nos concentramos en problemas supervisados de regresión, es decir predicción de variables numéricas. ¿Cómo entendemos el problema de predicción? Proceso generador de datos (modelo teórico) Para entender lo que estamos intentando hacer, pensaremos en términos de modelos probabilísticos que generan los datos. La idea es que estos representan los procesos que generan los datos o las observaciones. Si \\(Y\\) es la respuesta que queremos predecir, y \\(X\\) es una entrada que queremos usar para predecir \\(Y\\), consideramos que las variables aleatorias \\(Y\\) y \\(X\\) están relacionadas como sigue: \\[Y=f(X)+\\epsilon,\\] donde \\(\\epsilon\\) es una término de error aleatorio que no depende de \\(X\\), y que tiene valor esperado \\(\\textrm{E}(\\epsilon)=0\\). \\(f\\) expresa la relación sistemática que hay entre \\(Y\\) y \\(X\\): para cada valor posible de \\(X\\), la contribución de \\(X\\) a \\(Y\\) es \\(f(X)\\). Pero \\(X\\) no determina a \\(Y\\), como en el ejemplo anterior de rendimiento de coches. Entonces agregamos una error aleatorio \\(\\epsilon\\), con media cero (si la media no es cero podemos agregar una constante a \\(f\\)), que no contiene información acerca de \\(X\\) (independiente de \\(X\\)). \\(\\epsilon\\) representa, por ejemplo, el efecto de variables que no hemos medido o procesos aleatorios que determinan la respuesta. Ejemplo Vamos a usar simulación para entender estas ideas: supongamos que \\(X\\) es el número de años de estudio de una persona y \\(Y\\) es su ingreso mensual. En primer lugar, estas son el número de años de estudio de 8 personas: x &lt;- c(1,7,10,0,0,5,9,13,2,4,17,18,1,2) Ahora supondremos que la dependencia de Y de X está dada por \\(Y=f(X)+\\epsilon\\) por una función \\(f\\) que no conocemos (esta función está determinada por el fenómeno) f &lt;- function(x){ ifelse(x &lt; 10, 1000*sqrt(x), 1000*sqrt(10)) } El ingreso no se determina únicamente por número de años de estudio. Suponemos entonces que hay algunas variables adicionales que perturban los niveles de \\(f(X)\\) por una cantidad aleatoria. Los valores que observamos de \\(Y\\) están dados entonces por \\(Y=f(X)+\\epsilon\\). Entonces podríamos obtener, por ejemplo: x_g &lt;- seq(0,20,0.5) y_g &lt;- f(x_g) dat_g &lt;- data.frame(x = x_g, y = y_g) set.seed(281) error &lt;- rnorm(length(x), 0, 500) y &lt;- f(x) + error datos &lt;- data_frame(x = x, y = y) datos$y_media &lt;- f(datos$x) ggplot(datos, aes(x = x, y = y)) + geom_point() + geom_line(data=dat_g, colour = &#39;blue&#39;, size = 1.1) + geom_segment(aes(x = x, xend = x, y = y, yend = y_media), col=&#39;red&#39;) En problemas de aprendizaje nunca conocemos esta \\(f\\) verdadera, aunque quizá sabemos algo acerca de sus propiedades (por ejemplo, continua, de variación suave). Lo que tenemos son los datos, que también podrían haber resultado en (para otra muestra de personas, por ejemplo): set.seed(28015) error &lt;- rnorm(length(x), 0, 500) y &lt;- f(x) + error datos &lt;- data.frame(x = x, y = y) ggplot(datos, aes(x = x, y = y)) + geom_point() La siguiente observación nos da una idea de lo que intentamos hacer, aunque todavía es vaga y requiere refinamiento: Bajo los supuestos del modelo \\(Y=f(X)+\\epsilon\\), aprender de los datos significa intentar recuperar o estimar la forma de la función \\(f\\) que no conocemos. \\(f\\) representa la relación sistemática entre \\(Y\\) y \\(X\\). ¿Qué tan bien podemos estimar esa \\(f\\) que no conocemos, con los datos disponibles? ¿Qué significa estimar bien? Incluso este ejemplo tan simple muestra las dificultades que vamos a enfrentar, y la importancia de determinar con cuidado qué tanta información tenemos, y qué tan buenas pueden ser nuestras predicciones. 1.3 Predicciones La idea es entonces producir una estimación de f que nos permita hacer predicciones. Si denotamos por \\(\\hat{f}\\) a una estimación de \\(f\\) construida a partir de los datos, podemos hacer predicciones aplicando \\(\\hat{f}\\) a valores de \\(X\\). La predicción de Y la denotamos por \\(\\hat{Y}\\), y \\[\\hat{Y}=\\hat{f}(X).\\] El error de predicción (residual) está dado por el valor observado menos la predicción: \\[Y-\\hat{Y}.\\] En nuestro ejemplo anterior, podríamos construir, por ejemplo, una recta ajustada por mínimos cuadrados: curva_1 &lt;- geom_smooth(data=datos, method = &quot;lm&quot;, se=FALSE, color=&quot;red&quot;, formula = y ~ x, size = 1.1) ggplot(datos, aes(x = x, y = y)) + geom_point() + curva_1 En este caso \\(\\hat{f}\\) es una recta, y la podemos usar para hacer predicciones. Por ejemplo, si tenemos una observación con \\(x_0=8\\) años de estudio, nuestra predicción del ingreso \\(\\hat{y}=\\hat{f}(8)\\) sería lineal &lt;- lm(y ~ x,data = datos) pred_1 &lt;- predict(lineal, newdata = data.frame(x=8)) pred_1 ## 1 ## 2193.561 ggplot(datos, aes(x = x, y = y)) + geom_point() + curva_1 + geom_segment(x = 0, xend = 8, y = pred_1, yend = pred_1, colour = &#39;salmon&#39;) + geom_segment(x = 8, xend = 8, y = 0, yend = pred_1, colour = &#39;salmon&#39;) + annotate(&#39;text&#39;, x = 0.5, y = pred_1 + 100, label = round(pred_1, 1)) + geom_point( x= 8, y =3200, col=&#39;green&#39;, size = 4) Si observamos que para esta observación con \\(x_0=8\\), resulta que el correspondiente ingreso es \\(y_0=3200\\), entonces el error sería y_0 &lt;- 3200 y_0 - pred_1 ## 1 ## 1006.439 En aprendizaje buscamos que estos errores sean lo más cercano a cero que sea posible. 1.4 Tarea de aprendizaje supervisado El elemento faltante para definir la tarea de aprendizaje supervisado es cuantificar qué significa aproximar bien a \\(f\\), o tener predicciones precisas. Para esto definimos una función de pérdida: \\[L(Y, \\hat{f}(X)),\\] que nos dice cuánto nos cuesta hacer la predicción \\(\\hat{f}(X)\\) cuando el verdadero valor es \\(Y\\) y las variables de entrada son \\(X\\). Una opción conveniente para problemas de regresión es la pérdida cuadrática: \\[L(Y, \\hat{f}(X)) = (Y - \\hat{f}(X))^2\\] Esta es una cantidad aleatoria, de modo que en algunos casos este error puede ser más grande o más chico. Usualmente buscamos una \\(\\hat{f}\\) de modo que el error promedio sea chico: \\[Err = E (Y - \\hat{f}(X))^2 \\] Notas: Este valor esperado es sobre la población para la que queremos hacer predicciones. Es una cantidad teórica, no podemos calcularla con ningún conjunto de datos Intenta demostrar que bajo error cuadrático medio y suponiendo el modelo aditivo \\(Y=f(X)+\\epsilon\\), el mejor predictor de \\(Y\\) es \\(f(x)= E[Y|X=x]\\). Es decir: lo que nos interesa es aproximar lo mejor que se pueda la esperanza condicional Ahora tenemos los elementos para definir con precisión el problema de aprendizaje supervisado. Consideramos un proceso generador de datos \\((X,Y)\\). En primer lugar, tenemos datos de los que vamos a aprender. Supongamos entonces que tenemos un conjunto de datos etiquetados (generados según \\((X,Y)\\)) \\[{\\mathcal L}=\\{ (x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}), \\ldots, (x^{(N)}, y^{(N)}) \\}\\] que llamamos conjunto de entrenamiento. Nótese que usamos minúsculas para denotar observaciones particulares de \\((X,Y)\\). Un algoritmo de aprendizaje (aprender de los datos) es una regla que asigna a cada conjunto de entrenamiento \\({\\mathcal L}\\) una función \\(\\hat{f}\\): \\[{\\mathcal L} \\to \\hat{f}.\\] Una vez que construimos la función \\(\\hat{f}\\), podemos hacer predicciones. El desempeño del predictor particular \\(\\hat{f}\\) se mide como sigue: si en el futuro observamos otra muestra \\({\\mathcal T}\\), que llamamos muestra de prueba, \\[{\\mathcal T}=\\{ (x_0^{(1)},y_0^{(1)}),(x_0^{(2)},y_0^{(2)}), \\ldots, (x_0^{(m)}, y_0^{(m)}) \\}\\] entonces decimos que el error de predicción (cuadrático) de \\(\\hat{f}\\) para el ejemplo \\((x_0^{(j)},y_0^{(j)})\\) está dado por \\[(y_0^{(j)} - \\hat{f}(x_0^{(j)}))^2\\] y el error promedio sobre la muestra \\({\\mathcal T}\\) es \\[\\hat{Err} = \\frac{1}{m}\\sum_{j=1}^m (y_0^{(j)} - \\hat{f}(x_0^{(j)}))^2\\] que es una estimación del error de predicción \\[Err = E (Y - \\hat{f}(X))^2 \\] Adicionalmente, definimos otra cantidad de menor interés, el error de entrenamiento, como \\[\\overline{err} = \\frac{1}{N}\\sum_{i=1}^N (y^{(i)} - \\hat{f}(x^{(i)}))^2.\\] El punto más importante que discutiremos ahora es el siguiente: Nótese que el error de entrenamiento se calcula sobre la muestra \\({\\mathcal L}\\) que se usó para construir \\(\\hat{f}\\), mientras que el error de prueba se calcula usando una muestra independiente \\({\\mathcal T}\\). \\(\\hat{Err}\\) es una estimación razonable de el error de predicción \\(Err\\) (por ejemplo, \\(\\hat{Err} \\to Err\\) cuando el tamaño de la muestra de prueba crece), pero \\(\\overline{err}\\) típicamente es una estimación mala del error de predicción. Ejemplo En el ejemplo que hemos estado usando, ¿que curva preferirías para predecir, la gris, la roja o la azul? ¿Cuál tiene menor error de entrenamiento? set.seed(280572) error &lt;- rnorm(length(x), 0, 500) y &lt;- f(x) + error datos_entrena &lt;- data.frame(x=x, y=y) head(datos_entrena) ## x y ## 1 1 86.22033 ## 2 7 2353.75863 ## 3 10 3078.71029 ## 4 0 -397.80229 ## 5 0 424.73363 ## 6 5 3075.92998 curva_1 &lt;- geom_smooth(data=datos_entrena, method = &quot;loess&quot;, se=FALSE, color=&quot;gray&quot;, span=1, size=1.1) curva_2 &lt;- geom_smooth(data=datos_entrena, method = &quot;loess&quot;, se=FALSE, color=&quot;red&quot;, span=0.5, size=1.1) curva_3 &lt;- geom_smooth(data=datos_entrena, method = &quot;lm&quot;, se=FALSE, color=&quot;blue&quot;, size=1.1) ggplot(datos_entrena, aes(x=x, y=y)) + geom_point() + curva_1 + curva_2 + curva_3 Calculamos los errores de entrenamiento de cada curva: mod_rojo &lt;- loess(y ~ x, data = datos_entrena, span=0.3) mod_gris &lt;- loess(y ~ x, data = datos_entrena, span=1) mod_recta &lt;- lm(y ~ x, data = datos_entrena) df_mods &lt;- data_frame(nombre = c(&#39;recta&#39;, &#39;rojo&#39;,&#39;gris&#39;)) df_mods$modelo &lt;- list(mod_recta, mod_rojo, mod_gris) error_f &lt;- function(df, mod){ function(mod){ preds &lt;- predict(mod, newdata = df) round(sqrt(mean((preds - df$y) ^ 2))) } } error_ent &lt;- error_f(datos_entrena) df_mods &lt;- df_mods %&gt;% mutate(error_entrena = map_dbl(modelo, error_ent)) df_mods ## # A tibble: 3 x 3 ## nombre modelo error_entrena ## &lt;chr&gt; &lt;list&gt; &lt;dbl&gt; ## 1 recta &lt;S3: lm&gt; 782 ## 2 rojo &lt;S3: loess&gt; 189 ## 3 gris &lt;S3: loess&gt; 389 El error de entrenamiento es considerablemente menor para la curva roja, y es más grande para la recta. Sin embargo, consideremos que tenemos una nueva muestra (de prueba). set.seed(218052272) x_0 &lt;- sample(0:13, 100, replace = T) error &lt;- rnorm(length(x_0), 0, 500) y_0 &lt;- f(x_0) + error datos_prueba &lt;- data_frame(x = x_0, y = y_0) datos_prueba ## # A tibble: 100 x 2 ## x y ## &lt;int&gt; &lt;dbl&gt; ## 1 9 2156. ## 2 11 3227. ## 3 3 2382. ## 4 10 3482. ## 5 7 2733. ## 6 7 2326. ## 7 12 3464. ## 8 0 -564. ## 9 10 3296. ## 10 0 366. ## # ... with 90 more rows error_p &lt;- error_f(datos_prueba) df_mods &lt;- df_mods %&gt;% mutate(error_prueba = map_dbl(modelo, error_p)) df_mods ## # A tibble: 3 x 4 ## nombre modelo error_entrena error_prueba ## &lt;chr&gt; &lt;list&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 recta &lt;S3: lm&gt; 782 801 ## 2 rojo &lt;S3: loess&gt; 189 628 ## 3 gris &lt;S3: loess&gt; 389 520 Observaciones El “mejor”&quot; modelo en entrenamiento es uno que sobreajusta a los datos, pero es el peor con una muestra de prueba. La curva roja aprende de la componente de ruido del modelo - lo cual realmente no es aprendizaje. El modelo de la recta no es bueno en entrenamiento ni en prueba. Este modelo no tiene la capacidad para aprender de la señal en los datos. El mejor modelo en la muestra de prueba es uno que está entre la recta y la curva roja en términos de flexibilidad. Nuestra intuición para escoger el modelo gris desde el principio se refleja en que generaliza mejor que los otros, y eso a su vez se refleja en un error de prueba más bajo. ¿De dónde provienen los errores en la predicción? ¿Podemos hacer el error igual a cero? Si establemos que el error es una función creciente de \\(Y-\\hat{Y}\\), vemos que \\[ Y-\\hat{Y} = f(X) + \\epsilon - \\hat{f}(X)= (f(X) - \\hat{f}(X)) + \\epsilon,\\] donde vemos que hay dos componentes que pueden hacer grande a \\(Y-\\hat{Y}\\): La diferencia \\(f(X) - \\hat{f}(X)\\) está asociada a error reducible, pues depende de qué tan bien estimemos \\(f(X)\\) con \\(\\hat{f}(X)\\) El error aleatorio \\(\\epsilon\\), asociado a error irreducible. Cualquiera de estas dos cantidades pueden hacer que nuestras predicciones no sean precisas. No podemos hacer mucho acerca del error irreducible (sin cambiar las variables que usamos, la definición del problema, etc.) En nuestro ejemplo anterior, el error reducible: Es grande para el modelo rojo, pues responde demasiado fuerte a ruido en los datos (tiene varianza alta). Es grande para el modelo de la recta, pues no tiene capacidad para acercarse a la verdadera curva (está sesgado). 1.5 Balance de complejidad y rigidez Como vimos en el ejemplo de arriba, el error de entrenamiento no es un buen indicador del desempeño futuro de nuestras predicciones. Para evaluar este desempeño, necesitamos una muestra de prueba independiente de la muestra que usamos para aprender o para entrenar el modelo. Intuitivamente esto tiene sentido: en el proceso de aprendizaje tenemos disponibles las etiquetas (sabemos las respuestas), de modo que puede suceder que el algoritmo memorice la asociación de qué etiquetas \\(y^{(i)}\\) van con cada conjunto de entradas \\(x^{(i)}\\). Esto se dice de varias maneras, por ejemplo: El modelo sobreajusta a los datos: esto quiere decir que por ajustar aspectos de los datos de entrenamiento demasiado fuertemente, el algoritmo parece replicar de cerca los datos de entrenamiento pero se desempeña mal en la predicción. El modelo aprende del ruido: nuestro proceso de aprendizaje captura aspectos irrelevantes de los datos, que nuevos datos no van a compartir. El modelo no tiene capacidad de generalización, porque captura aspectos que solo están presentes en nuestra muestra de entrenamiento. El modelo tiene varianza alta, porque cambia mucho dependiendo de la muestra de entrenamiento. El modelo es demasiado complejo o flexible y fácilmente se adapta a cualquier conjunto de datos, tanto señal como ruido En el ejemplo de arriba, también vimos que algunos modelos pueden tener desempeño malo porque no tienen la capacidad de aprender de patrones reales y generales en los datos (la recta en el ejemplo anterior). Podemos decir esto de varias maneras: El modelo subajusta a los datos: no tienen la capacidad de ajustar aspectos de los datos de entrenamiento que son relaciones reales entre las variables. El modelo ignora señal en los datos: el algoritmo no captura aspectos relevantes de los datos, que comparten con nuevos datos y pueden utilizarse para hacer predicciones. El modelo no tiene capacidad de aprendizaje, pues no puede capturar aspectos que son generales para el fenómeno de interés. El modelo tiene sesgo alto, porque no puede ajustar patrones generalizables en los datos. El modelo es demasiado rígido, y no puede adaptarse ni siquiera a patrones fuertes y claros en los datos. Logramos buenas predicciones cuando refinamos nuestros modelos o algoritmos para lograr aprender de la señal e ignorar el ruido, que no ayuda en la predicción, y lograr reducir el error de predicción lo más posible con los datos disponibles. Esto requiere buscar el nivel adecuado de complejidad en los modelos o algoritmos para los datos que tenemos. Para construir buenos predictores, requerimos que: El algoritmo tenga la flexibilidad necesaria para capturar patrones generales y fuertes en los datos El algoritmo tenga la rigidez necesaria para tener robustez a patrones de ruido o particularidades no repetibles de nuestra muestra de entrenamiento. Saber intuitivamente cuál es el grado adecuado de complejidad para un problema dado es difícil. Para decidirlo, evaluamos el desempeño de nuestros métodos usando una muestra de prueba. El nivel adecuado de complejidad se traduce en menos errores de predicción. 1.5.0.1 Discusión (error de entrenamiento y prueba) En términos teóricos, podemos ver cuál es el problema de intentar evaluar el error de predicción utilizando la muestra de entrenamiento. En primer lugar consideremos evaluar el error de predicción para un ejemplo \\[(y_0- \\hat{f}(x_0))^2\\] donde \\((x_0, y_0)\\) es independiente de la muestra de entrenamiento. En este caso, la \\(\\hat{f}\\) está fija, y el valor esperado (error de predicción) nos da el error de predicción. Sin embargo, si \\((x,y)\\) es un caso de entrenamiento, el valor esperado de \\[(y- \\hat{f}(x))^2\\] requiere un cálculo más complicado, pues ¡ \\(\\hat{f}\\) también depende de \\((x,y)\\), pues se construye con la muestra de entrenamiento ! Esta cantidad podría ser igual a cero para cualquier \\((x,y)\\) (si nuestro algoritmo “interpola” como el en la curva roja del ejemplo anterior), y no necesariamente tiene qué ver con el error de predicción. En general, el error de entrenamiento es una cantidad secundaria, que utilizaremos más como medida de diagnóstico de nuestro proceso de ajuste. La cantidad que realmente queremos hacer chica es el error de predicción, que evaluamos con una muestra de prueba independiente de la muestra de entrenamiento. Para modelos muy simples, el error de entrenamiento puedes ser similar al de prueba. Sin embargo, conforme aumentamos complejidad (necesario para capturar patrones reales en los datos), estos dos errores típicamente divergen. 1.6 ¿Cómo estimar f? Ahora mostramos otro aspecto característico del aprendizaje supervisado. En primer lugar, el método general más usual para encontrar \\(\\hat{f}\\) es hacer lo siguiente: Consideramos una familia de funciones \\(h\\) candidatas para aproximar \\(f\\) Calculamos el error de entrenamiento de cada posible \\(h\\), y encontramos la \\(h\\) que minimiza el error de entrenamiento (la que más se ajusta a los datos de entrenamiento). Tomamos \\(\\hat{f} = h\\). \\[\\hat{f} = \\min_h \\frac{1}{N}\\sum_{i=1}^N (y^{(i)} - h(x^{(i)}))^2.\\] Evaluar el error de predicción del modelo que seleccionamos (queremos que sea bajo): \\[\\hat{Err} = \\frac{1}{m}\\sum_{j=1}^m (y_0^{(j)} - \\hat{f}(x_0^{(j)}))^2\\] De modo que el proceso es un problema de minimización. Lo que hace interesante nuestro caso es que realmente no queremos minimizar el error de entrenamiento. Queremos minimizar el error de prueba. O sea que minimizamos una cantidad que realmente no nos interesa (error de entrenamiento) con la esperanza de minimizar la cantidad que nos interesa (error de predicción). Como es de esperarse, este esquema simple no funciona muy bien en general. Para que la solución anterior sea razonable o buena, entonces: Tenemos que ser cuidadosos y poder regular la elección de la familia inicial de funciones (rectas? curvas muy flexibles? etc.), y/o A veces tenemos que modificar el objetivo del problema de minimización para que nos obligue encontrar un balance adecuado de complejidad y error de predicción bajo. Por ejemplo, penalizar el objetivo de modelos que son poco creíbles o demasiado complicados. Perturbar la muestra de entrenamiento de distintas maneras para evitar que un algoritmo aprenda información irrelevante La mayor parte del curso se concentra en considerar qué familias podemos utilizar, qué modificaciones de la función objetivo pueden hacerse, y qué perturbaciones pueden considerarse mejorar el desempeño predictivo de nuestros modelos. 1.7 Resumen Aprendizaje de máquina: algoritmos que aprenden de los datos para predecir cantidades numéricas, o clasificar (aprendizaje supervisado), o para encontrar estructura en los datos (aprendizaje no supervisado). En aprendizaje supervisado, el esquema general es: Un algoritmo aprende de una muestra de entrenamiento \\({\\mathcal L}\\), que es generada por el proceso generador de datos que nos interesa. Eso quiere decir que produce una función \\(\\hat{f}\\) (a partir de \\({\\mathcal L}\\)) que nos sirve para hacer predicciones \\(x \\to \\hat{f}(x)\\) de \\(y\\) El error de predicción del algoritmo es \\(Err\\), que mide en promedio qué tan lejos están las predicciones de valores reales. Para estimar esta cantidad usamos una muestra de prueba \\({\\mathcal T}\\), que es independiente de \\({\\mathcal L}\\). Esta es porque nos interesa el desempeño futuro de \\(\\hat{f}\\) para nuevos casos que el algoritmo no ha visto (esto es aprender). El error en la muestra de entrenamiento no necesariamente es buen indicador del desempeño futuro de nuestro algoritmo. Para obtener las mejores predicciones posibles, es necesario que el algoritmo sea capaz de capturar patrones en los datos, pero no tanto que tienda a absorber ruido en la estimación - es un balance de complejidad y rigidez. En términos estadísticos, se trata de un balance de varianza y sesgo. 1.8 Tarea En el ejemplo simple que vimos en la sección 1.4, utilizamos una sola muestra de entrenamiento para evaluar el algoritmo. ¿Será posible que escogimos una muestra atípica? Corre el ejemplo con otra muestra y reporta tus resultados de error de entrenamiento y error de prueba para los tres métodos. Opcional (difícil): evalúa los tres métodos comparando estos valores para un número grande de distintas simulaciones de los datos de entrenamiento. "],
["regresion.html", "Clase 2 Regresión lineal 2.1 Introducción 2.2 Aprendizaje de coeficientes (ajuste) 2.3 Descenso en gradiente 2.4 Descenso en gradiente para regresión lineal 2.5 Normalización de entradas 2.6 Interpretación de modelos lineales 2.7 Solución analítica 2.8 ¿Por qué el modelo lineal funciona bien (muchas veces)? Tarea", " Clase 2 Regresión lineal 2.1 Introducción Consideramos un problema de regresión con entradas \\(X=(X_1,X_2,\\ldots, X_p)\\) y respuesta \\(Y\\). Una de las maneras más simples que podemos intentar para predecir \\(Y\\) en función de las \\(X_j\\)´s es mediante una suma ponderada de los valores de las \\(X_j&#39;s\\), usando una función \\[f_\\beta (X) = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p,\\] Nuestro trabajo será entonces, dada una muestra de entrenamiento \\({\\mathcal L}\\), encontrar valores apropiados de las \\(\\beta\\)’s, para construir un predictor: \\[\\hat{f}(X) = \\hat{\\beta}_0 + \\hat{\\beta}_1 X_1 + \\hat{\\beta}_2 X_2 \\cdots + \\hat{\\beta} X_p\\] y usaremos esta función \\(\\hat{f}\\) para hacer predicciones \\(\\hat{Y} =\\hat{f}(X)\\). 2.1.0.1 Ejemplos Queremos predecir las ventas futuras anuales \\(Y\\) de un supermercado que se va a construir en un lugar dado. Las variables que describen el lugar son \\(X_1 = trafico\\_peatones\\), \\(X_2=trafico\\_coches\\). En una aproximación simple, podemos suponer que la tienda va a capturar una fracción de esos tráficos que se van a convertir en ventas. Quisieramos predecir con una función de la forma \\[f_\\beta (peatones, coches) = \\beta_0 + \\beta_1\\, peatones + \\beta_2\\, coches.\\] Por ejemplo, después de un análisis estimamos que \\(\\hat{\\beta}_0 = 1000000\\) (ventas base) \\(\\hat{\\beta}_1 = (200)*0.02 = 4\\) \\(\\hat{\\beta}_2 = (300)*0.01 =3\\) Entonces haríamos predicciones con \\[\\hat{f}(peatones, coches) = 1000000 + 4\\,peatones + 3\\, coches\\] El modelo lineal es más flexible de lo que parece en una primera aproximación, porque tenemos libertad para construir las variables de entrada a partir de nuestros datos. Por ejemplo, si tenemos una tercera variable \\(estacionamiento\\) que vale 1 si hay un estacionamiento cerca o 0 si no lo hay, podríamos definir las variables \\(X_1= peatones\\) \\(X_2 = coches\\) \\(X_3 = estacionamiento\\) \\(X_4 = coches*estacionamiento\\) Donde la idea de agregar \\(X_4\\) es que si hay estacionamiento entonces vamos a capturar una fracción adicional del trafico de coches, y la idea de \\(X_3\\) es que la tienda atraerá más nuevas visitas si hay un estacionamiento cerca. Buscamos ahora modelos de la forma \\[f_\\beta(X_1,X_2,X_3,X_4) = \\beta_0 + \\beta_1X_1 + \\beta_2 X_2 + \\beta_3 X_3 +\\beta_4 X_4\\] y podríamos obtener después de nuestra análisis las estimaciones \\(\\hat{\\beta}_0 = 800000\\) (ventas base) \\(\\hat{\\beta}_1 = 4\\) \\(\\hat{\\beta}_2 = (300)*0.005 = 1.5\\) \\(\\hat{\\beta}_3 = 400000\\) \\(\\hat{\\beta}_4 = (300)*0.02 = 6\\) y entonces haríamos predicciones con el modelo \\[\\hat{f} (X_1,X_2,X_3,X_4) = 800000 + 4\\, X_1 + 1.5 \\,X_2 + 400000\\, X_3 +6\\, X_4\\] 2.2 Aprendizaje de coeficientes (ajuste) En el ejemplo anterior, los coeficientes fueron calculados (o estimados) usando experiencia, argumentos teóricos, o quizá otras fuentes de datos (como estudios o encuestas, conteos, etc.) Ahora quisiéramos construir un algoritmo para aprender estos coeficientes del modelo \\[f_\\beta (X_1) = \\beta_0 + \\beta_1 X_1 + \\cdots \\beta_p X_p\\] a partir de una muestra de entrenamiento \\[{\\mathcal L}=\\{ (x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}), \\ldots, (x^{(N)}, y^{(N)}) \\}\\] El criterio de ajuste (algoritmo de aprendizaje) más usual para regresión lineal es el de mínimos cuadrados. Construimos las predicciones (ajustados) para la muestra de entrenamiento: \\[\\hat{y}^{(i)} = f_\\beta (x^{(i)}) = \\beta_0 + \\beta_1 x_1^{(i)}+ \\cdots + \\beta_p x_p^{(i)}\\] Y consideramos las diferencias de los ajustados con los valores observados: \\[e^{(i)} = y^{(i)} - f_\\beta (x^{(i)})\\] La idea entonces es minimizar la suma de los residuales al cuadrado, para intentar que la función ajustada pase lo más cercana a los puntos de entrenamiento que sea posible. Si \\[RSS(\\beta) = \\sum_{i=1}^N (y^{(i)} - f_\\beta(x^{(i)}))^2\\] Queremos resolver Mínimos cuadrados \\[\\min_{\\beta} RSS(\\beta) = \\min_{\\beta}\\sum_{i=1}^N (y^{(i)} - f_\\beta(x^{(i)}))^2\\] Observación: Como discutimos al final de las sección anterior, minimizar directamente el error de entrenamiento para encontrar los coeficientes puede resultar en en un modelo sobreajustado/con varianza alta/ruidoso. En la sección anterior discutimos tres grandes estrategias para mitigar este problema (restringir la familia de funciones, penalizar la función objetivo, perturbar la muestra de entrenamiento). El método mas común es cambiar la función objetivo, que discutiremos más adelante en la sección de regularización. 2.2.0.1 Ejemplo Consideremos library(readr) library(dplyr) library(knitr) prostata &lt;- read_csv(&#39;datos/prostate.csv&#39;) %&gt;% select(lcavol, lpsa, train) kable(head(prostata), format = &#39;html&#39;) lcavol lpsa train -0.5798185 -0.4307829 TRUE -0.9942523 -0.1625189 TRUE -0.5108256 -0.1625189 TRUE -1.2039728 -0.1625189 TRUE 0.7514161 0.3715636 TRUE -1.0498221 0.7654678 TRUE prostata_entrena &lt;- filter(prostata, train) ggplot(prostata_entrena, aes(x = lcavol, y = lpsa)) + geom_point() En este caso, buscamos ajustar el modelo (tenemos una sola entrada) \\(f_{\\beta} (X_1) = \\beta_0 + \\beta_1 X_1\\), que es una recta. Los cálculos serían como sigue: rss_calc &lt;- function(datos){ # esta función recibe los datos (x,y) y devuelve # una función f(betas) que calcula rss y &lt;- datos$lpsa x &lt;- datos$lcavol fun_out &lt;- function(beta){ y_hat &lt;- beta[1] + beta[2]*x e &lt;- (y - y_hat) rss &lt;- sum(e^2) 0.5*rss } fun_out } Nuestra función rss es entonces: rss_prostata &lt;- rss_calc(prostata_entrena) Por ejemplo, si consideramos \\((\\beta_0, \\beta_1) = (0, 1.5)\\), obtenemos beta &lt;- c(0,1.5) rss_prostata(beta) ## [1] 61.63861 Que corresponde a la recta ggplot(prostata_entrena, aes(x = lcavol, y = lpsa)) + geom_point() + geom_abline(slope = beta[2], intercept = beta[1], col =&#39;red&#39;) Podemos comparar con \\((\\beta_0, \\beta_1) = (1, 1)\\), obtenemos beta &lt;- c(1,1) rss_prostata(beta) ## [1] 27.11781 ggplot(prostata_entrena, aes(x = lcavol, y = lpsa)) + geom_point() + geom_abline(slope = beta[2], intercept = beta[1], col =&#39;red&#39;) Ahora minimizamos. Podríamos hacer res_opt &lt;- optim(c(0,0), rss_prostata, method = &#39;BFGS&#39;) beta_hat &lt;- res_opt$par beta_hat ## [1] 1.5163048 0.7126351 res_opt$convergence ## [1] 0 ggplot(prostata_entrena, aes(x = lcavol, y = lpsa)) + geom_point() + geom_abline(slope = 1, intercept = 1, col =&#39;red&#39;) + geom_abline(slope = beta_hat[2], intercept = beta_hat[1], size = 1.2) 2.3 Descenso en gradiente Aunque el problema de mínimos cuadrados se puede resolver analíticamente, proponemos un método numérico básico que es efectivo y puede escalarse a problemas grandes de manera relativamente simple: descenso en gradiente, o descenso máximo. Supongamos que una función \\(h(x)\\) es convexa y tiene un mínimo. La idea de descenso en gradiente es comenzar con un candidato inicial \\(z_0\\) y calcular la derivada en \\(z^{(0)}\\). Si \\(h(z^{(0)})&gt;0\\), la función es creciente en \\(z^{(0)}\\) y nos movemos ligeramente a la izquierda para obtener un nuevo candidato \\(z^{(1)}\\). si \\(h(z^{(0)})&lt;0\\), la función es decreciente en \\(z^{(0)}\\) y nos movemos ligeramente a la derecha para obtener un nuevo candidato \\(z^{(1)}\\). Iteramos este proceso hasta que la derivada es cercana a cero (estamos cerca del óptimo). Si \\(\\eta&gt;0\\) es una cantidad chica, podemos escribir \\[z^{(1)} = z^{(0)} - \\eta \\,h&#39;(z^{(0)}).\\] Nótese que cuando la derivada tiene magnitud alta, el movimiento de \\(z^{(0)}\\) a \\(z^{(1)}\\) es más grande, y siempre nos movemos una fracción de la derivada. En general hacemos \\[z^{(j+1)} = z^{(j)} - \\eta\\,h&#39;(z^{(j)})\\] para obtener una sucesión \\(z^{(0)},z^{(1)},\\ldots\\). Esperamos a que \\(z^{(j)}\\) converja para terminar la iteración. 2.3.0.1 Ejemplo Si tenemos h &lt;- function(x) x^2 + (x - 2)^2 - log(x^2 + 1) Calculamos (a mano): h_deriv &lt;- function(x) 2 * x + 2 * (x - 2) - 2*x/(x^2 + 1) Ahora iteramos con \\(\\eta = 0.4\\) y valor inicial \\(z_0=5\\) z_0 &lt;- 5 eta &lt;- 0.4 descenso &lt;- function(n, z_0, eta, h_deriv){ z &lt;- matrix(0,n, length(z_0)) z[1, ] &lt;- z_0 for(i in 1:(n-1)){ z[i+1, ] &lt;- z[i, ] - eta * h_deriv(z[i, ]) } z } z &lt;- descenso(15, 5, eta, h_deriv) z ## [,1] ## [1,] 5.0000000 ## [2,] -1.2461538 ## [3,] 1.9571861 ## [4,] 0.7498212 ## [5,] 1.5340816 ## [6,] 1.0455267 ## [7,] 1.3722879 ## [8,] 1.1573987 ## [9,] 1.3013251 ## [10,] 1.2057209 ## [11,] 1.2696685 ## [12,] 1.2270627 ## [13,] 1.2555319 ## [14,] 1.2365431 ## [15,] 1.2492245 Y vemos que estamos cerca de la convergencia. dat_iteraciones &lt;- data_frame(iteracion = 1:nrow(z), x = z[, 1], y = h(z[, 1])) graf_descenso &lt;- ggplot(dat_iteraciones, aes(x = x, y = y)) + stat_function(fun = h) + geom_point(size = 4, color = &quot;red&quot;) + xlim(c(-2, 5)) if(FALSE){ library(gganimate) graf_descenso + labs(title = &#39;Iteración: {frame_time}&#39;) + transition_time(iteracion) anim_save(filename = &quot;figuras/descenso_1.gif&quot;) } knitr::include_graphics(&quot;figuras/descenso_1.gif&quot;) 2.3.1 Selección de tamaño de paso \\(\\eta\\) Si hacemos \\(\\eta\\) muy chico, el algoritmo puede tardar mucho en converger: z &lt;- descenso(20, 5, 0.01, h_deriv) curve(h, -3, 6) points(z, h(z)) text(z[1:6], h(z[1:6]), pos = 3) Si hacemos \\(\\eta\\) muy grande, el algoritmo puede divergir: z &lt;- descenso(20, 5, 1.5, h_deriv) z ## [,1] ## [1,] 5.000000e+00 ## [2,] -1.842308e+01 ## [3,] 9.795302e+01 ## [4,] -4.837345e+02 ## [5,] 2.424666e+03 ## [6,] -1.211733e+04 ## [7,] 6.059265e+04 ## [8,] -3.029573e+05 ## [9,] 1.514792e+06 ## [10,] -7.573955e+06 ## [11,] 3.786978e+07 ## [12,] -1.893489e+08 ## [13,] 9.467445e+08 ## [14,] -4.733723e+09 ## [15,] 2.366861e+10 ## [16,] -1.183431e+11 ## [17,] 5.917153e+11 ## [18,] -2.958577e+12 ## [19,] 1.479288e+13 ## [20,] -7.396442e+13 Es necesario ajustar el tamaño de paso para cada problema particular. Si la convergencia es muy lenta, podemos incrementarlo. Si las iteraciones divergen, podemos disminuirlo 2.3.2 Funciones de varias variables Si ahora \\(h(z)\\) es una función de \\(p\\) variables, podemos intentar la misma idea usando el gradiente. Por cálculo sabemos que el gradiente apunta en la dirección de máximo crecimiento local. El gradiente es el vector columna con las derivadas parciales de \\(h\\): \\[\\nabla h(z) = \\left( \\frac{\\partial h}{\\partial z_1}, \\frac{\\partial h}{\\partial z_2}, \\ldots, \\frac{\\partial h}{\\partial z_p} \\right)^t\\] Y el paso de iteración, dado un valor inicial \\(z_0\\) y un tamaño de paso \\(\\eta &gt;0\\) es \\[z^{(i+1)} = z^{(i)} - \\eta \\nabla h(z^{(i)})\\] Las mismas consideraciones acerca del tamaño de paso \\(\\eta\\) aplican en el problema multivariado. h &lt;- function(z) { z[1]^2 + z[2]^2 - z[1] * z[2] } h_gr &lt;- function(z_1,z_2) apply(cbind(z_1, z_2), 1, h) grid_graf &lt;- expand.grid(z_1 = seq(-3, 3, 0.1), z_2 = seq(-3, 3, 0.1)) grid_graf &lt;- grid_graf %&gt;% mutate( val = apply(cbind(z_1,z_2), 1, h)) gr_contour &lt;- ggplot(grid_graf, aes(x = z_1, y = z_2, z = val)) + geom_contour(binwidth = 1.5, aes(colour = ..level..)) gr_contour El gradiente está dado por h_grad &lt;- function(z){ c(2*z[1] - z[2], 2*z[2] - z[1]) } Podemos graficar la dirección de máximo descenso para diversos puntos. Estas direcciones son ortogonales a la curva de nivel que pasa por cada uno de los puntos: grad_1 &lt;- h_grad(c(0,-2)) grad_2 &lt;- h_grad(c(1,1)) eta &lt;- 0.2 gr_contour + geom_segment(aes(x=0.0, xend=0.0-eta*grad_1[1], y=-2, yend=-2-eta*grad_1[2]), arrow = arrow(length = unit(0.2,&quot;cm&quot;)))+ geom_segment(aes(x=1, xend=1-eta*grad_2[1], y=1, yend=1-eta*grad_2[2]), arrow = arrow(length = unit(0.2,&quot;cm&quot;)))+ coord_fixed(ratio = 1) Y aplicamos descenso en gradiente: inicial &lt;- c(3, 1) iteraciones &lt;- descenso(20, inicial , 0.1, h_grad) df_iteraciones &lt;- data.frame(iteraciones) %&gt;% mutate(iteracion = 1:nrow(iteraciones)) graf_descenso_2 &lt;- ggplot(data = df_iteraciones) + geom_contour(data= grid_graf, binwidth = 1.5, aes(x = z_1, y = z_2, z = val, colour = ..level..)) + geom_point(aes(x=X1, y=X2), colour = &#39;red&#39;) if(FALSE){ library(gganimate) graf_descenso_2 + labs(title = &#39;Iteración: {frame_time}&#39;) + transition_time(iteracion) anim_save(filename = &quot;figuras/descenso_2.gif&quot;) } knitr::include_graphics(&quot;figuras/descenso_2.gif&quot;) 2.4 Descenso en gradiente para regresión lineal Vamos a escribir ahora el algoritmo de descenso en gradiente para regresión lineal. Igual que en los ejemplos anteriores, tenemos que precalcular el gradiente. Una vez que esto esté terminado, escribir la iteración es fácil. Recordamos que queremos minimizar (dividiendo entre dos para simplificar más adelante) \\[RSS(\\beta) = \\frac{1}{2}\\sum_{i=1}^N (y^{(i)} - f_\\beta(x^{(i)}))^2\\] La derivada de la suma es la suma de las derivadas, así nos concentramos en derivar uno de los términos \\[ u^{(i)}=\\frac{1}{2}(y^{(i)} - f_\\beta(x^{(i)}))^2 \\] Usamos la regla de la cadena para obtener \\[ \\frac{1}{2}\\frac{\\partial}{\\partial \\beta_j} (y^{(i)} - f_\\beta(x^{(i)}))^2 = -(y^{(i)} - f_\\beta(x^{(i)})) \\frac{\\partial f_\\beta(x^{(i)})}{\\partial \\beta_j}\\] Ahora recordamos que \\[f_{\\beta} (x) = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\cdots + \\beta_p x_p\\] Y vemos que tenemos dos casos. Si \\(j=0\\), \\[\\frac{\\partial f_\\beta(x^{(i)})}{\\partial \\beta_0} = 1\\] y si \\(j=1,2,\\ldots, p\\) entonces \\[\\frac{\\partial f_\\beta(x^{(i)})}{\\partial \\beta_j} = x_j^{(i)}\\] Entonces, si ponemos $ u{(i)}=(y{(i)} - f_(x{(i)}))2 $: \\[\\frac{\\partial u^{(i)}}{\\partial \\beta_0} = -(y^{(i)} - f_\\beta(x^{(i)}))\\] y \\[\\frac{\\partial u^{(i)}}{\\partial \\beta_j} = - x_j^{(i)}(y^{(i)} - f_\\beta(x^{(i)}))\\] Y sumando todos los términos (uno para cada caso de entrenamiento): Gradiente para regresión lineal Sea \\(e^{(i)} = y_{(i)} - f_{\\beta} (x^{(i)})\\). Entonces \\[\\begin{equation} \\frac{\\partial RSS(\\beta)}{\\partial \\beta_0} = - \\sum_{i=1}^N e^{(i)} \\tag{2.1} \\end{equation}\\] \\[\\begin{equation} \\frac{\\partial RSS(\\beta)}{\\partial \\beta_j} = - \\sum_{i=1}^N x_j^{(i)}e^{(i)} \\tag{2.2} \\end{equation}\\] para \\(j=1,2,\\ldots, p\\). Nótese que cada punto de entrenamiento contribuye al cálculo del gradiente - la contribución es la dirección de descenso de error para ese punto particular de entrenamiento. Nos movemos entonces en una dirección promedio, para intentar hacer el error total lo más chico posible. Podemos implementar ahora estos cálculos. Aunque podríamos escribir ciclos para hacer estos cálculos, es mejor hacer los cálculos en forma matricial, de manera que aprovechamos rutinas de álgebra lineal eficiente. El cálculo del gradiente es como sigue: grad_calc &lt;- function(x_ent, y_ent){ salida_grad &lt;- function(beta){ f_beta &lt;- as.matrix(cbind(1, x_ent)) %*% beta e &lt;- y_ent - f_beta grad_out &lt;- -as.numeric(t(cbind(1, x_ent)) %*% e) names(grad_out) &lt;- c(&#39;Intercept&#39;, colnames(x_ent)) grad_out } salida_grad } grad_prostata &lt;- grad_calc(prostata_entrena[, 1, drop = FALSE], prostata_entrena$lpsa) grad_prostata(c(0,1)) ## Intercept lcavol ## -76.30319 -70.93938 grad_prostata(c(1,1)) ## Intercept lcavol ## -9.303187 17.064556 Podemos checar nuestro cálculo del gradiente, por ejemplo: delta &lt;- 0.001 (rss_prostata(c(1 + delta, 1)) - rss_prostata(c(1, 1))) / delta ## [1] -9.269687 (rss_prostata(c(1, 1 + delta)) - rss_prostata(c(1, 1))) / delta ## [1] 17.17331 Y ahora iteramos para obtener iteraciones &lt;- descenso(100, c(0,0), 0.005, grad_prostata) iteraciones ## [,1] [,2] ## [1,] 0.0000000 0.0000000 ## [2,] 0.8215356 1.4421892 ## [3,] 0.7332652 0.9545169 ## [4,] 0.8891507 1.0360252 ## [5,] 0.9569494 0.9603012 ## [6,] 1.0353555 0.9370937 ## [7,] 1.0977074 0.9046239 ## [8,] 1.1534587 0.8800287 ## [9,] 1.2013557 0.8576489 ## [10,] 1.2430547 0.8385314 ## [11,] 1.2791967 0.8218556 ## [12,] 1.3105688 0.8074114 ## [13,] 1.3377869 0.7948709 ## [14,] 1.3614051 0.7839915 ## [15,] 1.3818983 0.7745509 ## [16,] 1.3996803 0.7663595 ## [17,] 1.4151098 0.7592518 ## [18,] 1.4284979 0.7530844 ## [19,] 1.4401148 0.7477329 ## [20,] 1.4501947 0.7430895 ## [21,] 1.4589411 0.7390604 ## [22,] 1.4665303 0.7355643 ## [23,] 1.4731155 0.7325308 ## [24,] 1.4788295 0.7298986 ## [25,] 1.4837875 0.7276146 ## [26,] 1.4880895 0.7256328 ## [27,] 1.4918224 0.7239132 ## [28,] 1.4950614 0.7224211 ## [29,] 1.4978719 0.7211265 ## [30,] 1.5003106 0.7200031 ## [31,] 1.5024267 0.7190283 ## [32,] 1.5042627 0.7181825 ## [33,] 1.5058559 0.7174486 ## [34,] 1.5072383 0.7168117 ## [35,] 1.5084378 0.7162592 ## [36,] 1.5094786 0.7157797 ## [37,] 1.5103817 0.7153637 ## [38,] 1.5111654 0.7150027 ## [39,] 1.5118453 0.7146895 ## [40,] 1.5124353 0.7144177 ## [41,] 1.5129473 0.7141819 ## [42,] 1.5133915 0.7139772 ## [43,] 1.5137769 0.7137997 ## [44,] 1.5141114 0.7136456 ## [45,] 1.5144016 0.7135119 ## [46,] 1.5146534 0.7133959 ## [47,] 1.5148718 0.7132953 ## [48,] 1.5150614 0.7132079 ## [49,] 1.5152259 0.7131322 ## [50,] 1.5153687 0.7130664 ## [51,] 1.5154925 0.7130093 ## [52,] 1.5156000 0.7129598 ## [53,] 1.5156933 0.7129169 ## [54,] 1.5157742 0.7128796 ## [55,] 1.5158444 0.7128473 ## [56,] 1.5159053 0.7128192 ## [57,] 1.5159582 0.7127948 ## [58,] 1.5160040 0.7127737 ## [59,] 1.5160438 0.7127554 ## [60,] 1.5160784 0.7127395 ## [61,] 1.5161083 0.7127257 ## [62,] 1.5161343 0.7127137 ## [63,] 1.5161569 0.7127033 ## [64,] 1.5161765 0.7126943 ## [65,] 1.5161934 0.7126865 ## [66,] 1.5162082 0.7126797 ## [67,] 1.5162210 0.7126738 ## [68,] 1.5162321 0.7126687 ## [69,] 1.5162417 0.7126642 ## [70,] 1.5162501 0.7126604 ## [71,] 1.5162573 0.7126570 ## [72,] 1.5162636 0.7126541 ## [73,] 1.5162690 0.7126516 ## [74,] 1.5162738 0.7126495 ## [75,] 1.5162779 0.7126476 ## [76,] 1.5162815 0.7126459 ## [77,] 1.5162846 0.7126445 ## [78,] 1.5162872 0.7126433 ## [79,] 1.5162896 0.7126422 ## [80,] 1.5162916 0.7126412 ## [81,] 1.5162933 0.7126404 ## [82,] 1.5162949 0.7126397 ## [83,] 1.5162962 0.7126391 ## [84,] 1.5162973 0.7126386 ## [85,] 1.5162983 0.7126381 ## [86,] 1.5162992 0.7126377 ## [87,] 1.5162999 0.7126374 ## [88,] 1.5163006 0.7126371 ## [89,] 1.5163012 0.7126368 ## [90,] 1.5163016 0.7126366 ## [91,] 1.5163021 0.7126364 ## [92,] 1.5163024 0.7126363 ## [93,] 1.5163028 0.7126361 ## [94,] 1.5163030 0.7126360 ## [95,] 1.5163033 0.7126359 ## [96,] 1.5163035 0.7126358 ## [97,] 1.5163037 0.7126357 ## [98,] 1.5163038 0.7126356 ## [99,] 1.5163040 0.7126356 ## [100,] 1.5163041 0.7126355 Y checamos que efectivamente el error total de entrenamiento decrece apply(iteraciones, 1, rss_prostata) ## [1] 249.60960 51.70986 32.49921 28.96515 27.22475 25.99191 25.07023 ## [8] 24.37684 23.85483 23.46181 23.16591 22.94312 22.77538 22.64910 ## [15] 22.55401 22.48242 22.42852 22.38794 22.35739 22.33438 22.31706 ## [22] 22.30402 22.29421 22.28681 22.28125 22.27706 22.27390 22.27153 ## [29] 22.26974 22.26839 22.26738 22.26662 22.26604 22.26561 22.26528 ## [36] 22.26504 22.26485 22.26471 22.26461 22.26453 22.26447 22.26443 ## [43] 22.26439 22.26437 22.26435 22.26434 22.26432 22.26432 22.26431 ## [50] 22.26431 22.26430 22.26430 22.26430 22.26430 22.26429 22.26429 ## [57] 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 ## [64] 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 ## [71] 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 ## [78] 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 ## [85] 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 ## [92] 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 22.26429 ## [99] 22.26429 22.26429 Verificamos el gradiente, que si convergió al mínimo debe ser muy cercano a 0: grad_prostata(iteraciones[100, ]) ## Intercept lcavol ## -2.053148e-05 9.458051e-06 Notación y forma matricial Usando la notación de la clase anterior (agregando una columna de unos al principio): \\[\\underline{X} = \\left ( \\begin{array}{ccccc} 1 &amp; x_1^{(1)} &amp; x_2^{(1)} &amp; \\ldots &amp; x_p^{(1)} \\\\ 1 &amp; x_1^{(2)} &amp; x_2^{(2)} &amp; \\ldots &amp; x_p^{(2)}\\\\ 1&amp; \\vdots &amp; \\vdots &amp; &amp; \\vdots \\\\ 1 &amp; x_1^{(N)} &amp; x_2^{(N)} &amp; \\ldots &amp; x_p^{(N)} \\\\ \\end{array} \\right)\\] y \\[\\underline{y} =(y^{(1)},y^{(2)}, \\ldots, y^{(N)})^t.\\] Como \\[\\underline{e} = \\underline{y} - \\underline{X}\\beta\\] tenemos entonces (de las fórmulas (2.1) y (2.2)): \\[\\begin{equation} \\nabla RSS(\\beta) = \\underline{X}^t(\\underline{X}\\beta - \\underline{y}) = -\\underline{X}^t \\underline{e} \\tag{2.3} \\end{equation}\\] 2.5 Normalización de entradas La convergencia de descenso en gradiente (y también el desempeño numérico para otros algoritmos) puede dificultarse cuando las variables tienen escalas muy diferentes. Esto produce curvaturas altas en la función que queremos minimizar. En este ejemplo simple, una variable tiene desviación estándar 10 y otra 1: x1 &lt;- rnorm(100, 0, 5) x2 &lt;- rnorm(100, 0, 1) + 0.1*x1 y &lt;- 0*x1 + 0*x2 + rnorm(100, 0, 0.1) dat &lt;- data_frame(x1, x2, y) rss &lt;- function(beta) mean((as.matrix(dat[, 1:2]) %*% beta - y)^2) grid_beta &lt;- expand.grid(beta1 = seq(-1, 1, length.out = 50), beta2 = seq(-1, 1, length.out = 50)) rss_1 &lt;- apply(grid_beta, 1, rss) dat_x &lt;- data.frame(grid_beta, rss_1) ggplot(dat_x, aes(x = beta1, y = beta2, z = rss_1)) + geom_contour(binwidth = 0.5) + coord_equal() En algunas direcciones el gradiente es muy grande, y en otras chico. Esto implica que la convergencia puede ser muy lenta en algunas direcciones, puede diverger en otras, y que hay que ajustar el paso \\(\\eta &gt; 0\\) con cuidado, dependiendo de dónde comiencen las iteraciones. Por ejemplo, con un tamaño de paso relativamente chico, damos unos saltos grandes al principio y luego avanzamos muy lentamente: grad_sin_norm &lt;- grad_calc(dat[, 1:2, drop = FALSE], dat$y) iteraciones &lt;- descenso(10, c(0, -0.25, -0.75), 0.0001, grad_sin_norm) ggplot(dat_x) + geom_contour(aes(x = beta1, y = beta2, z = rss_1), binwidth = 0.5) + coord_equal() + geom_path(data = data.frame(iteraciones[, 2:3]), aes(x=X1, y=X2), colour = &#39;red&#39;) + geom_point(data = data.frame(iteraciones[, 2:3]), aes(x=X1, y=X2), colour = &#39;red&#39;) Si incrementamos el tamaño de paso observamos también convergencia lenta. En este caso particular, subir más el tamaño de paso produce divergencia: iteraciones &lt;- descenso(10, c(0, -0.25, -0.75), 0.0007, grad_sin_norm) ggplot(dat_x) + geom_contour(aes(x = beta1, y = beta2, z = rss_1), binwidth = 0.5) + coord_equal() + geom_path(data = data.frame(iteraciones[, 2:3]), aes(x=X1, y=X2), colour = &#39;red&#39;) + geom_point(data = data.frame(iteraciones[, 2:3]), aes(x=X1, y=X2), colour = &#39;red&#39;) Una normalización usual es con la media y desviación estándar, donde hacemos, para cada variable de entrada \\(j=1,2,\\ldots, p\\) \\[ x_j^{(i)} = \\frac{ x_j^{(i)} - \\bar{x}_j}{s_j}\\] donde \\[\\bar{x}_j = \\frac{1}{N} \\sum_{i=1}^N x_j^{(i)}\\] \\[s_j = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^N (x_j^{(i)}- \\bar{x}_j )^2}\\] es decir, centramos y normalizamos por columna. Otra opción común es restar el mínimo y dividir entre la diferencia del máximo y el mínimo, de modo que las variables resultantes toman valores en \\([0,1]\\). Entonces escalamos antes de ajustar: x1_s = (x1 - mean(x1))/sd(x1) x2_s = (x2 - mean(x2))/sd(x2) dat &lt;- data_frame(x1_s, x2_s, y) rss &lt;- function(beta) mean((as.matrix(dat[, 1:2]) %*% beta - y)^2) grid_beta &lt;- expand.grid(beta1 = seq(-1, 1, length.out = 50), beta2 = seq(-1, 1, length.out = 50)) rss_1 &lt;- apply(grid_beta, 1, rss) dat_x &lt;- data.frame(grid_beta, rss_1) ggplot(dat_x, aes(x = beta1, y = beta2, z = rss_1)) + geom_contour(binwidth = 0.5) + coord_equal() Nótese que los coeficientes ajustados serán diferentes a los del caso no normalizado. Si normalizamos, obtenemos convergencia más rápida grad_sin_norm &lt;- grad_calc(dat[, 1:2, drop = FALSE], dat$y) iteraciones &lt;- descenso(10, c(0, -0.25, -0.75), 0.005, grad_sin_norm) ggplot(dat_x) + geom_contour(aes(x = beta1, y = beta2, z = rss_1), binwidth = 0.5) + coord_equal() + geom_path(data = data.frame(iteraciones[, 2:3]), aes(x=X1, y=X2), colour = &#39;red&#39;) + geom_point(data = data.frame(iteraciones[, 2:3]), aes(x=X1, y=X2), colour = &#39;red&#39;) Cuando normalizamos antes de ajustar el modelo, las predicciones deben hacerse con entradas normalizadas. La normalización se hace con los mismos valores que se usaron en el entrenamiento (y no recalculando medias y desviaciones estándar con el conjunto de prueba). En cuanto a la forma funcional del predictor \\(f\\), el problema con entradas normalizadas es equivalente al de las entradas no normalizadas. Asegúrate de esto escribiendo cómo correponden los coeficientes de cada modelo normalizado con los coeficientes del modelo no normalizado. Supongamos que el modelo en las variables originales es \\[{f}_\\beta (X) = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p,\\] Consideramos el modelo con variables estandarizadas \\[{g}_\\beta (X) = \\beta_0^s + \\beta_1^s Z_1 + \\beta_2^s Z_2 + \\cdots + \\beta_p^s Z_p,\\] Sustituyendo \\(Z_j = (X_j - \\mu_j)/s_j,\\) \\[{g}_{\\beta^s} (X) = (\\beta_0^s - \\sum_{j=1}^p \\mu_j/s_j) + \\frac{\\beta_1^s}{s_j} X_1 + \\frac{\\beta_2^s}{s_2} X_2 + \\cdots + \\frac{\\beta_p^s}{s_p} X_p,\\] Y vemos que tiene la misma forma funcional de \\(f_\\beta(X)\\). Si la solución de mínimos cuadrados es única, entonces una vez que ajustemos tenemos que tener \\(\\hat{f}_\\beta(X) = \\hat{g}_{\\beta^s} (X)\\), lo que implica que \\[\\hat{\\beta}_0 = \\hat{\\beta}_0^s - \\sum_{j=1}^p \\mu_j/s_j\\] y \\[\\hat{\\beta}_j = \\hat{\\beta}_j^s/s_j.\\] Nótese que para pasar del problema estandarizado al no estandarizado simplemente se requiere escalar los coeficientes por la \\(s_j\\) correspondiente. 2.6 Interpretación de modelos lineales Muchas veces se considera que la facilidad de interpretación es una fortaleza del modelo lineal. Esto es en parte cierto, pero hay algunas consideraciones importantes que debemos tomar en cuenta. La interpretación más sólida es la de las predicciones: podemos decir por qué una predicción es alta o baja. Consideremos el ejemplo de cáncer de prostata, por ejemplo: library(tidyr) prostate_completo &lt;- read_csv(file = &#39;datos/prostate.csv&#39;) pr_entrena &lt;- filter(prostate_completo, train) pr_entrena &lt;- pr_entrena %&gt;% mutate(id = 1:nrow(pr_entrena)) #normalizamos pr_entrena_s &lt;- pr_entrena %&gt;% select(id, lcavol, age, lpsa) %&gt;% gather(variable, valor, lcavol:age) %&gt;% group_by(variable) %&gt;% mutate(media = mean(valor), desv = sd(valor)) %&gt;% mutate(valor_s = (valor - media)/desv) pr_modelo &lt;- pr_entrena_s %&gt;% select(id, lpsa, variable, valor_s) %&gt;% spread(variable, valor_s) mod_pr &lt;- lm( lpsa ~ lcavol + age , data = pr_modelo ) round(coefficients(mod_pr), 2) ## (Intercept) lcavol age ## 2.45 0.88 0.02 y observamos el rango de \\(lpsa\\): round(summary(pr_modelo$lpsa), 2) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -0.43 1.67 2.57 2.45 3.37 5.48 Ahora podemos interpretar el predictor: Cuando las variables lcavol y age están en sus media, la predicción de lpsa es 2.5 Si lcavol sube 1 desviación estándar por encima de la media, el predictor de lpsa sube alrededor de 0.9 unidades (de un rango de alrededor de 6 unidades) Si age sube 1 desviación estándar por encima de su media, el predictor de lpsa sube 0.02, lo cual es un movimiento muy chico considerando la variación de lpsa. Así podemos explicar cada predicción - considerando qué variables aportan positiva y cuáles negativamente a la predicción. El camino más seguro es limitarse a hacer este tipo de análisis de las predicciones. Hablamos de entender la estructura predictiva del problema con los datos que tenemos - y no intentamos ir hacia la explicación del fenómeno. Cualquier otra interpretación requiere mucho más cuidados, y requiere una revisión de la especificación correcta del modelo. Parte de estos cuidados se estudian en un curso de regresión desde el punto de vista estadístico, por ejemplo: La interpretación coeficiente a coeficiente no toma en cuenta la estructura de asociación de las \\(x&#39;s\\). Rara vez cambios marginales en una variable de entrada ocurren de manera independiente de las otras variables de entrada. Variación muestral. Es necesario considerar la variación en nuestras estimaciones de los coeficientes para poder concluir acerca de su relación con el fenómeno (tratable desde punto de vista estadístico, pero hay que checar supuestos). Quizá el error de estimación del coeficiente de lcavol es 2 veces su magnitud - difícilmente podemos concluir algo acerca la relación de lcavol. Efectos no lineales: si la estructura del problema es altamente no lineal, los coeficientes de un modelo lineal no tienen una interpretación clara en relación al fenómeno. Esto también es parcialmente tratable con diagnósticos. set.seed(2112) x &lt;- rnorm(20) y &lt;- x^2 summary(lm(y ~x)) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.7462 -0.5022 -0.3313 0.3435 1.6273 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.85344 0.17570 4.857 0.000127 *** ## x 0.04117 0.18890 0.218 0.829929 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.7484 on 18 degrees of freedom ## Multiple R-squared: 0.002632, Adjusted R-squared: -0.05278 ## F-statistic: 0.0475 on 1 and 18 DF, p-value: 0.8299 Otros cuidados adicionales se requieren si queremos hacer afirmaciones causales: Variables omitidas: si faltan algunas variables cruciales en el fenómeno que nos interesa, puede ser muy difícil interpretar el resto de los coeficientes en términos del fenómeno Ejemplo: Supongamos que queremos predecir cuánto van a gastar en televisiones samsung ciertas personas que llegan a Amazon. Una variable de entrada es el número de anuncios de televisiones Samsung que recibieron antes de llegar a Amazon. El coeficiente de esta variable es alto (significativo, etc.), así que concluimos que el anuncio causa compras de televisiones Samsung. ¿Qué está mal aquí? El modelo no está mal, sino la interpretación y la conclusión de causalidad. Cuando las personas están investigando acerca de televisiones, reciben anuncios. La razón es que esta variable nos puede indicar más bien quién está en proceso de compra de una televisión samsung (reciben anuncios) y quién no (no hacen búsquedas relevantes, así que no reciben anuncios). El modelo está mal especificado porque no consideramos que hay otra variable importante, que es el interés de la persona en compra de TVs Samsung. En general, la recomendación es que las interpretaciones causales deben considerarse como preliminares (o sugerencias), y se requiere más análisis y consideraciones antes de poder tener interpretaciones causales sólidas. Ejercicio En el siguiente ejercicio intentamos predecir el porcentaje de grasa corporal (una medición relativamente cara) usando mediciones de varias partes del cuerpo, edad, peso y estatura. Ver script ejercicios/bodyfat_ejercicio.R library(tidyr) dat_grasa &lt;- read_csv(file = &#39;datos/bodyfat.csv&#39;) head(dat_grasa) ## # A tibble: 6 x 14 ## grasacorp edad peso estatura cuello pecho abdomen cadera muslo rodilla ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 12.3 23 154. 67.8 36.2 93.1 85.2 94.5 59 37.3 ## 2 6.1 22 173. 72.2 38.5 93.6 83 98.7 58.7 37.3 ## 3 25.3 22 154 66.2 34 95.8 87.9 99.2 59.6 38.9 ## 4 10.4 26 185. 72.2 37.4 102. 86.4 101. 60.1 37.3 ## 5 28.7 24 184. 71.2 34.4 97.3 100 102. 63.2 42.2 ## 6 20.9 24 210. 74.8 39 104. 94.4 108. 66 42 ## # ... with 4 more variables: tobillo &lt;dbl&gt;, biceps &lt;dbl&gt;, antebrazo &lt;dbl&gt;, ## # muñeca &lt;dbl&gt; nrow(dat_grasa) ## [1] 252 2.7 Solución analítica El problema de mínimos cuadrados tiene una solución de forma cerrada. A partir del gradiente (2.3), podemos igual a cero y resolver (chécalo) para obtener: \\[\\begin{equation*} \\hat{\\beta} = \\left (\\underline{X}\\underline{X}^t \\right)^{-1} \\underline{X}^t\\underline{y} \\end{equation*}\\] Paquetes como lm de R usan como base esta expresión, pero los cálculos se hacen mediante descomposiciones matriciales para más estabilidad (productos de matrices e inversiones). Aunque es posible escalar y/o paralelizar estos cálculos matriciales para problemas grandes, los procedimientos son más delicados. Nuestro enfoque de descenso máximo tiene la ventaja de que es fácil de entender, usar, aplicar a otros problemas con éxito, y además puede escalarse trivialmente, como veremos más adelante (por ejemplo, descenso estocástico). ¡Aunque siempre que se pueda es buena idea usar lm! 2.8 ¿Por qué el modelo lineal funciona bien (muchas veces)? Regresión lineal es un método muy simple, y parecería que debería haber métodos más avanzados que lo superen fácilmente. Para empezar, es poco creíble que el modelo \\[f(X) = b_0 + b_1X_1 + \\cdots b_p X_p\\] se cumple exactamente para el fenómeno que estamos tratando. Pero regresión lineal muchas veces supera a métodos que intentan construir predictores más complejos. Una de las primeras razones es que podemos ver la aproximación lineal como una aproximación de primer orden a la verdadera \\(f(X)\\), y muchas veces eso es suficiente para producir predicciones razonables. Adicionalmente, otras veces sólo tenemos suficientes datos para hacer una aproximación de primer orden, aún cuando la verdadera \\(f(X)\\) no sea lineal, y resulta que esta aproximación da buenos resultados. Esto es particularmente cierto en problemas de dimensión alta, como veremos a continuación. 2.8.1 k vecinos más cercanos Un método popular, con buen desempeño en varios ejemplos, es el de k-vecinos más cercanos, que consiste en hacer aproximaciones locales directas de \\(f(X)\\). Sea \\({\\mathcal L}\\) un conjunto de entrenamiento. Para \\(k\\) entera fija, y \\(x_0\\) una entrada donde queremos predecir, definimos a \\(N_k(x_0)\\) como el conjunto de los \\(k\\) elementos de \\({\\mathcal L}\\) que tienen \\(x^{(i)}\\) más cercana a \\(x_0\\). Hacemos la predicción \\[\\hat{f}(x_0) = \\frac{1}{k}\\sum_{x^{(i)} \\in N_k(x_0)} y^{(i)}\\] Es decir, promediamos las \\(k\\) \\(y\\)’s con \\(x\\)’s más cercanas a donde queremos predecir. Ejemplo library(ISLR) datos &lt;- Auto[, c(&#39;name&#39;, &#39;weight&#39;,&#39;year&#39;, &#39;mpg&#39;)] datos$peso_kg &lt;- datos$weight*0.45359237 datos$rendimiento_kpl &lt;- datos$mpg*(1.609344/3.78541178) nrow(datos) ## [1] 392 Vamos a separa en muestra de entrenamiento y de prueba estos datos. Podemos hacerlo como sigue (2/3 para entrenamiento aproximadamente en este caso, así obtenemos alrededor de 100 casos para prueba): set.seed(213) datos$muestra_unif &lt;- runif(nrow(datos), 0, 1) datos_entrena &lt;- filter(datos, muestra_unif &gt; 1/3) datos_prueba &lt;- filter(datos, muestra_unif &lt;= 1/3) nrow(datos_entrena) ## [1] 274 nrow(datos_prueba) ## [1] 118 ggplot(datos_entrena, aes(x = peso_kg, y = rendimiento_kpl)) + geom_point() Consideremos un modelo de \\(k=15\\) vecinos más cercanos. La función de predicción ajustada es entonces: library(kknn) # nótese que no normalizamos entradas - esto también es importante # hacer cuando hacemos vecinos más cercanos, pues en otro caso # las variables con escalas más grandes dominan el cálculo mod_15vmc &lt;- kknn(rendimiento_kpl ~ peso_kg, train = datos_entrena, test = data_frame(peso_kg=seq(700,2200, by = 10)), k=15) dat_graf &lt;- data_frame(peso_kg = seq(700,2200, by = 10), rendimiento_kpl = predict(mod_15vmc)) ggplot(datos_entrena, aes(x = peso_kg, y = rendimiento_kpl)) + geom_point(alpha=0.6) + geom_line(data=dat_graf, col=&#39;red&#39;, size = 1.2) Y para \\(k=5\\) vecinos más cercanos: mod_5vmc &lt;- kknn(rendimiento_kpl ~ peso_kg, train = datos_entrena, test = data_frame(peso_kg=seq(700,2200, by = 10)), k = 5) dat_graf &lt;- data_frame(peso_kg = seq(700,2200, by = 10), rendimiento_kpl = predict(mod_5vmc)) ggplot(datos_entrena, aes(x = peso_kg, y = rendimiento_kpl)) + geom_point(alpha=0.6) + geom_line(data=dat_graf, col=&#39;red&#39;, size = 1.2) En nuestro caso, los errores de prueba son mod_3vmc &lt;- kknn(rendimiento_kpl ~ peso_kg, train = datos_entrena, test = datos_prueba, k = 3) mod_15vmc &lt;- kknn(rendimiento_kpl ~ peso_kg, train = datos_entrena, test = datos_prueba, k = 15) (mean((datos_prueba$rendimiento_kpl-predict(mod_3vmc))^2)) ## [1] 3.346934 (mean((datos_prueba$rendimiento_kpl-predict(mod_15vmc))^2)) ## [1] 2.697658 Pregunta: ¿Cómo escogerías una \\(k\\) adecuada para este problema? Recuerda que adecuada significa que se reduzca a mínimo posible el error de predicción. Como ejercicio, compara los modelos con \\(k = 2, 25, 200\\) utilizando una muestra de prueba. ¿Cuál se desempeña mejor? Da las razones de el mejor o peor desempeño: recuerda que el desempeño en predicción puede sufrir porque la función estimada no es suficiente flexible para capturar patrones importantes, pero también porque parte del ruido se incorpora en la predicción. Por los ejemplos anteriores, vemos que k-vecinos más cercanos puede considerarse como un aproximador universal, que puede adaptarse a cualquier patrón importante que haya en los datos. Entonces, ¿cuál es la razón de utilizar otros métodos como regresión? ¿Por qué el desempeño de regresión sería superior? La maldición de la dimensionalidad El método de k-vecinos más cercanos funciona mejor cuando hay muchas \\(x\\) cercanas a \\(x0\\), de forma que el promedio sea estable (muchas \\(x\\)), y extrapolemos poco (\\(x\\) cercanas). Cuando \\(k\\) es muy chica, nuestras estimaciones son ruidosas, y cuando \\(k\\) es grande y los vecinos están lejos, entonces estamos sesgando la estimación local con datos lejanos a nuestra región de interés. El problema es que en dimensión alta, casi cualquier conjunto de entrenamiento (independientemente del tamaño) sufre fuertemente por uno o ambas dificultades del problema. Ejemplo Consideremos que la salida Y es determinística \\(Y = e^{-8\\sum_{j=1}^p x_j^2}\\). Vamos a usar 1-vecino más cercano para hacer predicciones, c on una muestra de entrenamiento de 1000 casos. Generamos $x^{i}‘s uniformes en \\([ 1,1]\\), para \\(p = 2\\), y calculamos la respuesta \\(Y\\) para cada caso: fun_exp &lt;- function(x) exp(-8*sum(x^2)) x_1 &lt;- runif(1000, -1, 1) x_2 &lt;- runif(1000, -1, 1) dat &lt;- data_frame(x_1 = x_1, x_2 = x_2) dat$y &lt;- apply(dat, 1, fun_exp) ggplot(dat, aes(x = x_1, y = x_2, colour = y)) + geom_point() La mejor predicción en \\(x_0 = (0,0)\\) es \\(f((0,0)) = 1\\). Eñ vecino más cercano al origen es dist_origen &lt;- apply(dat, 1, function(x) sqrt(sum(head(x, -1)^2))) mas_cercano_indice &lt;- which.min(dist_origen) mas_cercano &lt;- dat[mas_cercano_indice, ] mas_cercano ## # A tibble: 1 x 3 ## x_1 x_2 y ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0327 0.0101 0.991 Nuestra predicción es entonces \\(\\hat{f}(0)=\\) 0.9906871, que es bastante cercano al valor verdadero (1). Ahora intentamos hacer lo mismo para dimensión \\(p=8\\). dat_lista &lt;- lapply(1:8, function(i) runif(1000, -1, 1)) dat &lt;- Reduce(cbind, dat_lista) %&gt;% data.frame dat$y &lt;- apply(dat, 1, fun_exp) dist_origen &lt;- apply(dat, 1, function(x) sqrt(sum(head(x, -1)^2))) mas_cercano_indice &lt;- which.min(dist_origen) mas_cercano &lt;- dat[mas_cercano_indice, ] mas_cercano ## init V2 V3 V4 V5 V6 ## 239 0.1612183 0.4117209 0.2546389 -0.226929 0.0774977 0.03897632 ## V7 V8 y ## 239 -0.4959736 0.0382697 0.01073141 Y el resultado es un desastre. Nuestra predicción es mas_cercano$y ## [1] 0.01073141 Necesitariamos una muestra de alrededor de un millón de casos para obtener resultados no tan malos (pruébalo). ¿Qué es lo que está pasando? La razón es que en dimensiones altas, los puntos de la muestra de entrenamiento están muy lejos unos de otros, y están cerca de la frontera, incluso para tamaños de muestra relativamente grandes como n = 1000. Cuando la dimensión crece, la situación empeora exponencialmente. En dimensiones altas, todos los conjuntos de entrenamiento factibles se distribuyen de manera rala en el espacio de entradas. Ahora intentamos algo similar con una función que es razonable aproximar con una función lineal: fun_cubica &lt;- function(x) 0.5 * (1 + x[1])^3 Y queremos predecir para \\(x=(0,0,\\ldots,0)\\), cuyo valor exacto es fun_cubica(0) ## [1] 0.5 Repetimos el proceso: simulamos las entradas, y aplicamos un vecino más cercano: set.seed(821) sims_1 &lt;- lapply(1:40, function(i) runif(1000, -0.5, 0.5) ) dat &lt;- data.frame(Reduce(cbind, sims_1)) dat$y &lt;- apply(dat, 1, fun_cubica) dist_origen &lt;- apply(dat[, 1:40], 1, function(x) sqrt(sum(x^2))) mas_cercano_indice &lt;- which.min(dist_origen) dat$y[mas_cercano_indice] ## [1] 0.09842398 Este no es un resultado muy bueno. Sin embargo, regresión se desempeña considerablemente mejor: mod_lineal &lt;- lm(y ~ ., data = dat) origen &lt;- data.frame(matrix(rep(0,40), 1, 40)) names(origen) &lt;- names(dat)[1:40] predict(mod_lineal, newdata = origen) ## 1 ## 0.6251876 Donde podemos ver que típicamente la predicción de regresión es mucho mejor que la de 1 vecino más cercano. Esto es porque el modelo explota la estructura aproximadamente lineal del problema (¿cuál estructura lineal? haz algunas gráficas). Nota: corre este ejemplo varias veces con semilla diferente. Lo que sucede más específicamente es que en regresión lineal utilizamos todos los datos para hacer nuestra estimación en cada predicción. Si la estructura del problema es aproximadamente lineal, entonces regresión lineal explota la estructura para hacer pooling de toda la infromación para construir predicción con sesgo y varianza bajas. Tarea Para este ejemplo usaremos los datos de https://archive.ics.uci.edu/ml/machine-learning-databases/housing/. El objetivo es predecir el valor mediano de las viviendas en áreas del censo de Estados Unidos, utilizando variables relacionadas con criminalidad, ambiente, tipo de viviendas, etc. Separa la muestra en dos partes: unos 400 para entrenamiento y el resto para prueba. Describe las variables en la muestra de prueba (rango, media, mediana, por ejemplo). Construye un modelo lineal para predecir MEDV en términos de las otras variables. Utiliza descenso en gradiente para estimar los coeficientes con los predictores estandarizados. Verifica tus resultados con la función lm. Evalúa el error de entrenamiento \\(\\overline{err}\\) de tu modelo, y evalúa después la estimación del error de predicción \\(\\hat{Err}\\) con la muestra de prueba. Utiliza la raíz del la media de los errores al cuadrado. (Adicional) Construye un modelo de 1,5,20 y 50 vecinos más cercanos, y evalúa su desempeño. ¿Cuál es la mejor \\(k\\) para reducir el error de prueba? "],
["logistica.html", "Clase 3 Regresión logística 3.1 El problema de clasificación 3.2 Estimación de probabilidades de clase 3.3 Error para modelos de clasificación 3.4 Regresión logística 3.5 Aprendizaje de coeficientes para regresión logística (binomial). 3.6 Ejercicio: datos de diabetes", " Clase 3 Regresión logística 3.1 El problema de clasificación Una variabla \\(G\\) categórica o cualitativa toma valores que no son numéricos. Por ejemplo, si \\(G\\) denota el estado del contrato de celular de un cliente dentro de un año, podríamos tener \\(G\\in \\{ activo, cancelado\\}\\). En un problema de clasificación buscamos predecir una variable respuesta categórica \\(G\\) en función de otras variables de entrada \\(X=(X_1,X_2,\\ldots, X_p)\\). Ejemplos Predecir si un cliente cae en impago de una tarjeta de crédito, de forma que podemos tener \\(G=corriente\\) o \\(G=impago\\). Variables de entrada podrían ser \\(X_1=\\) porcentaje de saldo usado, \\(X_2=\\) atrasos en los úlltimos 3 meses, \\(X_3=\\) edad, etc En nuestro ejemplo de reconocimiento de dígitos tenemos \\(G\\in\\{ 0,1,\\ldots, 9\\}\\). Nótese que los` dígitos no se pueden considerar como valores numéricos (son etiquetas). Tenemos que las entradas \\(X_j\\) para \\(j=1,2,\\ldots, 256\\) son valores de cada pixel (imágenes blanco y negro). En reconocimiento de imágenes quiza tenemos que \\(G\\) pertenece a un conjunto que típicamente contiene miles de valores (manzana, árbol, pluma, perro, coche, persona, cara, etc.). Las \\(X_j\\) son valores de pixeles de la imagen para tres canales (rojo, verde y azul). Si las imágenes son de 100x100, tendríamos 30,000 variables de entrada. ¿Qué estimar en problemas de clasificación? En problemas de regresión, consideramos modelos de la forma \\(Y= f(X) + \\epsilon\\), y vimos que podíamos plantear el problema de aprendizaje supervisado como uno donde el objetivo es estimar lo mejor que podamos la función \\(f\\) mediante un estimador \\(\\hat{f}\\). Usamos entonces \\(\\hat{f}\\) para hacer predicciónes. En el caso de regresión: \\(f(X)\\) es la relación sistemática de \\(Y\\) en función de \\(X\\) Dada \\(X\\), la variable observada \\(Y\\) es una variable aleatoria (\\(\\epsilon\\) depende de otras variables que no conocemos) No podemos usar un modelo así en clasificación pues \\(G\\) no es numérica. Sin embargo, podemos pensar que \\(X\\) nos da cierta información probabilística acerca de las clases que pueden ocurrir: \\(P(G|X)\\) es la probabilidad condicional de observar \\(G\\) si tenemos \\(X\\). Esto es la información sistemática de \\(G\\) en función de \\(X\\) Dada \\(X\\), la clase observada \\(G\\) es una variable aleatoria (depende de otras variables que no conocemos). En analogía con el problema de regresión, quisiéramos estimar las probabilidades condicionales \\(P(G|X)\\), que es la parte sistemática de la relación de \\(G\\) en función de \\(X\\). Normalmente codificamos las clases \\(g\\) con una etiqueta numérica, de modo que \\(G\\in\\{1,2,\\ldots, K\\}\\): Ejemplo (Impago de tarjetas de crédito) Supongamos que \\(X=\\) porcentaje del crédito máximo usado, y \\(G\\in\\{1, 2\\}\\), donde \\(1\\) corresponde al corriente y \\(2\\) representa impago. Podríamos tener, por ejemplo: \\[\\begin{align*} p_1(10\\%) &amp;= P(G=1|X=10\\%) = 0.95 \\\\ p_2(10\\%) &amp;= P(G=2|X=10\\%) = 0.05 \\end{align*}\\] y \\[\\begin{align*} p_1(95\\%) &amp;= P(G=1|X=95\\%) = 0.70 \\\\ p_2(95\\%) &amp;= P(G=2|X=95\\%) = 0.30 \\end{align*}\\] En resumen: En problemas de clasificación queremos estimar la parte sistemática de la relación de \\(G\\) en función \\(X\\), que en este caso quiere decir que buscamos estimar las probabilidades condicionales: \\[\\begin{align*} p_1(x) &amp;= P(G=1|X=x), \\\\ p_2(x) &amp;= P(G=2|X=x), \\\\ \\vdots &amp; \\\\ p_K(x) &amp;= P(G=K|X=x) \\end{align*}\\] para cada valor \\(x\\) de las entradas. A partir de estas probabilidades de clase podemos producir un clasificador de varias maneras (las discutiremos más adelante). La forma más simple es usando el clasificador de Bayes: Dadas las probabilidades condicionales \\(p_1(x),p_2(x),\\ldots, p_K(x)\\), el clasificador de Bayes asociado está dado por \\[G (x) = \\arg\\max_{g} p_g(x)\\] Es decir, clasificamos en la clase que tiene máxima probabilidad de ocurrir. Ejemplo (Impago de tarjetas de crédito) Supongamos que \\(X=\\) porcentaje del crédito máximo usado, y \\(G\\in\\{1, 2\\}\\), donde \\(1\\) corresponde al corriente y \\(2\\) representa impago. Las probabilidades condicionales de clase para la clase al corriente podrían ser, por ejemplo: \\(p_1(x) = P(G=1|X = x) =0.95\\) si \\(x &lt; 15\\%\\) \\(p_1(x) = P(G=1|X = x) = 0.95 - 0.007(x-15)\\) si \\(x&gt;=15\\%\\) Estas son probabilidades, pues hay otras variables que influyen en que un cliente permanezca al corriente o no en sus pagos más allá de información contenida en el porcentaje de crédito usado. Nótese que estas probabilidades son diferentes a las no condicionadas, por ejempo, podríamos tener que a total \\(P(G=1)=0.83\\). p_1 &lt;- function(x){ ifelse(x &lt; 15, 0.95, 0.95 - 0.007 * (x - 15)) } ggplot(data_frame(x = 0:100), aes(x = x)) + stat_function(fun = p_1) ¿Por qué en este ejemplo ya no mostramos la función \\(p_2(x)\\)? Si usamos el clasificador de Bayes, tendríamos por ejemplo que si \\(X=10\\%\\), como \\(p_1(10\\%) = 0.95\\) y \\(p_2(10\\%)=0.05\\), nuestra predicción de clase sería \\(G(10\\%) = 1\\) (al corriente), pero si \\(X=70\\%\\), \\(G(70\\%) = 1\\) (impago), pues \\(p_1(70\\%) = 0.57\\) y \\(p_2(70\\%) = 0.43\\). 3.2 Estimación de probabilidades de clase ¿Cómo estimamos ahora las probabilidades de clase a partir de una muestra de entrenamiento? Veremos por ahora dos métodos: k-vecinos más cercanos y regresión logística. Ejemplo Vamos a generar unos datos con el modelo simple del ejemplo anterior: library(tidyverse) library(kknn) # para hacer vecinos más cercanos simular_impago &lt;- function(n = 500){ # suponemos que los valores de x están concentrados en valores bajos, # quizá la manera en que los créditos son otorgados x &lt;- pmin(rexp(n, 1 / 40), 100) # las probabilidades de estar al corriente: probs &lt;- p_1(x) # finalmente, simulamos cuáles clientes siguen en al corriente y cuales no: g &lt;- ifelse(rbinom(length(x), 1, probs) == 1 ,1, 2) dat_ent &lt;- data_frame(x = x, p_1 = probs, g = factor(g)) dat_ent } set.seed(1933) dat_ent &lt;- simular_impago() %&gt;% select(x, g) dat_ent %&gt;% sample_n(20) ## # A tibble: 20 x 2 ## x g ## &lt;dbl&gt; &lt;fct&gt; ## 1 88.8 2 ## 2 97.0 1 ## 3 43.1 1 ## 4 43.2 1 ## 5 8.42 1 ## 6 6.19 1 ## 7 10.6 1 ## 8 15.2 1 ## 9 54.7 1 ## 10 93.6 2 ## 11 20.4 1 ## 12 100 1 ## 13 23.8 1 ## 14 49.6 2 ## 15 0.709 1 ## 16 77.1 1 ## 17 29.7 1 ## 18 6.50 1 ## 19 6.52 1 ## 20 28.7 2 Como este problema es de dos clases, podemos graficar como sigue: graf_1 &lt;- ggplot(dat_ent, aes(x = x)) + geom_point(aes(colour = g, y = as.numeric(g==&#39;1&#39;))) graf_1 Esta gráfica tiene el problema de que hay mucho trasplape entre los puntos. Podemos agregar variación artificial alrededor de 1 y 0, y también alrededor de los valores de \\(x\\) para evitar traslape en los extremos: graf_1 &lt;- ggplot(dat_ent, aes(x = x)) + geom_jitter(aes(colour = factor(g), y = as.numeric(g==&#39;1&#39;)), width=0.5, height=0.05) graf_1 3.2.1 k-vecinos más cercanos Podemos extender fácilmente k vecinos más cercanos para ver un ejemplo de cómo estimar las probabilidades de clase \\(p_g(x)\\). La idea general es igual que en regresión, y es simple: nos fijamos en las tasas locales de impago alrededor de la \\(x\\) para la que queremos predecir. Supongamos entonces que tenemos un conjunto de entrenamiento \\[{\\mathcal L}=\\{ (x^{(1)},g^{(1)}),(x^{(2)},g^{(2)}), \\ldots, (x^{(N)}, g^{(N)}) \\}\\] La idea es que si queremos predecir en \\(x_0\\), busquemos varios \\(k\\) vecinos más cercanos a \\(x_0\\), y estimamos entonces \\(p_g(x)\\) como la proporción de casos tipo \\(g\\) que hay entre los \\(k\\) vecinos de \\(x_0\\). Vemos entonces que este método es un intento de hacer una aproximación directa de las probabilidades condicionales de clase. Podemos escribir esto como: k vecinos más cercanos para clasificación Estimamos contando los elementos de cada clase entre los \\(k\\) vecinos más cercanos: \\[\\hat{p}_g (x_0) = \\frac{1}{k}\\sum_{x^{(i)} \\in N_k(x_0)} I( g^{(i)} = g),\\] para \\(g=1,2,\\ldots, K\\), donde \\(N_k(x_0)\\) es el conjunto de \\(k\\) vecinos más cercanos en \\({\\mathcal L}\\) de \\(x_0\\), y \\(I(g^{(i)}=g)=1\\) cuando \\(g^{(i)}=g\\), y cero en otro caso (indicadora). Ejemplo Regresamos a nuestro problema de impago. Vamos a intentar estimar la probabilidad condicional de estar al corriente usando k vecinos más cercanos (curva roja): graf_data &lt;- data_frame(x = seq(0,100, 1)) vmc &lt;- kknn(g ~ x, train = dat_ent, k = 60, test = graf_data) graf_data$p_1 &lt;- vmc$prob[ ,1] graf_verdadero &lt;- data_frame(x = 0:100, p_1 = p_1(x)) graf_1 + geom_line(data = graf_data, aes(y = p_1), colour = &#39;red&#39;, size=1.2) + geom_line(data = graf_verdadero, aes(y = p_1)) + ylab(&#39;Probabilidad al corriente&#39;) + xlab(&#39;% crédito usado&#39;) Igual que en el caso de regresión, ahora tenemos qué pensar cómo validar nuestra estimación, pues no vamos a tener la curva negra real para comparar. Arriba denotamos las probabilidades teóricas como \\(p_1 (x), p_2 (x), \\ldots, p_K (x)\\). Denotamos probabilidades estimadas como \\(\\hat{p}_1 (x), \\hat{p}_2 (x), \\ldots, \\hat{p}_K (x)\\) Ejemplo Consideremos datos de diabetes en mujeres Pima: A population of women who were at least 21 years old, of Pima Indian heritage and living near Phoenix, Arizona, was tested for diabetes according to World Health Organization criteria. The data were collected by the US National Institute of Diabetes and Digestive and Kidney Diseases. We used the 532 complete records after dropping the (mainly missing) data on serum insulin. npreg number of pregnancies. glu plasma glucose concentration in an oral glucose tolerance test. bp diastolic blood pressure (mm Hg). skin triceps skin fold thickness (mm). bmi body mass index (weight in kg/(height in m)^2). ped diabetes pedigree function. age age in years. type Yes or No, for diabetic according to WHO criteria. diabetes_ent &lt;- as_data_frame(MASS::Pima.tr) diabetes_pr &lt;- as_data_frame(MASS::Pima.te) diabetes_ent ## # A tibble: 200 x 8 ## npreg glu bp skin bmi ped age type ## * &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; ## 1 5 86 68 28 30.2 0.364 24 No ## 2 7 195 70 33 25.1 0.163 55 Yes ## 3 5 77 82 41 35.8 0.156 35 No ## 4 0 165 76 43 47.9 0.259 26 No ## 5 0 107 60 25 26.4 0.133 23 No ## 6 5 97 76 27 35.6 0.378 52 Yes ## 7 3 83 58 31 34.3 0.336 25 No ## 8 1 193 50 16 25.9 0.655 24 No ## 9 3 142 80 15 32.4 0.2 63 No ## 10 2 128 78 37 43.3 1.22 31 Yes ## # ... with 190 more rows Intentaremos predecir diabetes dependiendo del BMI: library(ggplot2) ggplot(diabetes_ent, aes(x = bmi, y= as.numeric(type==&#39;Yes&#39;), colour = type)) + geom_point() Usamos \\(20\\) vecinos más cercanos para estimar \\(p_g(x)\\): graf_data &lt;- data_frame(bmi = seq(20,45, 1)) vmc_5 &lt;- kknn(type ~ bmi, train = diabetes_ent, k = 20, test = graf_data, kernel = &#39;rectangular&#39;) graf_data$Yes &lt;- vmc_5$prob[ ,&quot;Yes&quot;] graf_data$No &lt;- vmc_5$prob[ ,&quot;No&quot;] graf_data &lt;- graf_data %&gt;% gather(type, prob, Yes:No) ggplot(diabetes_ent, aes(x = bmi, y= as.numeric(type==&#39;Yes&#39;), colour = type)) + geom_point() + geom_line(data = filter(graf_data, type ==&#39;Yes&#39;) , aes(x=bmi, y = prob, colour=type, group = type)) + ylab(&#39;Probabilidad diabetes&#39;) 3.3 Error para modelos de clasificación En regresión, vimos que la pérdida cuadrática era una buena opción para ajustar modelos (descenso en gradiente, por ejemplo), y también para evaluar su desempeño. Ahora necesitamos una pérdida apropiada para trabajar con modelos de clasificación. Consideremos entonces que tenemos una estimación \\(\\hat{p}_g(x)\\) de las probabilidad de clase \\(P(G=g|X=x)\\). Supongamos que observamos ahora \\((x, g)\\). Si \\(\\hat{p}_{g}(x)\\) es muy cercana a uno, deberíamos penalizar poco, pues dimos probabilidad alta a \\(G=g\\). Si \\(\\hat{p}_{g}(x)\\) es chica, deberíamos penalizar más, pues dimos probabilidad baja a \\(G=g\\). Si \\(\\hat{p}_{g}(x)\\) es muy cercana a cero, y observamos \\(G=g\\), deberíamos hacer una penalización muy alta (convergiendo a \\(\\infty\\), pues no es aceptable que sucedan eventos con probabilidad estimada extremadamente baja). Quisiéramos encontrar una función \\(h\\) apropiada, de forma que la pérdida al observar \\((x, g)\\) sea \\[s(\\hat{p}_{g}(x)),\\] y que cumpla con los puntos arriba señalados. Entonces tenemos que \\(s\\) debe ser una función continua y decreciente en \\([0,1]\\) Podemos poner \\(s(1)=0\\) (no hay pérdida si ocurre algo con probabilidad 1) \\(s(p)\\) debe ser muy grande is \\(p\\) es muy chica. Una opción analíticamente conveniente es \\[s(p) = - 2log(p)\\] s &lt;- function(z){ -2*log(z)} ggplot(data_frame(p = (0:100)/100), aes(x = p)) + stat_function(fun = s) + ylab(&quot;Devianza&quot;) Y entonces la pérdida (que llamamos devianza) que construimos está dada, para \\((x,g)\\) observado y probabilidades estimadas \\(\\hat{p}_g(x)\\) por \\[ - 2\\log(\\hat{p}_g(x)) \\] Su valor esperado (según el proceso que genera los datos) es nuestra medición del desempeño del modelo \\(\\hat{p}_g (x)\\), es decir, el error de predicción es: \\[-2E\\left [ \\log(\\hat{p}_G(X)) \\right ]\\] que podemos estimar con una muestra de prueba. Observaciones: Ojo: el nombre de devianza se utiliza de manera diferente en distintos lugares (pero para cosas similares). Usamos el factor 2 por razones históricas (la medida de devianza definida en estadística tiene un 2, para usar más fácilmente en pruebas de hipótesis relacionadas con comparaciones de modelos). Para nuestros propósitos, podemos usar o no el 2. No es fácil interpretar la devianza, pero es útil para comparar modelos. Veremos otras medidas más fáciles de intrepretar más adelante. Compara la siguiente definición con la que vimos para modelos de regresión: Sea \\[{\\mathcal L}=\\{ (x^{(1)},g^{(1)}),(x^{(2)},g^{(2)}), \\ldots, (x^{(N)}, g^{(N)}) \\}\\] una muestra de entrenamiento, a partir de las cuales construimos mediante un algoritmo funciones estimadas \\(\\hat{p}_{g} (x)\\) para \\(g=1,2,\\ldots, K\\). La devianza promedio de entrenamiento está dada por \\[\\begin{equation} \\overline{err} = - \\frac{2}{N}\\sum_{i=1}^N log(\\hat{p}_{g^{(i)}} (x^{(i)})) \\tag{3.1} \\end {equation}\\] Sea \\[{\\mathcal T}=\\{ (x_0^{(1)},g_0^{(1)}),(x_0^{(2)},g_0^{(2)}), \\ldots, (x_0^{(m)}, g_0^{(m)}) \\}\\] una muestra de prueba. La devianza promedio de prueba es \\[\\begin{equation} \\hat{Err} = - \\frac{2}{m}\\sum_{i=1}^m log(\\hat{p}_{g_0^{(i)}} (x_0^{(i)})) \\end {equation}\\] que es una estimación de la devianza de predicción \\[-2E\\left [ \\log(\\hat{p}_G(X)) \\right ]\\] Ejemplo Regresamos a nuestros ejemplo simulado de impago de tarjetas de crédito. Primero calculamos la devianza de entrenamiento s &lt;- function(x) -2*log(x) vmc_entrena &lt;- kknn(g ~ x, train = dat_ent, k = 60, test = dat_ent, kernel = &#39;rectangular&#39;) dat_dev &lt;- dat_ent %&gt;% select(x,g) dat_dev$hat_p_1 &lt;- predict(vmc_entrena, type =&#39;prob&#39;)[,1] dat_dev$hat_p_2 &lt;- predict(vmc_entrena, type =&#39;prob&#39;)[,2] dat_dev &lt;- dat_dev %&gt;% mutate(hat_p_g = ifelse(g==1, hat_p_1, hat_p_2)) Nótese que dependiendo de qué clase observamos (columna \\(g\\)), extraemos la probabilidad correspondiente a la columna hat_p_g: set.seed(125) dat_dev %&gt;% sample_n(20) ## # A tibble: 20 x 5 ## x g hat_p_1 hat_p_2 hat_p_g ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 9.47 1 0.967 0.0333 0.967 ## 2 100 2 0.417 0.583 0.583 ## 3 6.70 1 0.983 0.0167 0.983 ## 4 57.6 2 0.683 0.317 0.317 ## 5 54.1 1 0.683 0.317 0.683 ## 6 37.4 1 0.817 0.183 0.817 ## 7 69.5 1 0.667 0.333 0.667 ## 8 6.82 1 0.983 0.0167 0.983 ## 9 50.8 2 0.767 0.233 0.233 ## 10 59.3 1 0.7 0.3 0.7 ## 11 65.9 1 0.733 0.267 0.733 ## 12 9.64 1 0.967 0.0333 0.967 ## 13 67.3 1 0.717 0.283 0.717 ## 14 10.3 1 0.967 0.0333 0.967 ## 15 25.8 1 0.867 0.133 0.867 ## 16 30.4 1 0.867 0.133 0.867 ## 17 12.0 1 0.967 0.0333 0.967 ## 18 2.42 1 0.967 0.0333 0.967 ## 19 36.4 1 0.833 0.167 0.833 ## 20 84.8 2 0.483 0.517 0.517 Ahora aplicamos la función \\(s\\) que describimos arriba, y promediamos sobre el conjunto de entrenamiento: dat_dev &lt;- dat_dev %&gt;% mutate(dev = s(hat_p_g)) dat_dev %&gt;% ungroup %&gt;% summarise(dev_entrena = mean(dev)) ## # A tibble: 1 x 1 ## dev_entrena ## &lt;dbl&gt; ## 1 0.794 Recordemos que la devianza de entrenamiento no es la cantidad que evalúa el desempeño del modelo. Hagamos el cálculo entonces para una muestra de prueba: set.seed(1213) dat_prueba &lt;- simular_impago(n = 1000) %&gt;% select(x, g) vmc_prueba &lt;- kknn(g ~ x, train = dat_ent, k = 60, test = dat_prueba, kernel = &#39;rectangular&#39;) dat_dev_prueba &lt;- dat_prueba %&gt;% select(x,g) dat_dev_prueba$hat_p_1 &lt;- predict(vmc_prueba, type =&#39;prob&#39;)[,1] dat_dev_prueba$hat_p_2 &lt;- predict(vmc_prueba, type =&#39;prob&#39;)[,2] dat_dev_prueba &lt;- dat_dev_prueba %&gt;% mutate(hat_p_g = ifelse(g==1, hat_p_1, hat_p_2)) dat_dev_prueba &lt;- dat_dev_prueba %&gt;% mutate(dev = s(hat_p_g)) dat_dev_prueba %&gt;% ungroup %&gt;% summarise(dev_prueba = mean(dev)) ## # A tibble: 1 x 1 ## dev_prueba ## &lt;dbl&gt; ## 1 0.851 3.3.1 Ejercicio Utiliza 5, 20, 60, 200 y 400 vecinos más cercanos para nuestro ejemplo de tarjetas de crédito. ¿Cuál tiene menor devianza de prueba? ¿Cuál tiene menor devianza de entrenamiento? Grafica el mejor que obtengas y otros dos modelos malos. ¿Por qué crees que la devianza es muy grande para los modelos malos? Nota: ten cuidado con probabilidades iguales a 0 o 1, pues en en estos casos la devianza puede dar \\(\\infty\\). Puedes por ejemplo hacer que las probabilidades siempre estén en \\([\\epsilon, 1-\\epsilon]\\) para \\(\\epsilon&gt;0\\) chica. 3.3.2 Error de clasificación y función de pérdida 0-1 Otra medida común para medir el error de un clasificador es el error de clasificación, que también llamamos probabilidad de clasificación incorrecta, o error bajo pérdida 0-1. Si \\(\\hat{G}\\) es un clasificador (que puede ser construido a partir de probabilidades de clase), decimos que su error de clasificación es \\[P(\\hat{G}\\neq G)\\] Aunque esta definición aplica para cualquier clasificador, podemos usarlo para clasificadores construidos con probabilidades de clase de la siguiente forma: Sean \\(\\hat{p}_g(x)\\) probabilidades de clase estimadas. El clasificador asociado está dado por \\[\\hat{G} (x) = \\arg\\max_g \\hat{p}_g(x)\\] Podemos estimar su error de clasificación \\(P(\\hat{G} \\neq G)\\) con una muestra de prueba \\[{\\mathcal T}=\\{ (x_0^{(1)},g_0^{(1)}),(x_0^{(2)},g_0^{(2)}), \\ldots, (x_0^{(m)}, g_0^{(m)})\\] mediante \\[\\hat{Err} = \\frac{1}{m} \\sum_{j=i}^m I(\\hat{G}(x_0^{(i)}) \\neq g_0^{(i)}),\\] es decir, la proporción de casos de prueba que son clasificados incorrectamente. Ejemplo Veamos cómo se comporta en términos de error de clasificación nuestro último modelo: dat_dev$hat_G &lt;- predict(vmc_entrena) dat_dev %&gt;% mutate(correcto = hat_G == g) %&gt;% ungroup %&gt;% summarise(p_correctos = mean(correcto)) %&gt;% mutate(error_clasif = 1 - p_correctos) ## # A tibble: 1 x 2 ## p_correctos error_clasif ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.828 0.172 Y calculamos el error de clasificación de prueba: dat_dev_prueba$hat_G &lt;- predict(vmc_prueba) dat_dev_prueba %&gt;% mutate(correcto = hat_G == g) %&gt;% ungroup %&gt;% summarise(p_correctos = mean(correcto)) %&gt;% mutate(error_clasif = 1 - p_correctos) ## # A tibble: 1 x 2 ## p_correctos error_clasif ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.799 0.201 3.3.3 Discusión: relación entre devianza y error de clasificación Cuando utilizamos devianza, el mejor desempeño se alcanza cuando las probabilidades \\(\\hat{p}_g (x)\\) están bien calibradas, es decir, están cercanas a las probabilidades verdaderas \\(p_g (x)\\). Esto se puede ver demostrando que las probabilidades \\(\\hat{p}_g (x)\\) que minimizan la devianza \\[-2E(\\log (\\hat{p}_G (X))) = -2E_X \\left[ \\sum_{g=1}^K p_g(X)\\log\\hat{p}_g(X) \\right]\\] son precisamente \\(\\hat{p}_g (x)=p_g (x)\\). Por otro lado, si consideramos el error de clasificación \\(P(\\hat{G}\\neq G)\\), es posible demostrar que se minimiza cuando \\(\\hat{G} = G_{bayes}\\), donde \\[{G}_{bayes} (x) = \\arg\\max_g {p}_g(x).\\] En consecuencia, cuando las \\(\\hat{p}_g(x)\\) estimadas están cercanas a las verdaderas \\(p_g (x)\\) (que es lo que intentamos hacer cuando usamos devianza), el clasificador \\(\\hat{G}(x)\\) producido a partir de las \\(\\hat{p}_g(x)\\) deberá estar cercano a \\(G_{bayes}(x)\\), que es el clasificador que minimiza el error de clasificación. Este argumento explica que buscar modelos con devianza baja está alineado con buscar modelos con error de clasificación bajo. Cuando sea posible, es mejor trabajar con probabilidades de clase y devianza que solamente con clasificadores y error de clasificación. Hay varias razones para esto: Tenemos una medida de qué tan seguros estamos en la clasificación (por ejemplo, \\(p_1 = 0.55\\) en vez de \\(p_1 = 0.995\\)). La salida de probabilides es un insumo más útil para tareas posteriores (por ejemplo, si quisiéramos ofrecer las 3 clases más probables en clasificación de imágenes). Permite hacer selección de modelos de manera más atinada: por ejemplo, dada una misma tasa de correctos, preferimos aquellos modelos que lo hacen con probabilidades que discriminan más (más altas cuando está en lo correcto y más bajas cuando se equivoca). 3.4 Regresión logística En \\(k\\) vecinos más cercanos, intentamos estimar directamente con promedios las probabilidades de clase, sin considerar ninguna estructura. Regresión logística (y otros métodos, como redes neuronales), son ajustados intentando minimizar la devianza de entrenamiento. Esto es necesario si queremos aprovechar la estructura adicional que estos modelos aportan. En el caso de regresion logística, establecemos una estructura lineal de cierto tipo. Recordemos el caso de regresión lineal: intentamos minimizar el error de entrenamiento para estimar nuestro predictor, y así podíamos explotar apropiadamente la estructura lineal del problema. Regresión logística es un método lineal de clasificación, en el sentido de que produce fronteras lineales de decisión para el clasificador asociado. Ejemplo Mostramos aquí una frontera de decisión de regresión logística y una de k vecinos más cercanos: knitr::include_graphics(path = c(&quot;figuras/clas_lineal.png&quot;, &quot;figuras/clas_nolineal.png&quot;)) 3.4.1 Regresión logística simple Vamos a construir el modelo de regresión logística (binaria) para una sola entrada. Suponemos que tenemos una sola entrada \\(X_1\\), y que \\(G\\in\\{1,2\\}\\). Nos convendrá crear una nueva variable \\(Y\\) dada por \\(Y=1\\) si \\(G=2\\), \\(Y=0\\) si \\(G=1\\). Nótese que intentar estimar las probabilidades de clase \\(p_1(x)\\) de forma lineal con \\[p_1(x)=\\beta_0+\\beta_1 x_1\\] tiene el defecto de que el lado derecho puede producir valores fuera de \\([0,1]\\). La idea es entonces aplicar una función \\(h\\) simple que transforme la recta real al intervalo \\([0,1]:\\) \\[p_1(x) = h(\\beta_0+\\beta_1 x_1),\\] donde \\(h\\) es una función que toma valores en \\([0,1]\\). ¿Cúal es la función más simple que hace esto? 3.4.2 Función logística Comenzamos con el caso más simple, poniendo \\(\\beta_0=0\\) y \\(\\beta_1=1\\), de modo que \\[p_1(x)=h(x).\\] ¿Cómo debe ser \\(h\\) para garantizar que \\(h(x)\\) está entre 0 y 1 para toda \\(x\\)? No van a funcionar polinomios, por ejemplo, porque para un polinomio cuando \\(x\\) tiende a infinito, el polinomio tiende a \\(\\infty\\) o a \\(-\\infty\\). Hay varias posibilidades, pero una de las más simples es tomar (ver gráfica al margen): La función logística está dada por \\[h(x)=\\frac{e^x}{1+e^x}\\] h &lt;- function(x){exp(x)/(1+exp(x)) } ggplot(data_frame(x = seq(-6, 6, 0.01)), aes(x = x)) + stat_function(fun = h) Esta función comprime adecuadamente (para nuestros propósitos) el rango de todos los reales dentro del intervalo \\([0,1]\\). Si aplicamos al predictor lineal que consideramos, obtenemos: El modelo de regresión logística simple está dado por \\[p_1(x)=p_1(x;\\beta)= h(\\beta_0+\\beta_1x_1)= \\frac{e^{\\beta_0+\\beta_1x_1}}{1+ e^{\\beta_0+\\beta_1x_1}},\\] y \\[p_0(x)=p_0(x;\\beta)=1-p_1(x;\\beta),\\] donde \\(\\beta=(\\beta_0,\\beta_1)\\). Este es un modelo paramétrico con 2 parámetros. Ejercicio Demostrar que, si \\(p_1(x)\\) está dado como en la ecuación anterior, entonces también podemos escribir: \\[p_0(x)=\\frac{1}{1+e^{\\beta_0+\\beta_1x_1}}.\\] Graficar las funciones \\(p_1(x;\\beta)\\) para distintos valores de \\(\\beta_0\\) y \\(\\beta_1\\). Ejemplo En nuestro ejemplo, teníamos el siguiente ajuste con k-vecinos más cercanos: graf_data &lt;- data_frame(x = seq(0,100, 1)) vmc_graf &lt;- kknn(g ~ x, train = dat_ent, k = 60, test = graf_data, kernel = &#39;rectangular&#39;) graf_data$p_1 &lt;- vmc_graf$prob[ ,1] graf_verdadero &lt;- data_frame(x = 0:100, p_1 = p_1(x)) graf_1 + geom_line(data = graf_data, aes(y = p_1), colour = &#39;red&#39;, size=1.2) + geom_line(data = graf_verdadero, aes(y = p_1)) + ylab(&#39;Probabilidad al corriente&#39;) + xlab(&#39;% crédito usado&#39;) Ahora intentaremos ajustar a mano (intenta cambiar las betas para p_mod_1 y p_mod_2 en el ejemplo de abajo) algunos modelos logísticos para las probabilidades de clase: h &lt;- function(z) exp(z)/(1+exp(z)) p_logistico &lt;- function(beta_0, beta_1){ p &lt;- function(x){ z &lt;- beta_0 + beta_1*x h(z) } } p_mod_1 &lt;- p_logistico(-20, 1) p_mod_2 &lt;- p_logistico(3, -0.04) graf_data &lt;- graf_data %&gt;% mutate(p_mod_1 = p_mod_1(x), p_mod_2 = p_mod_2(x)) graf_1 + geom_line(data = graf_data, aes(y = p_mod_2), colour = &#39;red&#39;, size=1.2) + geom_line(data = graf_data, aes(y = p_mod_1), colour = &#39;orange&#39;, size=1.2) + geom_line(data = graf_verdadero, aes(y = p_1)) + ylab(&#39;Probabilidad al corriente&#39;) + xlab(&#39;% crédito usado&#39;) Podemos usar también la función glm de R para ajustar los coeficientes: mod_1 &lt;- glm(g==1 ~ x, data = dat_ent, family = &#39;binomial&#39;) coef(mod_1) ## (Intercept) x ## 3.11902058 -0.03732159 p_mod_final &lt;- p_logistico(coef(mod_1)[1], coef(mod_1)[2]) graf_data &lt;- graf_data %&gt;% mutate(p_mod_f = p_mod_final(x)) graf_1 + geom_line(data = graf_data, aes(y = p_mod_f), colour = &#39;red&#39;, size = 1.2) + geom_line(data = graf_data, aes(y = p_mod_1), colour = &#39;orange&#39;, size = 1.2) + geom_line(data = graf_verdadero, aes(y = p_1)) + ylab(&#39;Probabilidad al corriente&#39;) + xlab(&#39;% crédito usado&#39;) 3.4.3 Regresión logística Ahora escribimos el modelo cuando tenemos más de una entrada. La idea es la misma: primero combinamos las variables linealmente usando pesos \\(\\beta\\), y despúes comprimimos a \\([0,1]\\) usando la función logística: El modelo de regresión logística está dado por \\[p_1(x)=p_1(x;\\beta)= h(\\beta_0+\\beta_1x_1 + \\beta_2x_2 +\\cdots + \\beta_p x_p),\\] y \\[p_0(x)=p_0(x;\\beta)=1-p_1(x;\\beta),\\] donde \\(\\beta=(\\beta_0,\\beta_1, \\ldots, \\beta_p)\\). 3.5 Aprendizaje de coeficientes para regresión logística (binomial). Ahora veremos cómo aprender los coeficientes con una muestra de entrenamiento. La idea general es : Usamos la devianza de entrenamiento como medida de ajuste Usamos descenso en gradiente para minimizar esta devianza y aprender los coeficientes. Sea entonces \\({\\mathcal L}\\) una muestra de entrenamiento: \\[{\\mathcal L}=\\{ (x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}), \\ldots, (x^{(N)}, y^{(N)}) \\}\\] Donde \\(y=1\\) o \\(y=0\\) son las dos clases. Escribimos también \\[p_1(x)=p_1(x;\\beta)= h(\\beta_0+\\beta_1x_1 + \\beta_2x_2 +\\cdots + \\beta_p x_p),\\] y definimos la devianza sobre el conjunto de entrenamiento \\[D(\\beta) = -2\\sum_{i=1}^N \\log(p_{y^{(i)}} (x^{(i)})).\\] Los coeficientes estimados por regresión logística están dados por \\[\\hat{\\beta} = \\arg\\min_\\beta D(\\beta)\\] Para minimizar utilizaremos descenso en gradiente (aunque hay más opciones). La última expresión para \\(D(\\beta)\\) puede ser difícil de operar, pero podemos reescribir como: \\[D(\\beta) = -2\\sum_{i=1}^N y^{(i)} \\log(p_{1} (x^{(i)})) + (1-y^{(i)}) \\log(p_{0} (x^{(i)})).\\] Para hacer descenso en gradiente, necesitamos encontrar \\(\\frac{\\partial D}{\\beta_j}\\) para \\(j=1,2,\\ldots,p\\). Igual que en regresión lineal, comenzamos por calcular la derivada de un término: \\[D^{(i)} (\\beta) = y^{(i)} \\log(p_{1} (x^{(i)})) + (1-y^{(i)}) \\log(1-p_{1} (x^{(i)}))\\] Calculamos primero las derivadas de \\(p_1 (x^{(i)};\\beta)\\) (demostrar la siguiente ecuación): \\[\\frac{\\partial p_1}{\\partial \\beta_0} = {p_1(x^{(i)})(1-p_1(x^{(i)}))},\\] y \\[\\frac{\\partial p_1}{\\partial \\beta_j} = p_1(x^{(i)})(1-p_1(x^{(i)}))x_j^{(i)},\\] Así que \\[\\begin{align*} \\frac{\\partial D^{(i)}}{\\partial \\beta_j} &amp;= \\frac{y^{(i)}}{(p_1(x^{(i)}))}\\frac{\\partial p_1}{\\partial \\beta_j} - \\frac{1- y^{(i)}}{(1-p_1(x^{(i)}))}\\frac{\\partial p_1}{\\partial \\beta_j} \\\\ &amp;= \\left( \\frac{y^{(i)} - p_1(x^{(i)})}{(p_1(x^{(i)}))(1-p_1(x^{(i)}))} \\right )\\frac{\\partial p_1}{\\partial \\beta_j} \\\\ &amp; = \\left ( y^{(i)} - p_1(x^{(i)}) \\right ) x_j^{(i)} \\\\ \\end{align*}\\] para \\(j=0,1,\\ldots,p\\), usando la convención de \\(x_0^{(i)}=1\\). Podemos sumar ahora sobre la muestra de entrenamiento para obtener \\[ \\frac{\\partial D}{\\partial\\beta_j} = - 2\\sum_{i=1}^N (y^{(i)}-p(x^{(i)}))x_j^{(i)}\\] De modo que, Para un paso \\(\\eta&gt;0\\) fijo, la iteración de descenso para regresión logística para el coeficiente \\(\\beta_j\\) es: \\[\\beta_{j}^{(k+1)} = \\beta_j^{(k)} + {2\\eta} \\sum_{i=1}^N (y^{(i)}-p(x^{(i)}))x_j^{(i)}\\] para \\(j=0,1,\\ldots, p\\), donde fijamos \\(x_0^{(i)}=1\\). Podríamos usar las siguientes implementaciones, que representan cambios menores de lo que hicimos en regresión lineal. En primer lugar, escribimos la función que calcula la devianza. Podríamos poner: devianza_calc_simple &lt;- function(x, y){ dev_fun &lt;- function(beta){ p_beta &lt;- h(as.matrix(cbind(1, x)) %*% beta) -2*sum(y*log(p_beta) + (1-y)*log(1-p_beta)) } dev_fun } *Observación Sin embargo, podemos hacer una simplificación para tener mejor desempeño y estabilidad. Observamos que \\[\\log (p_1(x;\\beta)) = \\log\\frac{ e^{x^t \\beta}}{1+ e^{x^t\\beta}} = x^t\\beta - \\log Z\\] donde \\(Z = 1+ e^{x^t\\beta}\\). Por otra parte \\[\\log(p_0(x;\\beta)) = \\log\\frac{ 1}{1+ e^{x^t\\beta}} = - \\log Z\\] De modo que \\[y\\log(p_1(x;\\beta)) + (1- y)\\log(p_0(x;\\beta)) = yx^t\\beta - \\log Z= yx^t\\beta - \\log (1+e^{x^t\\beta})\\] Así que podemos escribir: devianza_calc &lt;- function(x, y){ dev_fun &lt;- function(beta){ x_beta &lt;- as.matrix(cbind(1, x)) %*% beta -2*sum(y*x_beta - log(1 + exp(x_beta))) } dev_fun } grad_calc &lt;- function(x_ent, y_ent){ salida_grad &lt;- function(beta){ p_beta &lt;- h(as.matrix(cbind(1, x_ent)) %*% beta) e &lt;- y_ent - p_beta grad_out &lt;- -2*as.numeric(t(cbind(1,x_ent)) %*% e) names(grad_out) &lt;- c(&#39;Intercept&#39;, colnames(x_ent)) grad_out } salida_grad } descenso &lt;- function(n, z_0, eta, h_deriv){ z &lt;- matrix(0,n, length(z_0)) z[1, ] &lt;- z_0 for(i in 1:(n-1)){ z[i+1, ] &lt;- z[i, ] - eta * h_deriv(z[i, ]) } z } Ejemplo Probemos nuestros cálculos con el ejemplo de 1 entrada de tarjetas de crédito. dat_ent$y &lt;- as.numeric(dat_ent$g==1) dat_ent &lt;- dat_ent %&gt;% ungroup %&gt;% mutate(x_s = (x - mean(x))/sd(x)) devianza &lt;- devianza_calc_simple(dat_ent[, &#39;x_s&#39;, drop = FALSE], dat_ent$y) grad &lt;- grad_calc(dat_ent[, &#39;x_s&#39;, drop = FALSE], dat_ent$y) grad(c(0,1)) ## Intercept x_s ## -319.0719 384.3834 grad(c(0.5,-0.1)) ## Intercept x_s ## -185.8135 151.6872 Verificamos cálculo de gradiente: (devianza(c(0.5+0.0001,-0.1)) - devianza(c(0.5,-0.1)))/0.0001 ## [1] -185.8018 (devianza(c(0.5,-0.1+0.0001)) - devianza(c(0.5,-0.1)))/0.0001 ## [1] 151.6991 Y hacemos descenso: iteraciones &lt;- descenso(200, z_0 = c(0,0), eta = 0.001, h_deriv = grad) tail(iteraciones, 20) ## [,1] [,2] ## [181,] 1.772441 -1.100098 ## [182,] 1.772441 -1.100098 ## [183,] 1.772441 -1.100098 ## [184,] 1.772441 -1.100098 ## [185,] 1.772442 -1.100098 ## [186,] 1.772442 -1.100098 ## [187,] 1.772442 -1.100098 ## [188,] 1.772442 -1.100098 ## [189,] 1.772442 -1.100098 ## [190,] 1.772442 -1.100098 ## [191,] 1.772442 -1.100099 ## [192,] 1.772442 -1.100099 ## [193,] 1.772442 -1.100099 ## [194,] 1.772442 -1.100099 ## [195,] 1.772442 -1.100099 ## [196,] 1.772442 -1.100099 ## [197,] 1.772442 -1.100099 ## [198,] 1.772442 -1.100099 ## [199,] 1.772442 -1.100099 ## [200,] 1.772442 -1.100099 #Checamos devianza plot(apply(iteraciones, 1, devianza)) # Y gradiente de devianza en la iteración final: grad(iteraciones[nrow(iteraciones), ]) ## Intercept x_s ## -1.295382e-05 9.393880e-06 Comparamos con glm: mod_1 &lt;- glm(y~x_s, data=dat_ent, family = &#39;binomial&#39;) coef(mod_1) ## (Intercept) x_s ## 1.772442 -1.100099 mod_1$deviance ## [1] 395.6225 devianza(iteraciones[200,]) ## [1] 395.6225 Nótese que esta devianza está calculada sin dividirentre el número de casos. Podemos calcular la devianza promedio de entrenamiento haciendo: devianza(iteraciones[200,])/nrow(dat_ent) ## [1] 0.7912451 Máxima verosimilitud Es fácil ver que este método de estimación de los coeficientes (minimizando la devianza de entrenamiento) es el método de máxima verosimilitud. La verosimilitud de la muestra de entrenamiento está dada por: \\[L(\\beta) =\\prod_{i=1}^N p_{y^{(i)}} (x^{(i)})\\] Y la log verosimilitud es \\[l(\\beta) =\\sum_{i=1}^N \\log(p_{y^{(i)}} (x^{(i)})).\\] Así que ajustar el modelo minimizando la expresión (3.1) es los mismo que hacer máxima verosimilitud (condicional a los valores de \\(x\\)). Normalización Igual que en regresión lineal, en regresión logística conviene normalizar las entradas antes de ajustar el modelo Desempeño de regresión logística como método de aprendizaje Igual que en regresión lineal, regresión logística supera a métodos más sofisticados o nuevos en numerosos ejemplos. Las razones son similares: la rigidez de regresión logística es una fortaleza cuando la estructura lineal es una buena aproximación. 3.5.0.1 Solución analítica El problema de regresión logística no tiene solución analítica. Paquetes como glm utilizan métodos numéricos (Newton-Raphson para regresión logística, por ejemplo). 3.5.0.2 Interpretación de modelos logísticos Todas las precauciones que mencionamos en modelos lineales aplican para los modelos logísticos (aspectos estadísticos del ajuste, relación con fenómeno de interés, argumentos de causalidad). Igual que en regresión lineal, podemos explicar el comportamiento de las probabilidades de clase ajustadas, pero es un poco más difícil por la no linealidad introducida por la función logística. Ejemplo Consideremos el modelo ajustado: head(dat_ent) ## # A tibble: 6 x 4 ## x g y x_s ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.709 1 1 -1.20 ## 2 33.9 1 1 -0.0755 ## 3 50.0 1 1 0.471 ## 4 27.8 1 1 -0.280 ## 5 94.5 1 1 1.98 ## 6 19.8 1 1 -0.553 coeficientes &lt;- iteraciones[200,] names(coeficientes) &lt;- c(&quot;Intercept&quot;, &quot;x_s&quot;) coeficientes ## Intercept x_s ## 1.772442 -1.100099 Como centramos todas las entradas, la ordenada al origen (Intercept) se interpreta como la probabilidad de clase cuando todas las variables están en su media: options(digits = 2) coeficientes[1] ## Intercept ## 1.8 h(coeficientes[1]) ## Intercept ## 0.85 Esto quiere decir que la probabilidad de estar al corriente es de 87% cuando la variable \\(x\\) está en su media. Si \\(x\\) se incrementa en una desviación estándar, la cantidad \\[z = \\beta_0 + \\beta_1x\\] la probabilidad de estar al corriente cambia a 67%: h(coeficientes[1]+ coeficientes[2]*1) ## Intercept ## 0.66 Nótese que una desviación estándar de \\(x\\) equivale a sd(dat_ent$x) ## [1] 29 Así que en las unidades originales, un incremento de 30 en la variable \\(x\\) implica un cambio de h(coeficientes[1] + coeficientes[2]) - h(coeficientes[1]) ## Intercept ## -0.19 es decir, la probabilidad de manenterse al corriente baja 19 puntos porcentuales, de 85% a 67% Ojo: En regresión lineal, las variables contribuyen independientemente de otras al predictor. Eso no pasa en regresión logística debido a la no linealidad introducida por la función logística \\(h\\). Por ejemplo, imaginemos el modelo: \\[p(z) = h(0.5 + 0.2 x_1 -0.5 x_2 + 0.7x_3),\\] y suponemos las entradas normalizadas. Si todas las variables están en su media, la probabilidad de clase 1 es h(0.5) ## [1] 0.62 Si todas las variables están en su media, y cambiamos en 1 desviación estándar la variable \\(x_1\\), la probabilidad de clase 1 es: h(0.5+0.2) ## [1] 0.67 Y el cambio en puntos de probabilidad es: h(0.5+0.2) - h(0.5) ## [1] 0.046 Pero si la variable \\(x_2 = -1\\), por ejemplo, el cambio en probabilidad es de h(0.5+ 0.2 + 0.5*1) - h(0.5 + 0.5*1) ## [1] 0.037 3.6 Ejercicio: datos de diabetes Ya están divididos los datos en entrenamiento y prueba diabetes_ent &lt;- as_data_frame(MASS::Pima.tr) diabetes_pr &lt;- as_data_frame(MASS::Pima.te) diabetes_ent ## # A tibble: 200 x 8 ## npreg glu bp skin bmi ped age type ## * &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; ## 1 5 86 68 28 30.2 0.364 24 No ## 2 7 195 70 33 25.1 0.163 55 Yes ## 3 5 77 82 41 35.8 0.156 35 No ## 4 0 165 76 43 47.9 0.259 26 No ## 5 0 107 60 25 26.4 0.133 23 No ## 6 5 97 76 27 35.6 0.378 52 Yes ## 7 3 83 58 31 34.3 0.336 25 No ## 8 1 193 50 16 25.9 0.655 24 No ## 9 3 142 80 15 32.4 0.2 63 No ## 10 2 128 78 37 43.3 1.22 31 Yes ## # ... with 190 more rows diabetes_ent$id &lt;- 1:nrow(diabetes_ent) diabetes_pr$id &lt;- 1:nrow(diabetes_pr) Normalizamos library(dplyr) library(tidyr) datos_norm &lt;- diabetes_ent %&gt;% gather(variable, valor, npreg:age) %&gt;% group_by(variable) %&gt;% summarise(media = mean(valor), de = sd(valor)) normalizar &lt;- function(datos, datos_norm){ datos %&gt;% gather(variable, valor, npreg:age) %&gt;% left_join(datos_norm) %&gt;% mutate(valor_s = (valor - media)/de) %&gt;% select(id, type, variable, valor_s) %&gt;% spread(variable, valor_s) } diabetes_ent_s &lt;- normalizar(diabetes_ent, datos_norm) diabetes_pr_s &lt;- normalizar(diabetes_pr, datos_norm) x_ent &lt;- diabetes_ent_s %&gt;% select(age:skin) %&gt;% as.matrix p &lt;- ncol(x_ent) y_ent &lt;- diabetes_ent_s$type == &#39;Yes&#39; grad &lt;- grad_calc(x_ent, y_ent) iteraciones &lt;- descenso(1000, rep(0,p+1), 0.001, h_deriv = grad) matplot(iteraciones) diabetes_coef &lt;- data_frame(variable = c(&#39;Intercept&#39;,colnames(x_ent)), coef = iteraciones[1000,]) diabetes_coef ## # A tibble: 8 x 2 ## variable coef ## &lt;chr&gt; &lt;dbl&gt; ## 1 Intercept -0.956 ## 2 age 0.452 ## 3 bmi 0.513 ## 4 bp -0.0547 ## 5 glu 1.02 ## 6 npreg 0.347 ## 7 ped 0.559 ## 8 skin -0.0225 Ahora calculamos devianza de prueba y error de clasificación: x_prueba &lt;- diabetes_pr_s %&gt;% select(age:skin) %&gt;% as.matrix y_prueba &lt;- diabetes_pr_s$type == &#39;Yes&#39; dev_prueba &lt;- devianza_calc(x_prueba, y_prueba) dev_prueba(iteraciones[1000,])/nrow(x_prueba) ## [1] 0.88 Y para el error clasificación de prueba, necesitamos las probabilidades de clase ajustadas: beta &lt;- iteraciones[1000, ] p_beta &lt;- h(as.matrix(cbind(1, x_prueba)) %*% beta) y_pred &lt;- as.numeric(p_beta &gt; 0.5) mean(y_prueba != y_pred) ## [1] 0.2 Tarea La tarea está en tareas/tarea_3_actualizada.Rmd. (Nota: la versión anterior la dejaremos para más tarde. Si ya resolvieron la versión anterior no hay problema. Si tienen dudas pueden escribirme a felipexgonzalez at gmail dot com). "],
["mas-sobre-problemas-de-clasificacion.html", "Clase 4 Más sobre problemas de clasificación 4.1 Análisis de error para clasificadores binarios 4.2 Perfil de un clasificador binario y curvas ROC 4.3 Regresión logística para problemas de más de 2 clases 4.4 Descenso en gradiente para regresión multinomial logística", " Clase 4 Más sobre problemas de clasificación En esta parte presentamos técnicas adicionales para evaluar el desempeño de un modelo. En la parte anterior vimos que La devianza es una buena medida para ajustar y evaluar el desempeño de un modelo y comparar modelos, y utiliza las probabilidades de clase. Sin embargo, es una medida de dificil de interpretar en cuanto a los errores que podemos esperar del modelo. Por otro lado, la tasa de clasificación incorrecta puede usarse para evaluar el desempeño de un clasificador (incluyendo uno derivado de probabilidades de clase), puede interpretarse con facilidad, pero se queda corta en muchas aplicaciones. Una deficiencia grande de esta medida es que, contrario al problema de regresión, hay errores de clasificación que son cualitativamente diferentes. Ejemplo Por ejemplo, diagnosticar a alguien con una enfermedad cuando no la tiene tiene consecuencias distintas a diagnosticar como libre de enfermedad a alguien que la tiene. Estas consecuencias dependen de cómo son son los tratamientos consecuentes, y de qué tan peligrosa es la enfermedad. Cuando usamos un buscador como Google, es cualitativamente diferente que el buscador omita resultados relevantes a que nos presente resultados irrelevantes. ¿Otros ejemplos? En general, los costos de los distintos errores son distintos, y en muchos problemas quiséramos entenderlos y controlarlos individualmente. Aunque en teoría podríamos asignar costos a los errores y definir una función de pérdida apropiada, en la práctica esto muchas veces no es tan fácil o deseable. Podemos, sin embargo, reportar el tipo de errores que ocurren Matriz de confusión. Sea \\(\\hat{G}\\) un clasificador. La matriz de confusión \\(C\\) de \\(\\hat{G}\\) está dada por \\(C_{i,j} =\\) número de casos de la clase verdadera \\(j\\) que son clasificados como clase \\(i\\) por el clasificador Ejemplo En un ejemplo de tres clases, podríamos obtener la matriz de confusión: A B C A.pred 50 2 0 B.pred 20 105 10 C.pred 20 10 30 Esto quiere decir que de 90 casos de clase \\(A\\), sólo clasificamos a 50 en la clase correcta, de 117 casos de clase \\(B\\), acertamos en 105, etcétera. Podemos ver esta tabla de distintas formas, por ejemplo, usando porcentajes por columna, nos dice cómo se distribuyen los casos de cada clase: knitr::kable(round(prop.table(tabla_1, 2),2)) A B C A.pred 0.56 0.02 0.00 B.pred 0.22 0.90 0.25 C.pred 0.22 0.09 0.75 Mientras que una tabla de porcentajes por renglón nos muestra qué pasa cada vez que hacemos una predicción dada: knitr::kable(round(prop.table(tabla_1, 1),2)) A B C A.pred 0.96 0.04 0.00 B.pred 0.15 0.78 0.07 C.pred 0.33 0.17 0.50 Ahora pensemos cómo podría sernos de utilidad esta tabla. Discute El clasificador fuera uno de severidad de emergencias en un hospital, donde A=requiere atención inmediata B=urgente C=puede posponerse. El clasificador fuera de tipos de cliente de un negocio. Por ejemplo, A = cliente de gasto alto, B=cliente medio, C=abandonador. Imagínate que tiene un costo intentar conservar a un abandonador, y hay una inversión alta para tratar a los clientes A. La tasa de incorrectos es la misma en los dos ejemplos, pero la adecuación del clasificador es muy diferente. 4.1 Análisis de error para clasificadores binarios Cuando la variable a predecir es binaria (dos clases), podemos etiquetar una clase como positiva y otra como negativa. En el fondo no importa cómo catalogemos cada clase, pero para problemas particulares una asignación puede ser más natural. Por ejemplo, en diagnóstico de enfermedades, positivo=tiene la enfermedad, en análisis de crédito, positivo=cae en impago, en sistemas de recomendacion, positivo = le gusta el producto X, en recuperación de textos, positivo=el documento es relevante a la búsqueda, etc. Hay dos tipos de errores en un clasificador binario (positivo - negativo): Falsos positivos (fp): clasificar como positivo a un caso negativo. Falsos negativos (fn): clasificar como negativo a un caso positivo. A los casos clasificados correctamente les llamamos positivos verdaderos (pv) y negativos verdaderos (nv). La matriz de confusion es entonces tabla &lt;- data_frame(&#39; &#39; = c(&#39;positivo.pred&#39;,&#39;negativo.pred&#39;,&#39;total&#39;), &#39;positivo&#39;=c(&#39;vp&#39;,&#39;fn&#39;,&#39;pos&#39;), &#39;negativo&#39;=c(&#39;fp&#39;,&#39;nv&#39;,&#39;neg&#39;), &#39;total&#39; = c(&#39;pred.pos&#39;,&#39;pred.neg&#39;,&#39;&#39;)) knitr::kable(tabla) pos itivo neg ativo tot al positivo.pred vp fp pred.pos negativo.pred fn nv pred.neg total pos neg Nótese que un clasificador bueno, en general, es uno que tiene la mayor parte de los casos en la diagonal de la matriz de confusión. Podemos estudiar a nuestro clasificador en términos de las proporciones de casos que caen en cada celda, que dependen del desempeño del clasificador en cuanto a casos positivos y negativos. La nomenclatura puede ser confusa, pues en distintas áreas se usan distintos nombres para estas proporciones: Tasa de falsos positivos \\[\\frac{fp}{fp+nv}=\\frac{fp}{neg}\\] Tasa de falsos negativos \\[\\frac{fn}{pv+fn}=\\frac{fn}{pos}\\] Especificidad \\[\\frac{vn}{fp+vn}=\\frac{vn}{neg}\\] Sensibilidad o Recall \\[\\frac{vp}{vp+fn}=\\frac{vp}{pos}\\] Y también otras que tienen como base las predicciones: Valor predictivo positivo o Precisión \\[\\frac{vp}{vp+fp}=\\frac{vp}{pred.pos}\\] Valor predictivo negativo \\[\\frac{vn}{fn+vn}=\\frac{vn}{pred.neg}\\] Dependiendo de el tema y el objetivo hay medidas más naturales que otras: En estadística muchas veces se usa sensibilidad (recall) y especificidad (proporción de positivos que detectamos y proporción de negativos que descartamos). Por ejemplo, si se tratara de una prueba para detectar riesgo de una enfermedad, sensibilidad nos dice qué porcentaje de los casos riesgosos estamos capturando (sensibilidad), y especificidad nos dice qué tan bien excluimos a los casos no riesgosos (especificidad). Estas dos medidas muestran directamente como el clasificador discrimina entre positivos y entre negativos. En búsqueda y recuperación de documentos o imagenes, o detección de fraude ( donde positivo = el documento es relevante / la transacción es fraudulenta y negativo = el documento no es relevante / transacción normal), se usa más comunmente precisión y recall. Esto es porque nos interesa saber de todos los resultados con predicción positiva (documentos o imagenes recuperadas), qué porcentaje son relevantes (precisión), y también, de todos los documentos relevantes (positivos), cuáles son recuperados (recall). Pero tiende a considerarse que especificidad o tasas de falsos positivos es menos útil, pues estas son cantidades dependen de una gran cantidad de documentos o transacciones irrelevantes, y tienden a ser cercanas a 1 para cualquier clasificador razonable (¿por qué?). Cada clasificador tiene un balance distinto especificidad-sensibliidad. Muchas veces no escogemos clasificadores por la tasa de incorrectos solamente, sino que intentamos buscar un balance adecuado entre el comportamiento de clasificación para positivos y para negativos. Medidas resumen de desempeño La primera medida resumen que vimos es el error de clasificación, que no toma en cuenta el tipo de errores: Tasa de clasificación incorrecta \\[\\frac{fn+fv}{neg+pos}\\] Y existen otras medidas que intentan resumir los dos tipos de errores de distinta manera, como Medida F (media armónica de precisión y recall) \\[2\\frac{precision \\cdot recall}{precision + recall}\\] Se usa la la media armónica que penaliza más fuertemente desempeño malo en alguna de nuestras dos medidas (precisión y recall) que el promedio armónico. Ejemplo Si precision = 0.01 (muy malo) y recall = 1 (excelente), o recall=0.01 y precisión = 1 (excelente), la media usual considera igual de buenos estos dos clasificadores. A su vez, estos dos se califican similar a un clasificador con precision = 0.5 y recall = 0.5. Sin embargo, la media armónica (F) da un score mucho más bajo a los primeros dos clasificadores: media_armonica &lt;- function(x){ 1/mean(1/x) } media_armonica(c(0.01, 1)) ## [1] 0.01980198 media_armonica(c(0.5, 0.5)) ## [1] 0.5 AUC (area bajo la curva ROC) que veremos más adelante. Interpetación de resúmenes de desempeño y tasas base Cuando consideramos las tasas de desempeño de un clasificador debemos comparar con lo que sucedería si no usáramos el clasificador (si no usáramos datos). Una manera de hacer esto consiste en utilizar el clasificador base: Clasificar todo como negativo (o positivo) Ejemplo Consideramos un problema donde tenemos 20% de positivos y 80% de negativos en una población. ¿Cuál es el desempeño de estos clasificadores base? Podemos usar la ecuación \\[P(acertar) = P(acertar|pos)P(pos) + P(acertar|neg)P(neg)\\] que en este caso es: \\[P(acertar) = 0.2P(acertar|pos) + 0.8 P(acertar|neg)\\] Si clasificamos siempre a positivo, la tasa de correctos será de 20%, pues \\(P(acertar|pos) = 1\\) y \\(P(acertar|neg)= 0\\) Si clasificamos siempre a negativo, la tasa de correctos será de 80%, pues \\(P(acertar|pos) = 0\\) y \\(P(acertar|neg)= 1\\) En este ejemplo, si tuviéramos un clasificador con una tasa de correctos de \\(75\\%\\), querría decir que no logramos mucho en el sentido de la certeza de nuestra predicción. Comparamos la tasa de correctos de clasificadores contra la tasa base \\(\\max\\{p_{pos}, 1- p_{pos}\\}\\), donde \\(p_{pos}\\) es la tasa de positivos en nuestros datos. Típicamente esperamos superar esta tasa de correctos base. Nota: cuando los costos de los distintos errores son muy diferentes, existen otras medidas más apropiadas Ejercicio Calcular la matriz de confusión (sobre la muestra de prueba) para el clasificador logístico de diabetes en términos de glucosa. Calcula adicionalmente con la muestra de prueba sus valores de especificidad y sensibilidad, y precisión y recall. diabetes_ent &lt;- as_data_frame(MASS::Pima.tr) diabetes_pr &lt;- as_data_frame(MASS::Pima.te) mod_1 &lt;- glm(type ~ glu, data = diabetes_ent, family = &#39;binomial&#39;) preds_prueba &lt;- predict(mod_1, newdata = diabetes_pr, type =&#39;response&#39;) # rellena esta linea en términos de preds_prueba # clase_pred &lt;- # table(clase_pred) # ahora calcula la matriz de confusión # table() # Usando esta tabla encuentra # tasa de incorrectos especificidad y sensibilidad, precisión y recall. 4.1.1 Puntos de corte para un clasificador binario ¿Qué sucede cuando el perfil de sensibilidad y especificidad de un clasificador binario no es apropiado para nuestros fines? Recordemos que una vez que hemos estimado con \\(\\hat{p}_1(x)\\), nuestra regla de clasificación es: Predecir positivo si \\(\\hat{p}_1(x) &gt; 0.5\\), Predecir negativo si \\(\\hat{p}_1(x) \\leq 0.5.\\) Esto sugiere una regla alternativa: Para \\(0 &lt; d &lt; 1\\), podemos utilizar nuestras estimaciones \\(\\hat{p}_1(x)\\) para construir un clasificador alternativo poniendo: Predecir positivo si \\(\\hat{p}_1(x) &gt; d\\), Predecir negativo si \\(\\hat{p}_1(x) \\leq d\\). Distintos valores de \\(d\\) dan distintos perfiles de sensibilidad-especificidad para una misma estimación de las probabilidades condicionales de clase: Para minimizar la tasa de incorrectos conviene poner \\(d = 0.5\\). Sin embargo, es común que este no es el único fin de un clasificador bueno (pensar en ejemplo de fraude). Cuando incrementamos d, quiere decir que exigimos estar más seguros de que un caso es positivo para clasificarlo como positivo. Eso quiere decir que la especifidad va a ser más grande (entre los negativos verdaderos va a haber menos falsos positivos). Sin embargo, la sensibilidad va a ser más chica pues captamos menos de los verdaderos positivos. Ejemplo Por ejemplo, si en el caso de diabetes incrementamos el punto de corte a 0.7: table(preds_prueba &gt; 0.7, diabetes_pr$type) ## ## No Yes ## FALSE 220 77 ## TRUE 3 32 tab &lt;- prop.table(table(preds_prueba &gt; 0.7, diabetes_pr$type), 2) tab ## ## No Yes ## FALSE 0.98654709 0.70642202 ## TRUE 0.01345291 0.29357798 La especificidad ahora 0.99 , muy alta (descartamos muy bien casos negativos), pero la sensibilidad se deteriora a 0.29 Cuando hacemos más chico d, entonces exigimos estar más seguros de que un caso es negativo para clasificarlo como negativo. Esto aumenta la sensibilidad, pero la especificidad baja. Por ejemplo, si en el caso de diabetes ponemos el punto de corte en 0.3: table(preds_prueba &gt; 0.3, diabetes_pr$type) ## ## No Yes ## FALSE 170 37 ## TRUE 53 72 tab &lt;- prop.table(table(preds_prueba &gt; 0.3, diabetes_pr$type),2) tab ## ## No Yes ## FALSE 0.7623318 0.3394495 ## TRUE 0.2376682 0.6605505 Ejemplo Podemos tener una intuición de cómo cambian las tasas de error dependiendo de donde cortamos mostrando la tabla ordenada por probabilidades estimadas (incluimos también las covariables para entender qué variables están más correlacionadas con las probabilidades): library(tabplot) mod_1 &lt;- glm(type ~ glu, diabetes_ent, family = &#39;binomial&#39;) diabetes_pr$probs_prueba_1 &lt;- predict(mod_1, newdata = diabetes_pr, type = &quot;response&quot;) head(arrange(diabetes_pr, desc(probs_prueba_1))) ## # A tibble: 6 x 9 ## npreg glu bp skin bmi ped age type probs_prueba_1 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 2 197 70 45 30.5 0.158 53 Yes 0.874 ## 2 4 197 70 39 36.7 2.33 31 No 0.874 ## 3 8 196 76 29 37.5 0.605 57 Yes 0.870 ## 4 1 196 76 36 36.5 0.875 29 Yes 0.870 ## 5 3 193 70 31 34.9 0.241 25 Yes 0.857 ## 6 5 189 64 33 31.2 0.583 29 Yes 0.837 tableplot(diabetes_pr, sortCol = probs_prueba_1) La columna de probabilidad de la derecha nos dice en qué valores podemos cortar para obtener distintos clasificadores. Nótese que si cortamos más arriba, se nos escapan más positivos verdaderos que clasificamos como negativos, pero clasificamos a más negativos verdaderos como negativos. Lo opuesto ocurre cuando cortamos más abajo. 4.1.2 Espacio ROC de clasificadores Podemos visualizar el desempeño de cada uno de estos clasificadores construidos con puntos de corte mapeándolos a las coordenadas de tasa de falsos positivos (1-especificidad) y sensibilidad: clasif_1 &lt;- data.frame( corte = c(&#39;0.3&#39;,&#39;0.5&#39;,&#39;0.7&#39;,&#39;perfecto&#39;,&#39;azar&#39;), tasa_falsos_pos=c(0.24,0.08,0.02,0,0.7), sensibilidad =c(0.66, 0.46,0.19,1,0.7)) ggplot(clasif_1, aes(x=tasa_falsos_pos, y=sensibilidad, label=corte)) + geom_point() + geom_abline(intercept=0, slope=1) + xlim(c(0,1)) +ylim(c(0,1)) + geom_text(hjust=-0.3, col=&#39;red&#39;)+ xlab(&#39;1-especificidad (tasa falsos pos)&#39;) Nótese que agregamos otros dos clasificadores, uno perfecto, que tiene tasa de falsos positivos igual a 0 y sensibilidad igual a 1. En esta gráfica, un clasificador \\(G_2\\) que está arriba a la izquierda de \\(G_1\\) domina a \\(G_1\\), pues tiene mejor especificidad y mejor sensibilidad. Entre los clasificadores 0.3, 0.5 y 0.7 de la gráfica, no hay ninguno que domine a otro. Todos los clasificadores en la diagonal son equivalentes a un clasificador al azar. ¿Por qué? La razón es que si cada vez que vemos un nuevo caso lo clasificamos como positivo con probabilidad \\(p\\) fija y arbitraria. Esto implica que cuando veamos un caso positivo, la probabilidad de ’atinarle’ es de p (sensibilidad), y cuando vemos un negativo, la probabilidad de equivocarnos también es de 1-p (tasa de falsos positivos), por lo que la espcificidad es p también. De modo que este clasificador al azar está en la diagonal. ¿Qué podemos decir acerca de clasificadores que caen por debajo de la diagonal? Estos son clasificadores particularmente malos, pues existen clasificadores con mejor especificidad y/o sensibilidad que son clasificadores al azar! Sin embargo, se puede construir un mejor clasificador volteando las predicciones, lo que cambia sensibilidad por tasa de falsos positivos. ¿Cuál de los tres clasificadores es el mejor? En términos de la tasa de incorrectos, el de corte 0.5. Sin embargo, para otros propósitos puede ser razonable escoger alguno de los otros. 4.2 Perfil de un clasificador binario y curvas ROC En lugar de examinar cada punto de corte por separado, podemos hacer el análisis de todos los posibles puntos de corte mediante la curva ROC (receiver operating characteristic, de ingeniería). Para un problema de clasificación binaria, dadas estimaciones \\(\\hat{p}(x)\\), la curva ROC grafica todos los pares de (1-especificidad, sensibilidad) para cada posible punto de corte \\(\\hat{p}(x) &gt; d\\). Vamos a graficar todos los pares (1-especificidad, sensibilidad) para cada punto de corte \\(d\\) de estas probabilidades. library(ROCR) pred_rocr &lt;- prediction(diabetes_pr$probs_prueba_1, diabetes_pr$type) perf &lt;- performance(pred_rocr, measure = &quot;sens&quot;, x.measure = &quot;fpr&quot;) graf_roc_1 &lt;- data_frame(tfp = perf@x.values[[1]], sens = perf@y.values[[1]], d = perf@alpha.values[[1]]) ggplot(graf_roc_1, aes(x = tfp, y = sens, colour=d)) + geom_point() + xlab(&#39;1-especificidad&#39;) + ylab(&#39;Sensibilidad&#39;) En esta gráfica podemos ver todos los clasificadores posibles basados en las probabilidades de clase. Podemos usar estas curvas como evaluación de nuestros clasificadores, dejando para más tarde la selección del punto de corte, si esto es necesario (por ejemplo, dependiendo de los costos de cada tipo de error). También podemos definir una medida resumen del desempeño de un clasificador según esta curva: La medida AUC (area under the curve) para un clasificador es el área bajo la curva generada por los pares sensibilidad-especificidad de la curva ROC. auc_1 &lt;- performance(pred_rocr, measure = &#39;auc&#39;)@y.values auc_1[[1]] ## [1] 0.7970543 También es útil para comparar modelos. Consideremos el modelo de los datos de diabetes que incluyen todas las variables: mod_2 &lt;- glm(type ~ ., diabetes_ent, family = &#39;binomial&#39;) diabetes_pr$probs_prueba_2 &lt;- predict(mod_2, newdata = diabetes_pr, type = &quot;response&quot;) head(arrange(diabetes_pr, desc(probs_prueba_2))) ## # A tibble: 6 x 10 ## npreg glu bp skin bmi ped age type probs_prueba_1 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 0 180 78 63 59.4 2.42 25 Yes 0.785 ## 2 4 197 70 39 36.7 2.33 31 No 0.874 ## 3 5 187 76 27 43.6 1.03 53 Yes 0.827 ## 4 3 173 82 48 38.4 2.14 25 Yes 0.737 ## 5 0 173 78 32 46.5 1.16 58 No 0.737 ## 6 17 163 72 41 40.9 0.817 47 Yes 0.658 ## # ... with 1 more variable: probs_prueba_2 &lt;dbl&gt; tableplot(diabetes_pr, sortCol = probs_prueba_2) Y graficamos juntas: library(ROCR) pred_rocr &lt;- prediction(diabetes_pr$probs_prueba_2, diabetes_pr$type) perf &lt;- performance(pred_rocr, measure = &quot;sens&quot;, x.measure = &quot;fpr&quot;) auc_2 &lt;- performance(pred_rocr, measure = &quot;auc&quot;)@y.values graf_roc_2 &lt;- data_frame(tfp = perf@x.values[[1]], sens = perf@y.values[[1]], d = perf@alpha.values[[1]]) graf_roc_2$modelo &lt;- &#39;Todas las variables&#39; graf_roc_1$modelo &lt;- &#39;Solo glucosa&#39; graf_roc &lt;- bind_rows(graf_roc_1, graf_roc_2) ggplot(graf_roc, aes(x = tfp, y = sens, colour = modelo)) + geom_point() + xlab(&#39;1-especificidad&#39;) + ylab(&#39;Sensibilidad&#39;) Comparación auc: auc_1 ## [[1]] ## [1] 0.7970543 auc_2 ## [[1]] ## [1] 0.8658823 En este ejemplo, vemos que casi no importa que perfil de especificidad y sensibilidad busquemos: el clasificador que usa todas las variables domina casi siempre al clasificador que sólo utiliza las variables de glucosa. La razón es que para cualquier punto de corte (con sensibilidad menor a 0.4) en el clasificador de una variable, existe otro clasificador en la curva roja (todas las variable), que domina al primero. La excepción es para clasificadores de valores de sensibilidad baja, con tasas de falsos positivos muy chicas: en este caso, el modelo de una variable puede ser ligeramente superior. 4.3 Regresión logística para problemas de más de 2 clases Consideramos ahora un problema con más de dos clases, de manera que \\(G ∈ {1,2,...,K}\\) (\\(K\\) clases), y tenemos \\(X = (X1 ...,Xp)\\) entradas. ¿Cómo generalizar el modelo de regresión logística para este problema? Una estrategia es la de uno contra todos: En clasificación uno contra todos, hacemos Para cada clase \\(g\\in\\{1,\\ldots,K\\}\\) entrenamos un modelo de regresión logística (binaria) \\(\\hat{p}^{(g)}(x)\\), tomando como positivos a los casos de 1 clase \\(g\\), y como negativos a todo el resto. Esto lo hacemos como en las secciones anteriores, y de manera independiente para cada clase. Para clasificar un nuevo caso \\(x\\), calculamos \\[\\hat{p}^{(1)}, \\hat{p}^{(2)},\\ldots, \\hat{p}^{(K)}\\] y clasificamos a la clase de máxima probabilidad \\[\\hat{G}(x) = \\arg\\max_g \\hat{p}^{(g)}(x)\\] Nótese que no hay ninguna garantía de que las probabilidades de clase sumen 1, pues se trata de estimaciones independientes de cada clase. En este sentido, produce estimaciones que en realidad no satisfacen las propiedades del modelo de probabilidad establecido - aunque pueden normalizarse. Sin embargo, esta estrategia es simple y en muchos casos funciona bien. 4.3.1 Regresión logística multinomial Si queremos obtener estimaciones de las probabilidades de clase que sumen uno, entonces tenemos que contruir las estimaciones de cada clase de clase de manera conjunta. Como vimos antes, tenemos que estimar, para cada \\(x\\) y \\(g\\in\\{1,\\ldots, K\\}\\), las probabilidades condicionales de clase: \\[p_g(x) = P(G = g|X = x).\\] Consideremos primero cómo funciona el modelo de regresión logística (2 clases) Tenemos que \\[p_1(x) = h(\\beta_0 + \\beta_1x_1 + \\ldots + \\beta_p x_p) = \\exp(\\beta_0 + \\beta_1x_1 + \\ldots + \\beta_p x_p)/Z \\] y \\[p_2 (x) = 1/Z\\] donde \\(Z = 1 + \\exp(\\beta_0 + \\beta_1x_1 + \\ldots + \\beta_p x_p)\\). Podemos generalizar para más de 2 clases usando una idea similar. Cada clase tiene su juego de coeficientes: \\[p_1(x) = \\exp(\\beta_{0,1} + \\beta_{1,1}x_1 + \\ldots + \\beta_{p,1} x_p)/Z\\] \\[p_2(x) = \\exp(\\beta_{0,2} + \\beta_{1,2}x_2 + \\ldots + \\beta_{p.2} x_p)/Z\\] hasta \\[p_{K-1}(x) = \\exp(\\beta_{0,{K-1}} + \\beta_{1,{K-1}}x_2 + \\ldots + \\beta_{p,{K-1}} x_p)/Z\\] y \\[p_K(x) = 1/Z\\] En este caso, para que las probabilidades sumen 1, necesitamos que \\[Z = 1 + \\sum_{j=1}^{K-1}\\exp(\\beta_0^j + \\beta_1^jx_1 + \\ldots + \\beta_p^j x_p)\\] Para ajustar coeficientes, usamos el mismo criterio de devianza de entrenamiento. Buscamos minimizar: \\[D(\\beta)=−2 \\sum_{i=1}^N \\log p_{g^{(i)}}(x^{(i)}),\\] Donde \\(\\beta\\) contiene todos los coeficientes organizados en un vector de tamaño \\((p+1)(K-1)\\): \\[\\beta = ( \\beta_0^1, \\beta_1^1, \\ldots , \\beta_p^1, \\beta_0^2, \\beta_1^2, \\ldots , \\beta_p^2, \\ldots \\beta_0^{K-1}, \\beta_1^{K-1}, \\ldots , \\beta_p^{K-1} )\\] Y ahora podemos usar algún método númerico para minimizar la devianza (por ejemplo, descenso en gradiente). Cuando es muy importante tener probabilidades bien calibradas, el enfoque multinomial es más apropiado, pero muchas veces, especialmente si sólo nos interesa clasificar, los dos métodos dan resultados similares. 4.3.2 Interpretación de coeficientes Los coeficientes mostrados en la parametrización de arriba se intrepretan más fácilmente como comparaciones de la clase \\(g\\) contra la clase \\(K\\), pues \\[\\log\\left (\\frac{p_g(x)}{p_K(x)}\\right ) = \\beta_{0,{g}} + \\beta_{1,{g}}x_1 + \\ldots + \\beta_{p,{g}} x_p\\] Para comparar la clase \\(j\\) con la clase \\(k\\) notamos que \\[\\log\\left (\\frac{p_j(x)}{p_k(x)}\\right ) = (\\beta_{0,{j}}- \\beta_{0,{k}}) + (\\beta_{1,{j}}-\\beta_{1,{k}} )x_1 + \\ldots + (\\beta_{p,{j}} -\\beta_{p,{k}}) x_p\\] Así que sólo hace falta restar los coeficientes. Nótese adicionalmente que en la parametrización, podemos pensar que \\[\\beta_{0,K} = \\beta_{1,K} = \\cdots = \\beta_{p,K} = 0\\] 4.3.3 Ejemplo: Clasificación de dígitos con regresión multinomial digitos_entrena &lt;- read_csv(&#39;datos/zip-train.csv&#39;) ## Parsed with column specification: ## cols( ## .default = col_double() ## ) ## See spec(...) for full column specifications. digitos_prueba &lt;- read_csv(&#39;datos/zip-test.csv&#39;) ## Parsed with column specification: ## cols( ## .default = col_double() ## ) ## See spec(...) for full column specifications. names(digitos_entrena)[1] &lt;- &#39;digito&#39; names(digitos_entrena)[2:257] &lt;- paste0(&#39;pixel_&#39;, 1:256) names(digitos_prueba)[1] &lt;- &#39;digito&#39; names(digitos_prueba)[2:257] &lt;- paste0(&#39;pixel_&#39;, 1:256) En este ejemplo, usamos la función multinom de nnet, que usa BFGS para hacer la optimización: library(nnet) mod_mult &lt;- multinom(digito ~ ., data = digitos_entrena, MaxNWt=100000, maxit = 20) ## # weights: 2580 (2313 variable) ## initial value 16788.147913 ## iter 10 value 2598.959017 ## iter 20 value 1494.978090 ## final value 1494.978090 ## stopped after 20 iterations Checamos para diagnóstico la matriz de confusión de entrenamiento. table(predict(mod_mult), digitos_entrena$digito) ## ## 0 1 2 3 4 5 6 7 8 9 ## 0 1153 0 5 2 3 9 1 1 7 0 ## 1 0 998 0 0 2 0 1 1 2 3 ## 2 2 0 693 1 7 2 8 3 10 2 ## 3 9 0 15 632 2 21 0 2 24 2 ## 4 3 2 9 2 621 4 4 9 10 44 ## 5 24 4 5 19 9 511 43 1 34 6 ## 6 2 0 0 0 1 3 607 0 0 0 ## 7 0 0 1 0 0 1 0 613 1 8 ## 8 1 1 3 2 2 4 0 1 451 2 ## 9 0 0 0 0 5 1 0 14 3 577 Ahora validamos con la muestra de prueba y calculamos error de clasificación: confusion_prueba &lt;- table(predict(mod_mult, newdata = digitos_prueba), digitos_prueba$digito) confusion_prueba ## ## 0 1 2 3 4 5 6 7 8 9 ## 0 335 0 3 0 3 6 4 0 3 0 ## 1 0 252 0 0 1 0 0 0 1 3 ## 2 1 1 171 4 8 0 5 2 3 2 ## 3 3 3 8 145 1 18 0 3 12 0 ## 4 3 6 7 1 176 1 2 6 8 16 ## 5 11 1 5 13 2 130 13 2 14 1 ## 6 4 1 1 0 2 0 143 0 1 0 ## 7 0 0 1 1 2 1 0 130 1 5 ## 8 1 0 2 1 2 1 3 0 118 0 ## 9 1 0 0 1 3 3 0 4 5 150 sum(diag(confusion_prueba))/sum(confusion_prueba) ## [1] 0.8719482 round(prop.table(confusion_prueba, 2),2) ## ## 0 1 2 3 4 5 6 7 8 9 ## 0 0.93 0.00 0.02 0.00 0.02 0.04 0.02 0.00 0.02 0.00 ## 1 0.00 0.95 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.02 ## 2 0.00 0.00 0.86 0.02 0.04 0.00 0.03 0.01 0.02 0.01 ## 3 0.01 0.01 0.04 0.87 0.00 0.11 0.00 0.02 0.07 0.00 ## 4 0.01 0.02 0.04 0.01 0.88 0.01 0.01 0.04 0.05 0.09 ## 5 0.03 0.00 0.03 0.08 0.01 0.81 0.08 0.01 0.08 0.01 ## 6 0.01 0.00 0.01 0.00 0.01 0.00 0.84 0.00 0.01 0.00 ## 7 0.00 0.00 0.01 0.01 0.01 0.01 0.00 0.88 0.01 0.03 ## 8 0.00 0.00 0.01 0.01 0.01 0.01 0.02 0.00 0.71 0.00 ## 9 0.00 0.00 0.00 0.01 0.02 0.02 0.00 0.03 0.03 0.85 El resultado no es muy bueno. Veremos más adelante mejores métodos para este problema. ¿Podemos interpretar el modelo? Una idea es tomar los coeficientes y graficarlos según la estructura de las imágenes: coefs &lt;- coef(mod_mult) coefs_reng &lt;- coefs[1, , drop =FALSE] coefs &lt;- rbind(coefs_reng, coefs) coefs[1 , ] &lt;- 0 dim(coefs) ## [1] 10 257 beta_df &lt;- coefs[,-1] %&gt;% as.data.frame %&gt;% mutate(digito = 0:(nrow(coefs)-1)) %&gt;% gather(pixel, valor, contains(&#39;pixel&#39;)) %&gt;% separate(pixel, into = c(&#39;str&#39;,&#39;pixel_no&#39;), sep=&#39;_&#39;) %&gt;% mutate(x = (as.integer(pixel_no)-1) %% 16, y = -((as.integer(pixel_no)-1) %/% 16)) head(beta_df) ## digito str pixel_no valor x y ## 1 0 pixel 1 0.000000000 0 0 ## 2 1 pixel 1 0.621681333 0 0 ## 3 2 pixel 1 -0.005914605 0 0 ## 4 3 pixel 1 0.044257959 0 0 ## 5 4 pixel 1 0.190966643 0 0 ## 6 5 pixel 1 -0.010655932 0 0 Podemos cruzar la tabla con sí misma para hacer comparaciones de cómo discrimina el modelo entre cada par de dígitos: tab_coef &lt;- beta_df %&gt;% select(digito, x, y, valor) tab_coef_1 &lt;- tab_coef names(tab_coef_1) &lt;- c(&#39;digito_1&#39;,&#39;x&#39;,&#39;y&#39;,&#39;valor_1&#39;) tab_cruzada &lt;- full_join(tab_coef_1, tab_coef) %&gt;% mutate(dif = valor_1 - valor) ## Joining, by = c(&quot;x&quot;, &quot;y&quot;) tab_cruzada &lt;- tab_cruzada %&gt;% group_by(digito, digito_1) %&gt;% mutate(dif_s = (dif - mean(dif))/sd(dif)) %&gt;% mutate(dif_p = pmin(pmax(dif_s, -2), 2)) ggplot(tab_cruzada, aes(x=x, y=y)) + geom_tile(aes(fill = dif_p)) + facet_grid(digito_1~digito) + scale_fill_distiller(palette = &quot;Spectral&quot;) Discusión Nótese que no corrimos el modelo hasta convergencia. Vamos a hacerlo ahora: mod_mult &lt;- multinom(digito ~ ., data = digitos_entrena, MaxNWt=100000, maxit = 500) ## # weights: 2580 (2313 variable) ## initial value 16788.147913 ## iter 10 value 2598.959017 ## iter 20 value 1494.978090 ## iter 30 value 903.291402 ## iter 40 value 443.785686 ## iter 50 value 260.626756 ## iter 60 value 190.835491 ## iter 70 value 160.773160 ## iter 80 value 114.048146 ## iter 90 value 88.746976 ## iter 100 value 76.302570 ## iter 110 value 63.400188 ## iter 120 value 54.375215 ## iter 130 value 46.291174 ## iter 140 value 38.303470 ## iter 150 value 28.822810 ## iter 160 value 17.888648 ## iter 170 value 9.531256 ## iter 180 value 2.985614 ## iter 190 value 0.714996 ## iter 200 value 0.209654 ## iter 210 value 0.066710 ## iter 220 value 0.030412 ## iter 230 value 0.014036 ## iter 240 value 0.006702 ## iter 250 value 0.004146 ## iter 260 value 0.001844 ## iter 270 value 0.001128 ## iter 280 value 0.000744 ## iter 290 value 0.000462 ## iter 300 value 0.000308 ## iter 310 value 0.000265 ## iter 320 value 0.000231 ## final value 0.000076 ## converged confusion_prueba &lt;- table(predict(mod_mult, newdata = digitos_prueba), digitos_prueba$digito) confusion_prueba ## ## 0 1 2 3 4 5 6 7 8 9 ## 0 332 0 6 2 4 2 1 2 7 2 ## 1 0 242 1 3 3 4 1 2 0 2 ## 2 2 2 148 5 5 0 4 3 3 0 ## 3 4 1 9 128 4 10 0 3 2 4 ## 4 3 5 8 0 149 8 6 7 5 2 ## 5 0 1 3 11 5 116 8 0 10 1 ## 6 5 7 4 3 10 4 144 0 4 1 ## 7 2 1 3 1 4 1 1 125 2 4 ## 8 6 3 14 7 6 10 4 0 132 3 ## 9 5 2 2 6 10 5 1 5 1 158 sum(diag(confusion_prueba))/sum(confusion_prueba) ## [1] 0.8340807 round(prop.table(confusion_prueba, 2),2) ## ## 0 1 2 3 4 5 6 7 8 9 ## 0 0.92 0.00 0.03 0.01 0.02 0.01 0.01 0.01 0.04 0.01 ## 1 0.00 0.92 0.01 0.02 0.02 0.02 0.01 0.01 0.00 0.01 ## 2 0.01 0.01 0.75 0.03 0.02 0.00 0.02 0.02 0.02 0.00 ## 3 0.01 0.00 0.05 0.77 0.02 0.06 0.00 0.02 0.01 0.02 ## 4 0.01 0.02 0.04 0.00 0.74 0.05 0.04 0.05 0.03 0.01 ## 5 0.00 0.00 0.02 0.07 0.02 0.72 0.05 0.00 0.06 0.01 ## 6 0.01 0.03 0.02 0.02 0.05 0.02 0.85 0.00 0.02 0.01 ## 7 0.01 0.00 0.02 0.01 0.02 0.01 0.01 0.85 0.01 0.02 ## 8 0.02 0.01 0.07 0.04 0.03 0.06 0.02 0.00 0.80 0.02 ## 9 0.01 0.01 0.01 0.04 0.05 0.03 0.01 0.03 0.01 0.89 Y nota que el error es más grande que cuando nos detuvimos antes. Discute en clase: Grafica los coeficientes para este segundo modelo ¿En cuál de los dos modelos es más fácil interpretar los coeficientes? ¿En cuál es menor el error? ¿Cuál crees que es el problema de este segundo modelo comparado con el primero? ¿Por qué crees que sucede? ¿Cómo podríamos corregir este problema? 4.4 Descenso en gradiente para regresión multinomial logística Supondremos \\(K\\) clases, numeradas de \\(0,1,\\ldots, K-1\\). OJO: al aplicar este código debes ser cuidadoso con las etiquetas de clase. pred_multinom &lt;- function(x, beta){ p &lt;- ncol(x) K &lt;- length(beta)/(p+1) + 1 beta_mat &lt;- matrix(beta, K - 1, p + 1 , byrow = TRUE) u_beta &lt;- exp(as.matrix(cbind(1, x)) %*% t(beta_mat)) Z &lt;- 1 + apply(u_beta, 1, sum) p_beta &lt;- cbind(u_beta, 1)/Z as.matrix(p_beta) } devianza_calc &lt;- function(x, y){ dev_fun &lt;- function(beta){ p_beta &lt;- pred_multinom(x, beta) p &lt;- sapply(1:nrow(x), function(i) p_beta[i, y[i]+1]) -2*sum(log(p)) } dev_fun } grad_calc &lt;- function(x_ent, y_ent){ p &lt;- ncol(x_ent) K &lt;- length(unique(y_ent)) y_fact &lt;- factor(y_ent) # matriz de indicadoras de clase y_dummy &lt;- model.matrix(~-1 + y_fact) salida_grad &lt;- function(beta){ p_beta &lt;- pred_multinom(x_ent, beta) e_mat &lt;- (y_dummy - p_beta)[, -K] grad_out &lt;- -2*(t(cbind(1,x_ent)) %*% e_mat) as.numeric(grad_out) } salida_grad } descenso &lt;- function(n, z_0, eta, h_deriv, dev_fun){ z &lt;- matrix(0,n, length(z_0)) z[1, ] &lt;- z_0 for(i in 1:(n-1)){ z[i+1, ] &lt;- z[i, ] - eta * h_deriv(z[i, ]) if(i %% 100 == 0){ print(paste0(i, &#39; Devianza: &#39;, dev_fun(z[i+1, ]))) } } z } x_ent &lt;- digitos_entrena %&gt;% select(contains(&#39;pixel&#39;)) %&gt;% as.matrix y_ent &lt;- digitos_entrena$digito x_ent_s &lt;- scale(x_ent) medias &lt;- attr(x_ent_s, &#39;scaled:center&#39;) sd &lt;- attr(x_ent_s, &#39;scaled:scale&#39;) x_pr &lt;- digitos_prueba %&gt;% select(contains(&#39;pixel&#39;)) %&gt;% as.matrix y_pr &lt;- digitos_prueba$digito # inicializamos coeficientes al azar beta &lt;- runif(257*9) dev_ent &lt;- devianza_calc(x_ent_s, y_ent) grad &lt;- grad_calc(x_ent_s, y_ent) dev_ent(beta) ## [1] 270784 Hacemos algunas revisiones del gradiente: beta_2 &lt;- beta epsilon &lt;- 0.00001 beta_2[1000] &lt;- beta[1000] + epsilon (dev_ent(beta_2) - dev_ent(beta))/epsilon ## [1] -640.4657 grad(beta)[1000] ## [1] -640.4678 Ya ahora podemos hacer descenso: iteraciones &lt;- descenso(2000, rep(0, 257*9), eta=0.001, h_deriv = grad, dev_fun = dev_ent) ## [1] &quot;100 Devianza: 817.809554010357&quot; ## [1] &quot;200 Devianza: 408.010947736697&quot; ## [1] &quot;300 Devianza: 289.951542494061&quot; ## [1] &quot;400 Devianza: 227.805737974779&quot; ## [1] &quot;500 Devianza: 190.43408903327&quot; ## [1] &quot;600 Devianza: 165.487702748531&quot; ## [1] &quot;700 Devianza: 147.301091651991&quot; ## [1] &quot;800 Devianza: 133.221066964653&quot; ## [1] &quot;900 Devianza: 121.903186824327&quot; ## [1] &quot;1000 Devianza: 112.560175747607&quot; ## [1] &quot;1100 Devianza: 104.688785448699&quot; ## [1] &quot;1200 Devianza: 97.9483674585563&quot; ## [1] &quot;1300 Devianza: 92.0984398108757&quot; ## [1] &quot;1400 Devianza: 86.9631199039947&quot; ## [1] &quot;1500 Devianza: 82.4103777725155&quot; ## [1] &quot;1600 Devianza: 78.3393471851082&quot; ## [1] &quot;1700 Devianza: 74.6718258066508&quot; ## [1] &quot;1800 Devianza: 71.3463032980959&quot; ## [1] &quot;1900 Devianza: 68.3137316150628&quot; x_pr_s &lt;- scale(x_pr, center = medias, scale = sd) probas &lt;- pred_multinom(x_pr_s, iteraciones[2000,]) clase &lt;- apply(probas, 1, which.max) table(clase - 1, y_pr ) ## y_pr ## 0 1 2 3 4 5 6 7 8 9 ## 0 347 0 4 1 3 3 1 1 7 0 ## 1 0 252 0 0 4 0 0 1 0 1 ## 2 2 1 168 4 7 1 7 2 5 0 ## 3 2 5 5 148 2 6 0 2 1 0 ## 4 4 0 5 1 168 2 2 5 2 3 ## 5 1 0 2 8 3 139 3 0 6 1 ## 6 0 3 2 1 3 2 156 0 2 0 ## 7 1 1 4 1 3 0 0 133 2 3 ## 8 1 1 8 1 3 5 1 0 136 3 ## 9 1 1 0 1 4 2 0 3 5 166 1 - mean(clase-1 != y_pr) ## [1] 0.9033383 Tarea 4 Ver tareas/tarea_4.Rmd. "],
["regularizacion.html", "Clase 5 Regularización 5.1 Sesgo y varianza de predictores 5.2 Regularización ridge 5.3 Entrenamiento, Validación y Prueba 5.4 Regularización lasso", " Clase 5 Regularización Los métodos para ajustar modelos lineales que vimos en secciones anteriores (mínimos cuadrados y minimización de devianza) 5.1 Sesgo y varianza de predictores Consideremos el problema de regresión, donde el proceso que genera los datos está dado por \\[Y = f(X) + \\epsilon\\] Consideremos que queremos hacer predicciones para una \\(X=x_0\\) particular, de modo que el error es \\[Y - \\hat{f}(x_0) = (f(x_0) - \\hat{f}(x_0)) + \\epsilon\\] Como discutimos antes, no podemos hacer nada por la variación de \\(\\epsilon\\) (a menos que incluyamos otros predictores \\(X\\) informativos, por ejemplo). La pregunta es entonces ¿por qué podría pasar que \\(\\hat{f}(x_0)\\) estuviera lejos de \\(f(x_0)\\)? Recordemos que \\(\\hat{f}(x_0)\\) depende de una muestra de entrenamiento \\({\\mathcal L}\\), de modo que: Puede ser que \\(\\hat{f}(x_0)\\) está consistentemente lejos de \\(f(x_0)\\), independientemente de cuál es la muestra de entrenamiento. Puede ser que \\(\\hat{f}(x_0)\\) varía mucho dependiendo de la muestra de entrenamiento, y en consecuencia es poco probable que \\(\\hat{f}(x_0)\\) esté cerca de \\(f(x_0)\\). Es posible demostrar que \\[E\\left ( (f(x_0)-\\hat{f}(x_0))^2 \\right) = (f(x_0) - E(\\hat{f}(x_0)))^2 + Var (\\hat{f}(x_0))\\] donde los valores esperados y varianza son sobre posibles muestras de entrenamiento. Al primer término le llamamos sesgo : Qué tan lejos en promedio están las estimaciones de nuestro modelo del verdadero valor, y al segundo término le llamamos varianza: qué tanto varían las estimaciones del modelo. Ambas pueden ser razones por las que obtengamos predicciones malas. Ejemplo Consideremos dos métodos: regresión lineal y regresión polinomial (pensemos que es un tipo de ajuste de curvas). Para ilustrar los conceptos de sesgo y varianza simularemos varios posibles muestras de entrenamiento: f &lt;- function(x){ sin(4 * x) } sim_data &lt;- function(n = 30){ x &lt;- runif(n, 0, 1) y &lt;- f(x) + rnorm(n, 0, 0.5) data_frame(x = x, y = y) } dat &lt;- sim_data(n = 100) ggplot(dat, aes(x = x, y = y)) + geom_point() set.seed(92142) sims &lt;- data_frame(rep = 1:10) sims &lt;- sims %&gt;% group_by(rep) %&gt;% mutate(data = list(data = sim_data())) %&gt;% unnest Regresión lineal en \\(x\\) nos da diferencias consistentes entre predicciones y observaciones (es un método que sufre de sesgo): ggplot(sims, aes(x=x, y=y)) + geom_point() + facet_wrap(~rep) + geom_smooth(formula = y~x, method =&#39;lm&#39;, colour = &#39;red&#39;, se = FALSE) + ylim(c(-3,3)) Mientras que regresión polinomial nos da diferencias variables y grandes entre predicciones y observaciones (es un método que sufre de varianza): ggplot(sims, aes(x=x, y=y)) + geom_point() + facet_wrap(~rep) + geom_smooth(formula = y~ poly(x, 9, raw = TRUE), method =&#39;lm&#39;, colour = &#39;red&#39;, se = FALSE) + ylim(c(-3,3)) Podemos ver todos los modelos una misma gráfica y apreciar mejor la variación entre ellos: ggplot(sims, aes(x = x, y = y, group = rep)) + geom_smooth(formula = y~ poly(x, 9, raw = TRUE), method =&#39;lm&#39;, colour = &#39;grey40&#39;, se = FALSE) + geom_smooth(formula = y~x, method =&#39;lm&#39;, colour = &#39;red&#39;, se = FALSE) En este ejemplo, ambos métodos se desempeñan mal, pero por razones distintas. El primer método sufre más de sesgo (subajuste): es un método rígido que no aprende de patrones en los datos. El segundo método sufre más de varianza (sobreajuste): es un método flexible que aprende ruido. Cada uno de estos problemas requiere soluciones diferentes. Típicamente, reducciones en sesgo producen incrementos potenciales de varianza, y reducciones en varianza tienden a producir incrementos potenciales de sesgo. En esta parte veremos métodos de regularización, que sirven para reducir la varianza. Esta reducción en varianza será exitosa cuando el costo en sesgo que paguemos sea menor que esta reducción. 5.1.1 Sesgo y varianza en modelos lineales Aunque típicamente pensamos que los modelos lineales son métodos simples, con estructura rígida, y que tienden a sufrir más por sesgo que por varianza (parte de la razón por la que existen métodos más flexibles como bosques aleatorios, redes nueronales, etc.), hay varias razones por las que los métodos lineales pueden sufrir de varianza alta: Cuando la muestra de entrenamiento es relativamente chica (\\(N\\) chica), la varianza puede ser alta. Cuando el número de entradas \\(p\\) es grande, podemos también sufrir de varianza grande (pues tenemos muchos parámetros para estimar). Cuando hay variables correlacionadas en las entradas la varianza también puede ser alta. En estos casos, conviene buscar maneras de reducir varianza - generalmente a costa de un incremento de sesgo. Ejemplo Consideramos regresión logística. En primer lugar, supondremos que tenemos un problema con \\(n=400\\) y \\(p=100\\), y tomamos como modelo para los datos (sin ordenada al origen): \\[p_1(x)=h\\left(\\sum_{j=1}^{100} \\beta_j x_j\\right ),\\] donde \\(h\\) es la función logística. Nótese que este es el verdadero modelo para los datos. Para producir datos de entrenamiento, primero generamos las betas fijas, y después, utilizando estas betas, generamos 400 casos de entrenamiento. Generamos las betas: h &lt;- function(x){ 1 / (1 + exp(-x))} set.seed(2805) beta &lt;- rnorm(100,0,0.1) names(beta) &lt;- paste0(&#39;V&#39;, 1:length(beta)) head(beta) ## V1 V2 V3 V4 V5 ## -0.119875530 0.034627590 -0.081818069 0.014920959 0.040160152 ## V6 ## 0.002043735 Con esta función simulamos datos de entrenamiento (400) y datos de prueba (5000). sim_datos &lt;- function(n, m, beta){ p &lt;- length(beta) #n = casos de entrenamiento, m= casos de prueba, p=num variables mat &lt;- matrix(rnorm((n+m)*p, 0, 0.5), n+m, p) + rnorm(n + m) prob &lt;- h(mat %*% beta) y &lt;- rbinom(n + m, 1, prob) dat &lt;- as.data.frame(mat) dat$y &lt;- y dat$entrena &lt;- FALSE dat$entrena[1:n] &lt;- TRUE dat } set.seed(9921) datos &lt;- sim_datos(n = 400, m = 2000, beta = beta) Y ahora ajustamos el modelo de regresión logística: mod_1 &lt;- glm(y ~ -1 + ., datos %&gt;% filter(entrena) %&gt;% select(-entrena), family = &#39;binomial&#39;) ¿Qué tan buenas fueron nuestras estimaciones? qplot(beta, mod_1$coefficients) + xlab(&#39;Coeficientes&#39;) + ylab(&#39;Coeficientes estimados&#39;) + geom_abline(intercept=0, slope =1) + xlim(c(-1.5,1.5))+ ylim(c(-1.5,1.5)) Y notamos que las estimaciones no son buenas. Podemos hacer otra simulación para confirmar que el problema es que las estimaciones son muy variables. Con otra muestra de entrenamiento, vemos que las estimaciones tienen varianza alta. datos_2 &lt;- sim_datos(n = 400, m = 10, beta = beta) mod_2 &lt;- glm(y ~ -1 + ., datos_2 %&gt;% filter(entrena) %&gt;% select(-entrena), family = &#39;binomial&#39;) qplot(mod_1$coefficients, mod_2$coefficients) + xlab(&#39;Coeficientes mod 1&#39;) + ylab(&#39;Coeficientes mod 2&#39;) + geom_abline(intercept=0, slope =1) + xlim(c(-1.5,1.5))+ ylim(c(-1.5,1.5)) Si repetimos varias veces: dat_sim &lt;- lapply(1:50, function(i){ salida &lt;- sim_datos(n=400, m=10, beta) mod &lt;- glm(y ~ -1 + ., salida %&gt;% filter(entrena) %&gt;% select(-entrena), family = &#39;binomial&#39;) data_frame(rep = i, vars = names(coef(mod)), coefs = coef(mod)) }) %&gt;% bind_rows head(dat_sim) ## # A tibble: 6 x 3 ## rep vars coefs ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 V1 -0.209 ## 2 1 V2 -0.0538 ## 3 1 V3 0.149 ## 4 1 V4 0.768 ## 5 1 V5 0.123 ## 6 1 V6 -0.257 Vemos que hay mucha variabilidad en la estimación de los coeficientes (en rojo están los verdaderos): dat_sim &lt;- dat_sim %&gt;% mutate(vars = reorder(vars, coefs, mean)) ggplot(dat_sim, aes(x=vars, y=coefs)) + geom_boxplot() + geom_line(data=data_frame(coefs=beta, vars=names(beta)), aes(y=beta, group=1), col=&#39;red&#39;,size=1.1) + coord_flip() En la práctica, nosotros tenemos una sola muestra de entrenamiento. Así que, con una muestra de tamaño \\(n=500\\) como en este ejemplo, obtendremos típicamente resultados no muy buenos. Estos coeficientes ruidosos afectan nuestras predicciones de manera negativa. Vemos ahora lo que pasa con nuestra \\(\\hat{p}_1(x)\\) estimadas, comparándolas con \\(p_1(x)\\), para la primera simulación: dat_e &lt;- datos %&gt;% filter(entrena) dat_p &lt;- datos %&gt;% filter(!entrena) x_e &lt;- dat_e %&gt;% select(-entrena, -y) %&gt;% as.matrix x_p &lt;- dat_p %&gt;% select(-entrena, -y) %&gt;% as.matrix p_entrena &lt;- data_frame(prob_hat_1 = (mod_1$fitted.values), prob_1 = as.numeric(h(x_e %*% beta)), clase = dat_e$y) p_prueba &lt;- data_frame(prob_hat_1 = as.numeric(h(x_p %*% (mod_1$coefficients))), prob_1 = as.numeric(h(x_p %*% beta)), clase = dat_p$y) Para los datos de entrenamiento: ggplot(p_entrena, aes(x=prob_hat_1, y=prob_1, colour=factor(clase))) + geom_point() + coord_flip() Notamos en esta gráfica: El ajuste parece discriminar bien entre las dos clases del conjunto de entrenamiento (cuando la probabilidad estimada es chica, observamos casi todos clase 0, y cuando la probabilidad estimada es grande, observamos casi todos clase 1). Sin embargo, vemos que las probabilidades estimadas tienden a ser extremas: muchas veces estimamos probabilidad cercana a 0 o 1, cuando la probabilidad real no es tan extrema (por ejemplo, está entre 0.25 y 0.75). Estos dos aspectos indican sobreajuste. Podemos verificar comparando con los resultados que obtenemos con la muestra de prueba. Si calculamos la matriz de confusión y sensibilidad y especifidad de entrenamiento: tab &lt;- table(p_entrena$prob_hat_1 &gt; 0.5, p_entrena$clase) tab ## ## 0 1 ## FALSE 159 34 ## TRUE 44 163 prop.table(tab, margin=2) ## ## 0 1 ## FALSE 0.7832512 0.1725888 ## TRUE 0.2167488 0.8274112 Pero con la muestra de prueba obtenemos tab &lt;- table(p_prueba$prob_hat_1 &gt; 0.5, p_prueba$clase) tab ## ## 0 1 ## FALSE 608 374 ## TRUE 396 622 prop.table(tab, margin=2) ## ## 0 1 ## FALSE 0.6055777 0.3755020 ## TRUE 0.3944223 0.6244980 Que es un desempeño pobre comparado con lo que la muestra de entrenamiento podría indicar. Finalmente, podemos también repetir la gráfica de arriba con los datos de prueba: ggplot(p_prueba, aes(x=prob_hat_1)) + geom_point(aes(y=prob_1, colour=factor(clase))) + coord_flip() Si la estimación fuera perfecta, esta gráfica sería una diagonal. Vemos entonces que Cometemos errores grandes en la estimación de probabilidades. El desempeño predictivo del modelo es pobre, aún cuando nuestro modelo puede discriminar razonablemente bien las dos clases en el conjunto de entrenamiento. El problema no es que nuestro modelo no sea apropiado (logístico), pues ese es el modelo real. El problema es el sobreajuste asociado a la variabilidad de los coeficientes que notamos arriba. 5.1.2 Reduciendo varianza de los coeficientes Como el problema es la varianza, podemos atacar este problema poniendo restricciones a los coeficientes, de manera que caigan en rangos más aceptables. Una manera de hacer esto es sustituir el problema de minimización de regresión logística, que es minimizar la devianza: \\[\\min_{\\beta} D(\\beta)\\] con un problema penalizado \\[\\min_{\\beta} D(\\beta) + \\lambda\\sum_{i=1}^p \\beta_j^2\\] escogiendo un valor apropiado de \\(\\lambda\\). Si escogemos un valor relativamente grande de \\(\\lambda\\), entonces terminaremos con una solución donde los coeficientes \\(\\beta_j\\) no pueden alejarse mucho de 0, y esto previene parte del sobreajuste que observamos en nuestro primer ajuste. Otra manera de decir esto es: intentamos minimizar la devianza, pero no permitimos que los coeficientes se alejen demasiado de cero. También es posible poner restricciones sobre el tamaño de \\(\\sum_{i=1}^p \\beta_j^2\\), lo cual es equivalente al problema de penalización. En este caso obtenemos (veremos más del paquete glmnet): library(glmnet) mod_restringido &lt;- glmnet(x = x_e, y = dat_e$y, alpha = 0, family=&#39;binomial&#39;, intercept = F, lambda = 0.1) beta_penalizado &lt;- coef(mod_restringido)[-1] # quitar intercept Y podemos ver que el tamaño de los coeficientes se redujo considerablemente: sum(beta_penalizado^2) ## [1] 0.4837593 sum(coef(mod_1)^2) ## [1] 18.2092 Los nuevos coeficientes estimados tienen menor variación: qplot(beta, beta_penalizado) + xlab(&#39;Coeficientes&#39;) + ylab(&#39;Coeficientes estimados&#39;) + geom_abline(intercept=0, slope =1) + xlim(c(-0.5,0.5))+ ylim(c(-0.5,0.5)) Y las probabilidades estimadas son más razonables: p_entrena$prob_hat_pen &lt;- h(x_e %*% as.numeric(beta_penalizado)) p_prueba$prob_hat_pen &lt;- h(x_p %*% as.numeric(beta_penalizado)) ggplot(p_entrena, aes(x=prob_1, y=prob_hat_pen, colour=factor(clase))) + geom_point() El desempeño es considerablemente mejor: tab &lt;- table(p_prueba$prob_hat_pen &gt; 0.5, p_prueba$clase) prop.table(tab, 2) ## ## 0 1 ## FALSE 0.6603586 0.2851406 ## TRUE 0.3396414 0.7148594 Y finalmente, comparamos las curvas ROC de prueba para los dos modelos, el penalizado y el no penalizado. El modelo penalizado es considerablemente mejor: library(ROCR) pred &lt;- prediction(predictions = p_prueba$prob_hat_1, labels = p_prueba$clase) perf &lt;- performance(pred, measure = &quot;sens&quot;, x.measure = &quot;fpr&quot;) plot(perf) pred_r &lt;- prediction(predictions = p_prueba$prob_hat_pen, labels = p_prueba$clase) perf_r &lt;- performance(pred_r, measure = &quot;sens&quot;, x.measure = &quot;fpr&quot;) plot(perf_r, add =T, col =&#39;red&#39;) abline(a=0, b=1, col =&#39;gray&#39;) Observación: Sin embargo, vemos que en la muestra de entrenamiento se desempeña mejor el modelo sin penalización, como es de esperarse (el mínimo irrestricto es más bajo que el mínimo del problema con restricción). library(ROCR) pred &lt;- prediction(predictions = p_entrena$prob_hat_1, labels = p_entrena$clase) perf &lt;- performance(pred, measure = &quot;sens&quot;, x.measure = &quot;fpr&quot;) plot(perf) pred_r &lt;- prediction(predictions = p_entrena$prob_hat_pen, labels = p_entrena$clase) perf_r &lt;- performance(pred_r, measure = &quot;sens&quot;, x.measure = &quot;fpr&quot;) plot(perf_r, add =T, col =&#39;red&#39;) abline(a=0, b=1, col =&#39;gray&#39;) 5.2 Regularización ridge Arriba vimos un ejemplo de regresión penalizada tipo ridge. Recordemos que para regresión lineal, buscábamos minimizar la cantidad \\[D(\\beta)=\\frac{1}{n}\\sum_{i=1}^n (y_i -\\beta_0 - \\sum_{j=1}^p \\beta_j x_{ij})^2\\] y en regresión logística, \\[D(\\beta)=-\\frac{2}{n}\\sum_{i=1}^n y_i \\log(h(\\beta_0 + \\sum_{j=1}^p \\beta_j x_{ij})) + (1-y_i) \\log(1 - h(\\beta_0 + \\sum_{j=1}^p \\beta_j x_{ij})) ,\\] donde los denotamos de la misma forma para unificar notación. En regresión ridge (lineal/logística), para \\(\\lambda&gt;0\\) fija minimizamos \\[D_{\\lambda}^{ridge} (\\beta)=D(\\beta) + \\lambda\\sum_{i=1}^p \\beta_j^2,\\] donde suponemos que las entradas están estandarizadas (centradas y escaladas por la desviación estándar). Observaciones La idea de regresión penalizada consiste en estabilizar la estimación de los coeficientes, especialmente en casos donde tenemos muchas variables en relación a los casos de entrenamiento. La penalización no permite que varíen tan fuertemente los coeficientes. Cuando \\(\\lambda\\) es mas grande, los coeficientes se encogen más fuertemente hacia cero con respecto al problema no regularizado. En este caso, estamos reduciendo la varianza pero potencialmente incrementando el sesgo. Cuando \\(\\lambda\\) es mas chico, los coeficientes se encogen menos fuertemente hacia cero, y quedan más cercanos a los coeficientes de mínimos cuadrados/máxima verosimilitud. En este caso, estamos reduciendo el sesgo pero incrementando la varianza. Nótese que no penalizamos \\(\\beta_0\\). Es posible hacerlo, pero típicamente no lo hacemos. En regresión lineal, de esta forma garantizamos que la predicción \\(\\hat{y}\\), cuando todas las variables \\(x_j\\) toman su valor en la media, es el promedio de las \\(y_i\\)’s de entrenamiento. Igualmente en regresión logística, la probabilidad ajustada cuando las entradas toman su valor en la media es igual a \\(h(\\beta_0)\\). Que las variables estén estandarizadas es importante para que tenga sentido la penalización. Si las variables \\(x_j\\) están en distintas escalas (por ejemplo pesos y dólares), entonces también los coeficientes \\(\\beta_j\\) están en distintas escalas, y una penalización fija no afecta de la misma forma a cada coeficiente. Resolver este problema penalizado por descenso en gradiente no tienen dificultad, pues: \\[\\frac{\\partial D_{\\lambda}^{ridge} (\\beta)}{\\partial\\beta_j} = \\frac{\\partial D(\\beta)}{\\beta_j} + 2\\lambda\\beta_j\\] para \\(j=1,\\ldots, p\\), y \\[\\frac{\\partial D_{\\lambda}^{ridge} (\\beta)}{\\partial\\beta_0} = \\frac{\\partial D(\\beta)}{\\beta_0}.\\] De forma que sólo hay que hacer una modificación mínima al algoritmo de descenso en gradiente para el caso no regularizado. 5.2.1 Selección de coeficiente de regularización Seleccionamos \\(\\lambda\\) para minimizar el error de predicción, es decir, para mejorar nuestro modelo ajustado en cuanto a sus predicciones. No tiene sentido intentar escoger \\(\\lambda&gt;0\\) usando el error de entrenamiento. La razón es que siempre que aumentamos \\(\\lambda\\), obtenemos un valor mayor de la suma de cuadrados / devianza del modelo, pues \\(\\lambda\\) más grande implica que pesa menos la minimización de la suma de cuadrados /devianza en el problema de la minimización. En otras palabras, los coeficientes tienen una penalización más fuerte, de modo que el mínimo que se alcanza es mayor en términos de devianza. Intentamos escoger \\(\\lambda\\) de forma que se minimice el error de predicción, o el error de prueba (que estima el error de predicción). Ejemplo (simulación) Regresamos a nuestro problema original simulado de clasificación. La función glmnet se encarga de estandarizar variables y escoger un rango adecuado de penalizaciones \\(\\lambda\\). La función glmnet ajusta varios modelos (parámetro nlambda) para un rango amplio de penalizaciones \\(\\lambda\\): library(glmnet) mod_ridge &lt;- glmnet(x = x_e, y = dat_e$y, alpha = 0, #ridge family = &#39;binomial&#39;, intercept = F, nlambda=50) #normalmente ponemos intercept = T dim(coef(mod_ridge)) ## [1] 101 50 En primer lugar, observamos cómo se encogen los coeficientes para distintos valores de \\(\\lambda\\): plot(mod_ridge, xvar=&#39;lambda&#39;) Para escoger el valor adecuado de \\(\\lambda\\), calculamos la devianza bajo la muestra de prueba: devianza &lt;- function(p, y){ -2*mean(y * log(p) + (1-y) * log(1 - p)) } # predict en glmnet produce probabilidades para los 50 modelos preds_ridge &lt;- predict(mod_ridge, newx = x_p, type = &#39;response&#39;) %&gt;% data.frame %&gt;% mutate(id = 1:nrow(x_p)) %&gt;% gather(modelo, prob, -id) %&gt;% left_join(dat_p %&gt;% mutate(id=1:nrow(dat_p)) %&gt;% select(id, y)) ## Joining, by = &quot;id&quot; head(preds_ridge) ## id modelo prob y ## 1 1 s0 0.5 1 ## 2 2 s0 0.5 1 ## 3 3 s0 0.5 1 ## 4 4 s0 0.5 1 ## 5 5 s0 0.5 1 ## 6 6 s0 0.5 0 tail(preds_ridge) ## id modelo prob y ## 99995 1995 s49 0.50969336 1 ## 99996 1996 s49 0.46159912 1 ## 99997 1997 s49 0.40584246 1 ## 99998 1998 s49 0.01436745 0 ## 99999 1999 s49 0.45568264 1 ## 100000 2000 s49 0.73158603 1 df_lambdas &lt;- data_frame(modelo = attr(mod_ridge$a0, &#39;names&#39;), lambda = mod_ridge$lambda) devianzas_prueba &lt;- preds_ridge %&gt;% group_by(modelo) %&gt;% summarise( devianza = devianza(prob, y)) %&gt;% left_join(df_lambdas) ## Joining, by = &quot;modelo&quot; ggplot(devianzas_prueba, aes(x = lambda, y= devianza)) + scale_x_log10(breaks = round(2^seq(-5,5,1),2)) + geom_point() Buscamos entonces minimizar la devianza (evaluada en la muestra de prueba), que corresponde a tomar un valor de \\(\\lambda\\) alrededor de 0.5, por ejemplo Discusión: ¿por qué la devianza de prueba tiene esta forma, que es típica para problemas de regularización? El modelo final queda como sigue: df_lambdas ## # A tibble: 50 x 2 ## modelo lambda ## &lt;chr&gt; &lt;dbl&gt; ## 1 s0 226. ## 2 s1 187. ## 3 s2 155. ## 4 s3 129. ## 5 s4 107. ## 6 s5 88.3 ## 7 s6 73.1 ## 8 s7 60.6 ## 9 s8 50.2 ## 10 s9 41.6 ## # ... with 40 more rows coefs_selec &lt;- coef(mod_ridge)[-1, &#39;s35&#39;] pred_prueba_final &lt;- h(x_p %*% coefs_selec) tab_confusion &lt;- table(pred_prueba_final &gt; 0.5, dat_p$y) tab_confusion ## ## 0 1 ## FALSE 657 293 ## TRUE 347 703 prop.table(tab_confusion, margin=2) ## ## 0 1 ## FALSE 0.6543825 0.2941767 ## TRUE 0.3456175 0.7058233 Ejemplo: variables correlacionadas Ridge es efectivo para reducir varianza inducida por variables correlacionadas. Consideramos el siguiente ejemplo donde queremos predecir el porcentaje de grasa corporal a partir de varias medidas del cuerpo (estas medidas están claramente correlacionadas): library(readr) dat_grasa &lt;- read_csv(file = &#39;datos/bodyfat.csv&#39;) head(dat_grasa) ## # A tibble: 6 x 14 ## grasacorp edad peso estatura cuello pecho abdomen cadera muslo rodilla ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 12.3 23 154. 67.8 36.2 93.1 85.2 94.5 59 37.3 ## 2 6.1 22 173. 72.2 38.5 93.6 83 98.7 58.7 37.3 ## 3 25.3 22 154 66.2 34 95.8 87.9 99.2 59.6 38.9 ## 4 10.4 26 185. 72.2 37.4 102. 86.4 101. 60.1 37.3 ## 5 28.7 24 184. 71.2 34.4 97.3 100 102. 63.2 42.2 ## 6 20.9 24 210. 74.8 39 104. 94.4 108. 66 42 ## # ... with 4 more variables: tobillo &lt;dbl&gt;, biceps &lt;dbl&gt;, antebrazo &lt;dbl&gt;, ## # muñeca &lt;dbl&gt; nrow(dat_grasa) ## [1] 252 set.seed(127) dat_grasa$unif &lt;- runif(nrow(dat_grasa), 0, 1) dat_grasa &lt;- arrange(dat_grasa, unif) dat_grasa$id &lt;- 1:nrow(dat_grasa) bfat_e &lt;- dat_grasa[1:100,] bfat_p &lt;- dat_grasa[101:252,] xbf_e &lt;- bfat_e %&gt;% select(estatura, peso, abdomen, muslo, biceps) %&gt;% as.matrix cor(xbf_e) ## estatura peso abdomen muslo biceps ## estatura 1.00000000 0.2534694 0.0928379 0.04835578 0.1857616 ## peso 0.25346939 1.0000000 0.9059227 0.86412005 0.8273691 ## abdomen 0.09283790 0.9059227 1.0000000 0.78986726 0.7308348 ## muslo 0.04835578 0.8641200 0.7898673 1.00000000 0.7899550 ## biceps 0.18576161 0.8273691 0.7308348 0.78995504 1.0000000 Ahora ajustamos varios modelos penalizamos, y observamos qué pasa con los coeficientes conforme aumentamos la penalización: ridge_bodyfat &lt;- glmnet(x = scale(xbf_e), y = bfat_e$grasacorp, alpha=0, lambda = exp(seq(-5, 5, 0.25))) plot(ridge_bodyfat, xvar = &#39;lambda&#39;, label=TRUE) Donde notamos que las variables con correlaciones altas se “encogen” juntas hacia valores similares conforme aumentamos la constante de penalización \\(\\lambda\\). Nótese que para regularización muy baja peso y abdomen por ejemplo, tienen signos opuestos y valores altos: esto es posible pues tienen correlación alta, de modo que la función de predicción está pobremente determinada: hay un espacio grande de pares de parámetros que dan predicciones similares, y esto resulta en coeficientes con varianza alta y predicciones inestables y ruidosas. Nótese, adicionalmente, que los coeficientes parecen tener más sentido en relación al problema con regularización. Regularización, en este tipo de problemas, es una de las componentes necesarias (pero no suficiente) para ir hacia interpretación del fenómeno que nos interesa. 5.3 Entrenamiento, Validación y Prueba El enfoque que vimos arriba, en donde dividemos la muestra en dos partes al azar, es la manera más fácil de seleccionar modelos. En general, el proceso es el siguiente: Una parte con los que ajustamos todos los modelos que nos interesa. Esta es la muestra de entrenamiento Una parte como muestra de prueba, con el que evaluamos el desempeño de cada modelo ajustado en la parte anterior. En este contexto, a esta muestra se le llama muestra de validación}. Posiblemente una muestra adicional independiente, que llamamos muestra de prueba, con la que hacemos una evaluación final del modelo seleccionado arriba. Es una buena idea apartar esta muestra si el proceso de validación incluye muchos métodos con varios parámetros afinados (como la \\(\\lambda\\) de regresión ridge). knitr::include_graphics(&quot;./figuras/div_muestra.png&quot;) Cuando tenemos datos abundantes, este enfoque es el usual. Por ejemplo, podemos dividir la muestra en 50-25-25 por ciento. Ajustamos modelos con el primer 50%, evaluamos y seleccionamos con el segundo 25% y finalmente, si es necesario, evaluamos el modelo final seleccionado con la muestra final de 25%. La razón de este proceso es que así podemos ir y venir entre entrenamiento y validación, buscando mejores enfoques y modelos, y no ponemos en riesgo la estimación final del error. (Pregunta: ¿por qué probar agresivamente buscando mejorar el error de validación podría ponder en riesgo la estimación final del error del modelo seleccionado? ) 5.3.1 Validación cruzada En muchos casos, no queremos apartar una muestra de validación para seleccionar modelos, pues no tenemos muchos datos (al dividir la muestra obtendríamos un modelo relativamente malo en relación al que resulta de todos los datos). Un criterio para seleccionar la regularización adecuada es el de **validación cruzada*, que es un método computacional para producir una estimación interna (usando sólo muestra de entrenamiento) del error de predicción. En validación cruzada (con \\(k\\) vueltas), construimos al azar una partición, con tamaños similares, de la muestra de entrenamiento \\({\\mathcal L}=\\{ (x_i,y_i)\\}_{i=1}^n\\): \\[ {\\mathcal L}={\\mathcal L}_1\\cup {\\mathcal L}_2\\cup\\cdots\\cup {\\mathcal L}_k.\\] knitr::include_graphics(&quot;./figuras/div_muestra_cv.png&quot;) Construimos \\(k\\) modelos distintos, digamos \\(\\hat{f}_j\\), usando solamente la muestra \\({\\mathcal L}-{\\mathcal L}_j\\), para \\(j=1,2,\\ldots, k\\). Cada uno de estos modelos lo evaluamos usando la parte que no usamos para entrenarlo, \\({\\mathcal L}_j\\), para obtener una estimación honesta del error del modelo \\(\\hat{f}_k\\), a la que denotamos por \\(\\hat{e}_j\\). Notemos entonces que tenemos \\(k\\) estimaciones del error \\(\\hat{e}_1,\\ldots, \\hat{e}_k\\), una para cada uno de los modelos que construimos. La idea ahora es que Cada uno de los modelos \\(\\hat{f}_j\\) es similar al modelo ajustado con toda la muestra \\(\\hat{f}\\), de forma que podemos pensar que cada una de las estimaciones \\(\\hat{e}_j\\) es un estimador del error de \\(\\hat{f}\\). Dado el punto anterior, podemos construir una mejor estimación promediando las \\(k\\) estimaciones anteriores, para obtener: \\[\\widehat{cv} = \\frac{1}{k} \\sum_{j=1}^k \\hat{e}_j.\\] ¿Cómo escoger \\(k\\)? Usualmente se usan \\(k=5,10,20\\), y \\(k=10\\) es el más popular. La razón es que cuando \\(k\\) es muy chico, tendemos a evaluar modelos construidos con pocos datos (comparado al modelo con todos los datos de entrenamiento). Por otra parte, cuando \\(k\\) es grande el método puede ser muy costoso (por ejemplo, si \\(k=N\\), hay que entrenar un modelo para cada dato de entrada). Por ejemplo, el paquete glmnet incluye la función cv.glmnet, que hace los \\(k\\) ajustes para cada una de las lambdas: library(glmnet) set.seed(291) cv_mod_ridge &lt;- cv.glmnet(x = x_e, y=dat_e$y, alpha = 0, family=&#39;binomial&#39;, intercept = F, nfolds = 10, nlambda=50) plot(cv_mod_ridge) cv_mod_ridge$lambda.min ## [1] 0.2155714 cv_mod_ridge$lambda.1se ## [1] 7.666755 Nótese que la estimación del error de predicción por validación cruzada incluye un error de estimación (intervalos). Esto nos da dos opciones para escoger la lambda final: Escoger la que de el mínimo valor de error por validación cruzada Escoger la lambda más grande que no esté a más de 1 error estándar del mínimo. En la gráfica anterior se muestran las dos posibilidades. La razón del segundo criterio es tomar el modelo más simple que tenga error consistente con el mejor modelo. 5.3.2 ¿Cómo se desempeña validación cruzada como estimación del error? cross_valid &lt;- data_frame(devianza_cv = cv_mod_ridge$cvm, modelo = attr(cv_mod_ridge$glmnet.fit$a0, &#39;names&#39;)[1:49]) devs &lt;- devianzas_prueba %&gt;% left_join(cross_valid) %&gt;% rename(devianza_prueba = devianza) %&gt;% gather(tipo, devianza, devianza_prueba, devianza_cv) ## Joining, by = &quot;modelo&quot; ggplot(devs, aes(x=log(lambda), y=devianza, colour=tipo)) + geom_point() ## Warning: Removed 1 rows containing missing values (geom_point). Vemos que la estimación en algunos casos no es tan buena, aún cuando todos los datos fueron usados. Pero el mínimo se encuentra en lugares muy similares. La razón es que validación cruzada en realidad considera perturbaciones del conjunto de entrenamiento, de forma que lo que intenta evaluar es el error producido, para cada lambda, sobre distintas muestras de entrenamiento. En realidad nosotros queremos evaluar el error de predicción del modelo que ajustamos. Validación cruzada es más un estimador del error esperado de predicción sobre los modelos que ajustaríamos con distintas muestras de entrenamiento. El resultado es que: Usamos validación cruzada para escoger la complejidad adecuada de la familia de modelos que consideramos. Como estimación del error de predicción del modelo que ajustamos, validación cruzada es más seguro que usar el error de entrenamiento, que muchas veces puede estar fuertemente sesgado hacia abajo. Sin embargo, lo mejor en este caso es utilizar una muestra de prueba. Ejercicio Consideremos el ejemplo de reconocimiento de dígitos y regresión logística multinomial. library(readr) digitos_entrena &lt;- read_csv(&#39;datos/zip-train.csv&#39;) digitos_prueba &lt;- read_csv(&#39;datos/zip-test.csv&#39;) names(digitos_entrena)[1] &lt;- &#39;digito&#39; names(digitos_entrena)[2:257] &lt;- paste0(&#39;pixel_&#39;, 1:256) names(digitos_prueba)[1] &lt;- &#39;digito&#39; names(digitos_prueba)[2:257] &lt;- paste0(&#39;pixel_&#39;, 1:256) Vamos a correr modelos con varias lambda, y estimar su error con validación cruzada: set.seed(2912) if(TRUE){ digitos_entrena_s &lt;- sample_n(digitos_entrena, size = 2000) } else { digitos_entrena_s &lt;- digitos_entrena } x_e &lt;- digitos_entrena_s %&gt;% select(-digito) %&gt;% as.matrix x_p &lt;- digitos_prueba %&gt;% select(-digito) %&gt;% as.matrix library(doMC) ## Loading required package: iterators ## Loading required package: parallel registerDoMC(cores=5) digitos_cv &lt;- cv.glmnet(x = x_e, y = factor(digitos_entrena_s$digito), family = &#39;multinomial&#39;, alpha = 0, parallel = TRUE, nfolds = 10, lambda = exp(seq(-12, 2, 1))) plot(digitos_cv) Ahora hacemos predicciones para el conjunto de prueba, usando la lambda que nos dio el menor error de validación cruzada: preds_prueba &lt;- predict(digitos_cv, newx = x_p, s = &#39;lambda.min&#39;)[,,1] # solo un grupo de coeficientes dim(preds_prueba) ## [1] 2007 10 Y evaluamos la tasa de clasificación incorrecta: preds_clase &lt;- apply(preds_prueba, 1, which.max) table(preds_clase, digitos_prueba$digito) ## ## preds_clase 0 1 2 3 4 5 6 7 8 9 ## 1 348 0 4 3 1 6 3 1 5 0 ## 2 0 252 0 0 1 0 0 0 0 3 ## 3 2 1 167 5 6 1 3 0 8 1 ## 4 2 2 8 140 0 11 0 1 6 0 ## 5 3 5 8 1 172 3 3 9 2 6 ## 6 0 0 0 12 1 126 3 2 8 1 ## 7 2 2 2 0 8 2 158 0 0 0 ## 8 0 0 1 1 1 3 0 131 0 2 ## 9 1 1 8 2 3 6 0 0 135 1 ## 10 1 1 0 2 7 2 0 3 2 163 mean(preds_clase -1 != digitos_prueba$digito) ## [1] 0.1071251 Este modelo mejora considerablemente al modelo sin regularización. Observación: Cuando vimos regresión multinomial, la última clase es uno menos la suma del resto de probabilidades de clase (\\((K-1)(p+1)\\) parámetros). La salida de glmnet, sin embargo, tiene coeficientes para todas las clases (\\(K(p+1)\\) parámetros). ¿Por qué en regresión ridge no está sobreparametrizado el modelo? 5.4 Regularización lasso Otra forma de regularización es el lasso, que en lugar de penalizar con la suma de cuadrados en los coeficientes, penaliza por la suma de su valor absoluto. En regresión lasso (lineal/logística), para \\(\\lambda&gt;0\\) fija minimizamos \\[D_{\\lambda}^2 (\\beta)=D(\\beta) + \\lambda\\sum_{i=1}^p |\\beta_j|\\], donde suponemos que las entradas están estandarizadas (centradas y escaladas por la desviación estándar). El problema de minimización de ridge y de lasso se pueden reescribir como problemas de restricción: En regresión lasso (lineal/logística), para \\(s&gt;0\\) fija minimizamos \\[D(\\beta), \\] sujeto a \\[\\sum_{i=1}^p |\\beta_j|&lt; s\\] donde suponemos que las entradas están estandarizadas (centradas y escaladas por la desviación estándar). En regresión ridge (lineal/logística), para \\(t&gt;0\\) fija minimizamos \\[D(\\beta), \\] sujeto a \\[\\sum_{i=1}^p \\beta_j^2 &lt; t\\] donde suponemos que las entradas están estandarizadas (centradas y escaladas por la desviación estándar). \\(s\\) y \\(t\\) chicas corresponden a valores de penalización \\(\\lambda\\) grandes. En un principio, puede parecer que ridge y lasso deben dar resultados muy similares, pues en ambos casos penalizamos por el tamaño de los coeficientes. Sin embargo, son distintos de una manera muy importante. En la siguiente gráfica representamos las curvas de nivel de \\(D(\\beta)\\). Recordemos que en mínimos cuadrados o regresión logística intentamos minimizar esta cantidad sin restricciones, y este mínimo se encuentra en el centro de estas curvas de nivel. Para el problema restringido, buscamos más bien la curva de nivel más baja que intersecta la restricción: knitr::include_graphics(&#39;./figuras/ridge_lasso.png&#39;) Y obsérvese ahora que la solución de lasso puede hacer algunos coeficientes igual a 0. Es decir, En regresión ridge, los coeficientes se encogen gradualmente desde la solución no restringida hasta el origen. Ridge es un método de encogimiento de coeficientes. En regresión lasso, los coeficientes se encogen gradualmente, pero también se excluyen variables del modelo. Por eso lasso es un método de encogimiento y selección de variables. Regresión ridge es especialmente útil cuando tenemos varias variables de entrada fuertemente correlacionadas. Regresión ridge intenta encoger juntos coeficientes de variables correlacionadas para reducir varianza en las predicciones. Lasso encoge igualmente coeficientes para reducir varianza, pero también comparte similitudes con regresión de mejor subconjunto, en donde para cada número de variables \\(l\\) buscamos escoger las \\(l\\) variables que den el mejor modelo. Sin embargo, el enfoque de lasso es más escalable y puede calcularse de manera más simple. Descenso en gradiente no es apropiado para regresión lasso (ver documentación de glmnet para ver cómo se hace en este paquete). El problema es que los coeficientes nunca se hacen exactamente cero, pues la restricción no es diferenciable en el origen (coeficientes igual a cero). Ejemplo Consideramos el ejemplo de bodyfat: library(readr) dat_grasa &lt;- read_csv(file = &#39;datos/bodyfat.csv&#39;) head(dat_grasa) ## # A tibble: 6 x 14 ## grasacorp edad peso estatura cuello pecho abdomen cadera muslo rodilla ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 12.3 23 154. 67.8 36.2 93.1 85.2 94.5 59 37.3 ## 2 6.1 22 173. 72.2 38.5 93.6 83 98.7 58.7 37.3 ## 3 25.3 22 154 66.2 34 95.8 87.9 99.2 59.6 38.9 ## 4 10.4 26 185. 72.2 37.4 102. 86.4 101. 60.1 37.3 ## 5 28.7 24 184. 71.2 34.4 97.3 100 102. 63.2 42.2 ## 6 20.9 24 210. 74.8 39 104. 94.4 108. 66 42 ## # ... with 4 more variables: tobillo &lt;dbl&gt;, biceps &lt;dbl&gt;, antebrazo &lt;dbl&gt;, ## # muñeca &lt;dbl&gt; nrow(dat_grasa) ## [1] 252 set.seed(127) dat_grasa$unif &lt;- runif(nrow(dat_grasa), 0, 1) dat_grasa &lt;- arrange(dat_grasa, unif) dat_grasa$id &lt;- 1:nrow(dat_grasa) dat_e &lt;- dat_grasa[1:150,] dat_p &lt;- dat_grasa[151:252,] x_e &lt;- dat_e %&gt;% select(-grasacorp, -id, -unif) %&gt;% as.matrix x_p &lt;- dat_p %&gt;% select(-grasacorp, -id, -unif) %&gt;% as.matrix mod_bodyfat_cv &lt;- cv.glmnet(x = x_e, y = dat_e$grasacorp, alpha = 1) #alpha=1 para lasso plot(mod_bodyfat_cv) Veamos los coeficientes para un modelo regularizado con la \\(\\lambda\\) máxima con error consistente con el mínimo (por validación cruzada): coeficientes &lt;- predict(mod_bodyfat_cv, s =&#39;lambda.1se&#39;, type=&#39;coefficients&#39;) coeficientes ## 14 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -20.75924245 ## edad 0.05179279 ## peso . ## estatura -0.09936002 ## cuello . ## pecho . ## abdomen 0.58019360 ## cadera . ## muslo . ## rodilla . ## tobillo . ## biceps . ## antebrazo . ## muñeca -0.51756816 Y nótese que este modelo solo incluye 4 variables. El error de predicción es similar al modelo que incluye todas las variables, y terminamos con un modelo considerablemente más simple: pred_prueba &lt;- predict(mod_bodyfat_cv, newx = x_p, s =&#39;lambda.1se&#39;) sqrt(mean((pred_prueba-dat_p$grasacorp)^2)) ## [1] 4.374339 La traza confirma que la regularización lasso, además de encoger coeficientes, saca variables del modelo conforme el valor de regularización aumenta: mod_bodyfat &lt;- glmnet(x = x_e, y = dat_e$grasacorp, alpha = 1) #alpha=1 para lasso plot(mod_bodyfat, xvar = &quot;lambda&quot;) Comparado con regresión lineal: pred_prueba &lt;- predict(lm(grasacorp ~., data = dat_e %&gt;% select(-id, -unif)), newdata=dat_p) sqrt(mean((pred_prueba-dat_p$grasacorp)^2)) ## [1] 4.311924 "],
["extensiones-para-regresion-lineal-y-logistica.html", "Clase 6 Extensiones para regresión lineal y logística 6.1 Cómo hacer más flexible el modelo lineal 6.2 Transformación de entradas 6.3 Variables cualitativas 6.4 Interacciones 6.5 Categorización de variables 6.6 Splines (opcional) 6.7 Modelando en escala logarítmica", " Clase 6 Extensiones para regresión lineal y logística Los modelos lineales son modelos simples que tienen la ventaja de que es relativamente fácil entender cómo contribuyen las variables de entrada a la predicción (simplemente describimos los coeficientes), y es relativamente fácil ajustarlos, y es fácil hacer cálculos con ellos. Sin embargo, puede ser que sean pobres desde el punto de vista predictivo. Hay dos razones: Los coeficientes tienen varianza alta, de modo que las predicciones resultantes son inestables (por ejemplo, por pocos datos o variables de entradas correlacionadas). En este caso, vimos que con el enfoque de regularización ridge o lasso podemos mejorar la estabilidad, las predicciones, y obtener modelos más parsimoniosos. El modelo tiene sesgo alto, en el sentido de que la estructura lineal es deficiente para describir patrones claros e importantes en los datos. Este problema puede suceder cuando tenemos relaciones complejas entre las variables. Cuando hay relativamente pocas entradas y suficientes datos, puede ser posible ajustar estructuras más realistas y complejas. Aunque veremos otros métodos para atacar este problema más adelante, a veces extensiones simples del modelo lineal pueden resolver este problema. Igualmente, esperamos encontrar mejores predicciones con modelos más realistas. 6.1 Cómo hacer más flexible el modelo lineal Podemos construir modelos lineales más flexibles expandiendo el espacio de entradas con transformaciones y combinaciones de las variables originales de entrada. La idea básica es entonces transformar a nuevas entradas, antes de ajustar un modelo: \\[(x_1,...,x_p) \\to (b_1(x),...,b_M (x)).\\] donde típicamente \\(M\\) es mayor que \\(p\\). Entonces, en lugar de ajustar el modelo lineal en las \\(x_1,\\ldots, x_p\\), que es \\[ f(x) = \\beta_0 + \\sum_{i=1}^p \\beta_jx_j\\] ajustamos un modelo lineal en las entradas transformadas: \\[ f(x) = \\beta_0 + \\sum_{i=1}^M \\beta_jb_j(x).\\] Como cada \\(b_j\\) es una función que toma valores numéricos, podemos considerarla como una entrada derivada de las entradas originales. Ejemplo Si \\(x_1\\) es compras totales de un cliente de tarjeta de crédito, y \\(x_2\\) es el número de compras, podemos crear una entrada derivada \\(b_1(x_1,x_2)=x_1/x_2\\) que representa el tamaño promedio por compra. Podríamos entonces poner \\(b_2(x_1,x_2)=x_1\\), \\(b_3(x_1,x_2)=x_2\\), y ajustar un modelo lineal usando las entradas derivadas \\(b_1,b_2, b_3\\). Lo conveniente de este enfoque es que lo único que hacemos para hacer más flexible el modelo es transformar en primer lugar las variables de entrada (quizá produciendo más entradas que el número de variables originales). Después construimos un modelo lineal, y todo lo que hemos visto aplica sin cambios: el modelo sigue siendo lineal, pero el espacio de entradas es diferente (generalmente expandido). Veremos las siguientes técnicas: Agregar versiones transformadas de las variables de entrada. Incluir variables cualitativas (categóricas). Interacciones entre variables: incluir términos de la forma \\(x_1x_2\\). Regresión polinomial: incluír términos de la forma \\(x_1^2\\), \\(x_1^3\\), etcétera. Splines de regresión. 6.2 Transformación de entradas Una técnica útil para mejorar el sesgo de modelos de regresión consiste en incluir o sustituir valores transformados de las variables de entrada. Ejemplo: agregar entradas transformadas Empezamos por predecir el valor de una casa en función de calidad de terminados. Preparamos los datos: library(tidyverse) cbbPalette &lt;- c(&quot;#000000&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;, &quot;#009E73&quot;, &quot;#F0E442&quot;, &quot;#0072B2&quot;, &quot;#D55E00&quot;, &quot;#CC79A7&quot;) theme_set(theme_minimal()) datos_casas &lt;- read_csv(&#39;./tareas/tarea_6_datos/data_train.csv&#39;, na=&quot;&quot;) set.seed(9911) indices_entrena &lt;- sample(1:nrow(datos_casas), 1000) casas_e &lt;- datos_casas[indices_entrena, ] %&gt;% mutate(log_price = log(SalePrice)) casas_p &lt;- datos_casas[-indices_entrena, ] %&gt;% mutate(log_price = log(SalePrice)) Ajustamos el modelo y lo probamos mod_1 &lt;- lm(SalePrice ~ OverallQual , data = casas_e) calc_error &lt;- function(mod, datos_p, y_name = &quot;SalePrice&quot;){ preds &lt;- predict(mod, newdata = datos_p) dat &lt;- data_frame(pred = preds, observado = datos_p[[y_name]]) error &lt;- sqrt(mean((preds - datos_p[[y_name]])^2)) grafica &lt;- ggplot(dat, aes(x = preds, y = observado)) + geom_point(alpha = 0.5) + geom_abline(colour = &quot;red&quot;) + annotate(&quot;text&quot;, x = 1000, y= 300000, label = paste0(&quot;rmse &quot;, round(error))) + geom_smooth(method=&quot;loess&quot;, span = 2, method.args=list(family= &quot;symmetric&quot;)) print(grafica) error } calc_error(mod_1, casas_p, &quot;SalePrice&quot;) ## [1] 42180.17 Y notamos que nuestras predicciones parecen estar sesgadas: tienden a ser bajas cuando el valor de la casa es alto o bajo. Esto es signo de sesgo, y usualmente implica que existen relaciones no lineales en las variables que estamos considerando, o interacciones que no estamos incluyendo en nuestro modelo. Una técnica es agregar entradas derivadas de las que tenemos, usando transformaciones no lineales. Por ejemplo, podríamos hacer: mod_2 &lt;- lm(SalePrice ~ OverallQual + I(OverallQual^2) , data = casas_e) calc_error(mod_2, casas_p, &quot;SalePrice&quot;) ## [1] 40830 Y redujimos el error de prueba. Esta reducción claramente proviene de una reducción de sesgo, pues usamos un modelo más complejo (una variable adicional). Ahora agregamos otras variables: el tamaño del área habitable, garage y sótano, y condición general, mod_3 &lt;- lm(SalePrice ~ OverallQual + I(OverallQual^2) + OverallCond + GrLivArea + TotalBsmtSF + GarageArea, data = casas_e) calc_error(mod_3, casas_p, &quot;SalePrice&quot;) ## [1] 32933.89 Podemos pensar en expandir el modelo de maneras distintas. Por ejemplo, podríamos incluir la relación que hay entre tamaño del sótano y área habitable: mod_4 &lt;- lm(SalePrice ~ OverallQual + I(OverallQual^2) + GrLivArea + TotalBsmtSF + GarageArea + OverallCond + I( TotalBsmtSF / GrLivArea) + I( GarageArea / GrLivArea), data = casas_e) calc_error(mod_4, casas_p, &quot;SalePrice&quot;) ## [1] 32957.83 Y estos cambios parecen no mejorar nuestro modelo. 6.3 Variables cualitativas Muchas veces queremos usar variables cualitativas como entradas de nuestro modelo. Pero en la expresión \\[ f(x) = \\beta_0 + \\sum_{i=1}^p \\beta_jx_j,\\] todas las entradas son numéricas. Podemos usar un truco simple para incluir variables cualitativas. Ejemplo Supongamos que queremos incluir la variable CentralAir, si tiene aire acondicionado central o no. Podemos ver en este análisis simple que, por ejemplo, controlando por tamaño de la casa, agrega valor tener aire acondicionado central: casas_e %&gt;% group_by(CentralAir) %&gt;% count ## # A tibble: 2 x 2 ## # Groups: CentralAir [2] ## CentralAir n ## &lt;chr&gt; &lt;int&gt; ## 1 N 67 ## 2 Y 933 ggplot(casas_e, aes(x=GrLivArea, y=SalePrice, colour=CentralAir, group=CentralAir)) + geom_jitter(alpha=1) + geom_smooth(method=&#39;lm&#39;, se=FALSE, size=1.5) + scale_y_log10(breaks=c(0.25,0.5,1,2))+ scale_x_log10(breaks=c(500,1000,2000,4000,8000)) Podemos incluir de manera simple esta variable creando una variable dummy o indicadora, que toma el 1 cuando la casa tiene AC y 0 si no: casas_e &lt;- casas_e %&gt;% mutate(AC_present = as.numeric(CentralAir == &quot;Y&quot;)) casas_e %&gt;% select(Id, CentralAir, AC_present) ## # A tibble: 1,000 x 3 ## Id CentralAir AC_present ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1070 Y 1 ## 2 730 Y 1 ## 3 1326 N 0 ## 4 1193 Y 1 ## 5 1079 Y 1 ## 6 85 Y 1 ## 7 1143 Y 1 ## 8 910 Y 1 ## 9 1063 N 0 ## 10 371 Y 1 ## # ... with 990 more rows Y ahora podemos hacer: mod_5 &lt;- lm(SalePrice ~ OverallQual + I(OverallQual^2) + GrLivArea + TotalBsmtSF + GarageArea + OverallCond + CentralAir, data = casas_e) calc_error(mod_5, casas_p, &quot;SalePrice&quot;) ## [1] 32755.62 Que no es una gran mejora, pero esperado dado que pocas de estas casas tienen aire acondicionado. Cuando la variable categórica tiene \\(K\\) clases, solo creamos variables indicadores de las primeras \\(K-1\\) clases, pues la dummy de la última clase tiene información redundante: es decir, si para las primeras \\(K-1\\) clases las variables dummy son cero, entonces ya sabemos que se trata de la última clase \\(K\\), y no necesitamos incluir una indicadora para la última clase. Ejemplo Vamos a incluir la variable BsmtQual, que tiene los niveles: casas_e %&gt;% group_by(BsmtQual) %&gt;% count ## # A tibble: 5 x 2 ## # Groups: BsmtQual [5] ## BsmtQual n ## &lt;chr&gt; &lt;int&gt; ## 1 Ex 93 ## 2 Fa 26 ## 3 Gd 409 ## 4 NA 27 ## 5 TA 445 Podemos hacer una gráfica exploratoria como la anterior: ggplot(casas_e, aes(x=GrLivArea, y=SalePrice, colour=BsmtQual, group=BsmtQual)) + geom_jitter(alpha=1) + geom_smooth(method=&#39;lm&#39;, se=FALSE, size=1.5) + scale_y_log10(breaks=c(0.25,0.5,1,2))+ scale_x_log10(breaks=c(500,1000,2000,4000,8000)) donde vemos que esta variable puede aportar a la predicción. Ajustamos y evaluamos: mod_6 &lt;- lm(SalePrice ~ OverallQual + I(OverallQual^2) + GrLivArea + TotalBsmtSF + GarageArea + OverallCond + CentralAir + BsmtQual, data = casas_e) calc_error(mod_6, casas_p, &quot;SalePrice&quot;) ## [1] 31340.03 Si examinamos los coeficientes, vemos que lm automáticamente convirtió esta variable con dummy coding: coef(mod_6) ## (Intercept) OverallQual I(OverallQual^2) GrLivArea ## 119263.78011 -44860.91908 5157.93509 49.39657 ## TotalBsmtSF GarageArea OverallCond CentralAirY ## 19.98058 40.75125 6905.50493 22902.19901 ## BsmtQualFa BsmtQualGd BsmtQualNA BsmtQualTA ## -66355.09397 -34231.48579 -50546.75887 -54621.42055 bsmt_ind &lt;- str_detect(names(coef(mod_6)), &quot;BsmtQual&quot;) coef(mod_6)[bsmt_ind] %&gt;% sort ## BsmtQualFa BsmtQualTA BsmtQualNA BsmtQualGd ## -66355.09 -54621.42 -50546.76 -34231.49 Nótese que la categoría base (con coeficiente 0 es ‘Ex’, es decir, no aparece TotalBsmtEx). Esta es la razón por la que todos estos coeficientes son negativos (Ex es el mejor nivel). Observaciones: - Nótese también que no hay coeficiente para una de las clases, por lo que discutimos arriba. También podemos pensar que el coeficiente de esta clase es 0, y así comparamos con las otras clases. - Cuando tenemos variables dummy, el intercept se interpreta con el nivel esperado cuando las variables cuantitativas valen cero, y la variable categórica toma la clase que se excluyó en la construcción de las indicadoras. Podemos incluir variables cualitativas usando este truco de codificación dummy (también llamado a veces one-hot encoding). Ojo: variables con muchas categorías pueden inducir varianza alta en el modelo (dependiendo del tamaño de los datos). En estos casos conviene usar regularización y quizá (si es razonable) usar categorizaciones más gruesas. En nuestro ejemplo anterior, observamos que el nivel Fair queda por debajo de Typical y NA. Esto podría se un signo de sobreajuste (estimación con alta varianza de estos coeficientes). 6.4 Interacciones En el modelo lineal, cada variable contribuye de la misma manera independientemente de los valores de las otras variables. Esta es un simplificación o aproximación útil, pero muchas veces puede producir sesgo demasiado grande en el modelo. Por ejemplo: consideremos los siguientes datos de la relación de mediciones de temperatura y ozono en la atmósfera: Ejemplo head(airquality) ## Ozone Solar.R Wind Temp Month Day ## 1 41 190 7.4 67 5 1 ## 2 36 118 8.0 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 18 313 11.5 62 5 4 ## 5 NA NA 14.3 56 5 5 ## 6 28 NA 14.9 66 5 6 air &lt;- filter(airquality, !is.na(Ozone) &amp; !is.na(Wind) &amp; !is.na(Temp)) lm(Ozone ~Temp, data = air[1:80,]) ## ## Call: ## lm(formula = Ozone ~ Temp, data = air[1:80, ]) ## ## Coefficients: ## (Intercept) Temp ## -136.474 2.306 set.seed(9132) air &lt;- sample_n(air, 116) ggplot(air[1:50,], aes(x = Temp, y = Ozone)) + geom_point() + geom_smooth(method = &#39;lm&#39;, se = FALSE) Y notamos un sesgo posible en nuestro modelo. Si coloreamos por velocidad del viento: cuantiles &lt;- quantile(air$Wind) ggplot(air[1:50,], aes(x = Temp, y = Ozone, colour= cut(Wind, cuantiles))) + geom_point() + geom_smooth(method = &#39;lm&#39;, se = FALSE) Nótese que parece ser que cuando los niveles de viento son altos, entonces hay una relación más fuerte entre temperatura y Ozono. Esto es una interacción de temperatura y viento. Podemos hacer los siguiente: incluír un factor adicional, el producto de temperatura con viento: air$temp_wind &lt;- air$Temp*air$Wind mod_0 &lt;- lm(Ozone ~ Temp, data = air[1:50,]) mod_1 &lt;- lm(Ozone ~ Temp + Wind, data = air[1:50,]) mod_2 &lt;- lm(Ozone ~ Temp + Wind + temp_wind, air[1:50,]) mod_2 ## ## Call: ## lm(formula = Ozone ~ Temp + Wind + temp_wind, data = air[1:50, ## ]) ## ## Coefficients: ## (Intercept) Temp Wind temp_wind ## -317.8272 4.8036 15.9498 -0.2311 pred_0 &lt;- predict(mod_0, newdata = air[51:116,]) pred_1 &lt;- predict(mod_1, newdata = air[51:116,]) pred_2 &lt;- predict(mod_2, newdata = air[51:116,]) mean(abs(pred_0-air[51:116,&#39;Ozone&#39;])) ## [1] 19.88217 mean(abs(pred_1-air[51:116,&#39;Ozone&#39;])) ## [1] 17.13767 mean(abs(pred_2-air[51:116,&#39;Ozone&#39;])) ## [1] 15.52405 Podemos interpretar el modelo con interacción de la siguiente forma: Si \\(Wind = 5\\), entonces la relación Temperatura &lt;-&gt; Ozono es: \\[ Ozono = -290 + 4.5Temp + 14.6(5) - 0.2(Temp)(5) = -217 + 3.5Temp\\] Si \\(Wind=10\\), entonces la relación Temperatura &lt;-&gt; Ozono es: \\[ Ozono = -290 + 4.5Temp + 14.6(15) - 0.2(Temp)(15) = -71 + 1.5Temp\\] Incluir interacciones en modelos lineales es buena idea para problemas con un número relativamente chico de variables (por ejemplo, \\(p &lt; 10\\)). En estos casos, conviene comenzar agregando interacciones entre variables que tengan efectos relativamente grandes en la predicción. No es tan buena estrategia para un número grande de variables: por ejemplo, para clasificación de dígitos, hay 256 entradas. Poner todas las interacciones añadiría más de 30 mil variables adicionales, y es difícil escoger algunas para incluir en el modelo a priori. Pueden escribirse interacciones en fórmulas de lm y los cálculos se hacen automáticamente: mod_3 &lt;- lm(Ozone ~ Temp + Wind + Temp:Wind, air[1:50,]) mod_3 ## ## Call: ## lm(formula = Ozone ~ Temp + Wind + Temp:Wind, data = air[1:50, ## ]) ## ## Coefficients: ## (Intercept) Temp Wind Temp:Wind ## -317.8272 4.8036 15.9498 -0.2311 Podemos incluir interacciones para pares de variables que son importantes en la predicción, o que por conocimiento del dominio sabemos que son factibles. Conviene usar regularización si necesitamos incluir varias interacciones. Ejemplo En nuestro ejemplo de precios de casas ya habíamos intentado utilizar una interacción, considerando el cociente de dos variables. Aquí veremos una que es importante: la relación entre precio y superficie debe tener interacción con el vecindario, pues distintos vecindarios tienen distintos precios por metro cuadrado: agrupamiento &lt;- casas_e %&gt;% group_by(Neighborhood) %&gt;% summarise(media_ft2 = mean(SalePrice / GrLivArea), n = n()) %&gt;% arrange(desc(media_ft2)) %&gt;% mutate(Neighborhood_grp = ifelse(n &lt; 60, &#39;Other&#39;, Neighborhood)) agrupamiento ## # A tibble: 25 x 4 ## Neighborhood media_ft2 n Neighborhood_grp ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; ## 1 StoneBr 170. 16 Other ## 2 NridgHt 167. 50 Other ## 3 Veenker 155. 8 Other ## 4 Timber 141. 27 Other ## 5 Somerst 141. 61 Somerst ## 6 CollgCr 137. 99 CollgCr ## 7 Blmngtn 135. 13 Other ## 8 NoRidge 132. 32 Other ## 9 ClearCr 126. 20 Other ## 10 Mitchel 126. 34 Other ## # ... with 15 more rows casas_e &lt;- casas_e %&gt;% left_join(agrupamiento) ## Joining, by = &quot;Neighborhood&quot; casas_p &lt;- casas_p %&gt;% left_join(agrupamiento) ## Joining, by = &quot;Neighborhood&quot; En la siguiente gráfica ordenamos la variable Neighborhood_grp de manera que aparecen antes vecindarios más baratos: casas_e$Neighborhood_grp &lt;- reorder(casas_e$Neighborhood_grp, casas_e$media_ft2, mean) ggplot(casas_e, aes(x=GrLivArea, y=SalePrice, colour=Neighborhood_grp, group=Neighborhood_grp)) + geom_jitter(alpha=0.1) + geom_smooth(method=&#39;lm&#39;, se=FALSE, size=1.5) + scale_x_sqrt() + scale_y_sqrt() + scale_colour_manual(values = cbbPalette) Nótese que no solo las curvas se desplazan verticalmente según el vecindario, sino que también su pendiente cambia con el vecindario. Podemos agregar esta interacción a nuestro modelo: mod_6 &lt;- lm(SalePrice ~ OverallQual + I(OverallQual^2) + GrLivArea + TotalBsmtSF + GarageArea + OverallCond + CentralAir + BsmtQual + Neighborhood_grp + Neighborhood_grp:GrLivArea, data = casas_e) calc_error(mod_6, casas_p, &quot;SalePrice&quot;) ## [1] 25027.35 6.5 Categorización de variables En categorización de variable, intentamos hacer un ajuste local en distintas partes del espacio de entrada. La idea es contruir cubetas, particionando el rango de una variable dada, y ajustar entonces un modelo usando la variable dummy indicadora de cada cubeta. dat_wage &lt;- ISLR::Wage ggplot(dat_wage, aes(x=age, y=wage)) + geom_point() Cuando la relación entre entradas y salida no es lineal, podemos obtener menor sesgo en nuestros modelos usando esta técnica. En este ejemplo, escogimos edades de corte aproximadamente separadas por 10 años, por ejemplo: #cuantiles_age &lt;- quantile(dat_wage$age, probs=seq(0,1,0.2)) #cuantiles_age dat_wage &lt;- dat_wage %&gt;% mutate(age_cut = cut(age, c(18, 25, 35, 45, 55, 65, 80), include.lowest=TRUE)) head(dat_wage) ## year age maritl race education region ## 1 2006 18 1. Never Married 1. White 1. &lt; HS Grad 2. Middle Atlantic ## 2 2004 24 1. Never Married 1. White 4. College Grad 2. Middle Atlantic ## 3 2003 45 2. Married 1. White 3. Some College 2. Middle Atlantic ## 4 2003 43 2. Married 3. Asian 4. College Grad 2. Middle Atlantic ## 5 2005 50 4. Divorced 1. White 2. HS Grad 2. Middle Atlantic ## 6 2008 54 2. Married 1. White 4. College Grad 2. Middle Atlantic ## jobclass health health_ins logwage wage age_cut ## 1 1. Industrial 1. &lt;=Good 2. No 4.318063 75.04315 [18,25] ## 2 2. Information 2. &gt;=Very Good 2. No 4.255273 70.47602 [18,25] ## 3 1. Industrial 1. &lt;=Good 1. Yes 4.875061 130.98218 (35,45] ## 4 2. Information 2. &gt;=Very Good 1. Yes 5.041393 154.68529 (35,45] ## 5 2. Information 1. &lt;=Good 1. Yes 4.318063 75.04315 (45,55] ## 6 2. Information 2. &gt;=Very Good 1. Yes 4.845098 127.11574 (45,55] mod_age &lt;- lm(wage ~ age_cut, data=dat_wage) mod_age ## ## Call: ## lm(formula = wage ~ age_cut, data = dat_wage) ## ## Coefficients: ## (Intercept) age_cut(25,35] age_cut(35,45] age_cut(45,55] ## 76.28 27.88 42.79 41.34 ## age_cut(55,65] age_cut(65,80] ## 42.73 26.27 dat_wage$pred_wage &lt;- predict(mod_age) ggplot(dat_wage) + geom_point(aes(x=age, y=wage)) + geom_line(aes(x=age, y=pred_wage), colour = &#39;red&#39;, size=1.1) Podemos escoger los puntos de corte en lugares que son razonables para el problema (rangos en los es razonable modelar como una constante). También podemos hacer cortes automáticos usando percentiles de los datos: por ejemplo, cortar en cuatro usando los percentiles 25%, 50% y 75%. Con más datos es posible incrementar el número de cortes. Nótese que cuando hacemos estas categorizaciones estamos incrementando el número de parámetros a estimar del modelo (si hacemos tres cortes, por ejemplo, aumentamos en 3 el número de parámetros). Las categorizaciones de variables son útiles cuando sabemos que hay efectos no lineales de la variable subyacente (por ejemplo, edad o nivel socioeconómico), y las categorías son suficientemente chicas para que el modelo localmente constante sea razonable. Muchas veces los splines son mejores opciones: 6.6 Splines (opcional) En estos ejemplos, también es posible incluir términos cuadráticos para modelar la relación, por ejemplo: dat_wage$age_2 &lt;- dat_wage$age^2 mod_age &lt;- lm(wage ~ age + age_2, data=dat_wage) mod_age ## ## Call: ## lm(formula = wage ~ age + age_2, data = dat_wage) ## ## Coefficients: ## (Intercept) age age_2 ## -10.42522 5.29403 -0.05301 dat_wage$pred_wage &lt;- predict(mod_age) ggplot(dat_wage) + geom_point(aes(x=age, y=wage)) + geom_line(aes(x=age, y=pred_wage), colour = &#39;red&#39;, size=1.1) Estas dos técnicas para hacer más flexible el modelo lineal tienen algunas deficiencias: Muchas veces usar potencias de variables de entrada es una mala idea, pues fácilmente podemos encontrar problemas numéricos (potencias altas pueden dar valores muy chicos o muy grandes). La categorización de variables numéricas puede resultar en predictores con discontinuidades, lo cual no siempre es deseable (interpretación). Una alternativa es usar splines, que son familias de funciones con buenas propiedades que nos permiten hacer expansiones del espacio de entradas. No las veremos con detalle, pero aquí hay unos ejemplos: Por ejemplo, podemos usar B-spines, que construyen “chipotes” en distintos rangos de la variable de entrada (es como hacer categorización, pero con funciones de respuesta suaves): library(splines2) age &lt;- seq(18,80, 0.2) splines_age &lt;- bSpline(age, knots = c(25, 35, 45, 55, 65), degree = 3) matplot(x = age, y = splines_age, type = &#39;l&#39;) Observación: estos splines son como una versión suave de categorización de variables numéricas. En particular, los splines de grado 0 son justamente funciones que categorizan variables: splines_age &lt;- bSpline(age, knots = c(25, 35, 45, 55, 65), degree = 0) matplot(splines_age, type=&#39;l&#39;) Por ejemplo: si expandimos el espacio de entradas con estos splines y corremos el modelo: dat_wage &lt;- ISLR::Wage splines_age &lt;- bSpline(dat_wage$age, knots = c(25, 35, 45, 65), degree = 3) %&gt;% data.frame colnames(splines_age) &lt;- paste0(&#39;spline_&#39;, 1:6) dat_wage &lt;- bind_cols(dat_wage, splines_age) dat_sp &lt;- dat_wage %&gt;% dplyr::select(wage, contains(&#39;spline&#39;)) head(dat_sp) ## wage spline_1 spline_2 spline_3 spline_4 spline_5 ## 1 75.04315 0.0000000 0.000000000 0.00000000 0.0000000 0.00000000 ## 2 70.47602 0.4555974 0.474260292 0.06722689 0.0000000 0.00000000 ## 3 130.98218 0.0000000 0.000000000 0.33333333 0.5925926 0.07407407 ## 4 154.68529 0.0000000 0.001481481 0.44018519 0.5204074 0.03792593 ## 5 75.04315 0.0000000 0.000000000 0.14062500 0.6272321 0.22704082 ## 6 127.11574 0.0000000 0.000000000 0.05545833 0.5406104 0.37417611 ## spline_6 ## 1 0.000000000 ## 2 0.000000000 ## 3 0.000000000 ## 4 0.000000000 ## 5 0.005102041 ## 6 0.029755102 mod_age &lt;- lm(wage ~. , data=dat_sp) mod_age ## ## Call: ## lm(formula = wage ~ ., data = dat_sp) ## ## Coefficients: ## (Intercept) spline_1 spline_2 spline_3 spline_4 ## 65.044 1.464 27.176 54.472 52.121 ## spline_5 spline_6 ## 58.230 31.771 dat_wage$pred_wage &lt;- predict(mod_age) ggplot(dat_wage) + geom_point(aes(x=age, y=wage)) + geom_line(aes(x=age, y=pred_wage), colour = &#39;red&#39;, size=1.1) O podemos usar i-splines (b-splines integrados), por ejemplo: splines_age &lt;- iSpline(age, knots = c(25, 35, 45, 65), degree = 2) matplot(splines_age, type=&#39;l&#39;) dat_wage &lt;- ISLR::Wage splines_age &lt;- iSpline(dat_wage$age, knots = c(25, 35, 45, 65), degree = 2) %&gt;% data.frame colnames(splines_age) &lt;- paste0(&#39;spline_&#39;, 1:6) dat_wage &lt;- bind_cols(dat_wage, splines_age) dat_sp &lt;- dat_wage %&gt;% dplyr::select(wage, contains(&#39;spline&#39;)) head(dat_sp) ## wage spline_1 spline_2 spline_3 spline_4 spline_5 spline_6 ## 1 75.04315 0.0000000 0.00000000 0.0000000 0.00000000 0.000000000 0 ## 2 70.47602 0.5414872 0.06722689 0.0000000 0.00000000 0.000000000 0 ## 3 130.98218 1.0000000 1.00000000 0.6666667 0.07407407 0.000000000 0 ## 4 154.68529 1.0000000 0.99851852 0.5583333 0.03792593 0.000000000 0 ## 5 75.04315 1.0000000 1.00000000 0.8593750 0.23214286 0.005102041 0 ## 6 127.11574 1.0000000 1.00000000 0.9445417 0.40393122 0.029755102 0 mod_age &lt;- lm(wage ~. , data=dat_sp) mod_age ## ## Call: ## lm(formula = wage ~ ., data = dat_sp) ## ## Coefficients: ## (Intercept) spline_1 spline_2 spline_3 spline_4 ## 64.643 28.331 26.442 -2.510 7.600 ## spline_5 spline_6 ## -31.903 -5.441 dat_wage$pred_wage &lt;- predict(mod_age) ggplot(dat_wage) + geom_point(aes(x=age, y=wage)) + geom_line(aes(x=age, y=pred_wage), colour = &#39;red&#39;, size=1.1) 6.7 Modelando en escala logarítmica En muchos problemas, es natural transformar variables numéricas con el logaritmo. Supongamos por ejemplo que en nuestro problema la variable \\(y\\) es positiva, y también las entradas son positivas. En primer lugar podríamos intentar modelar \\[ y = b_0 + \\sum b_j x_j, \\] pero también podemos transformar las entradas y la salida para construir un modelo multiplicativo: \\(y&#39; = log(y) = b_0 + \\sum b_k \\log(x_j)\\) y ahora queremos predecir el logaritmo de \\(y\\), no \\(y\\) directamente. Esta tipo de transformación tiene dos efectos: Convierte modelos aditivos (regresión lineal) en modelos multiplicativos en las variables no transformadas (pero lineales en escala logarítmica). Esta estructura tiene más sentido para algunos problemas, y es más razonable que la forma lineal aplique para este tipo de problemas. Comprime la parte superior de la escala en relación a la parte baja, y esto es útil para aminorar el efecto de valores atípicos grandes (que puede tener malos efectos numéricos y también pueden producir que los atipicos dominen el error o la estimación de los coeficientes). Ejemplo Consideramos predecir el quilataje de set.seed(22) diamonds_muestra &lt;- sample_n(diamonds, 1000) ggplot(diamonds_muestra, aes(x=carat, y=price)) + geom_point() + geom_smooth(method=&quot;lm&quot;) Nótese que el modelo lineal está sesgado, y produce sobrestimaciones y subestimaciones para distintos valores de \\(x\\). Aunque podríamos utilizar un método más flexible para este modelo, una opción es transformar entrada y salida con logaritmo: diamonds_muestra &lt;- diamonds_muestra %&gt;% mutate(log_price = log(price), log_carat = log(carat)) ggplot(diamonds_muestra, aes(x=log_carat, y=log_price)) + geom_point() + geom_smooth(method = &quot;lm&quot;) Podemos graficar también en unidades originales: ggplot(diamonds_muestra, aes(x=carat, y=price/1000)) + geom_point() + geom_smooth(method = &#39;lm&#39;) + scale_x_log10(breaks=2^seq(-1,5,1)) + scale_y_log10(breaks=2^seq(-2,5,1)) Y vemos que la relación entre los logaritmos es lineal: redujimos el sesgo sin los costos adicionales de varianza que implica agregar más variables e interacciones. En este caso, esta relación es naturalmente multiplicativa (un 10% de incremento relativo en el peso produce un incremento constante en el precio). Cuando una variable toma valores positivos y recorre varios órdenes de magnitud, puede ayudar transformar con logaritmo o raíz cuadrada (esto incluye transformar la variable respuesta). Muchas veces es natural modelar en la escala logarítmica, como en el ejemplo de los diamantes. También tiene utilidad cuando las variables de respuesta o entrada tienen distribuciones muy sesgadas a la derecha (con algunos valores órdenes de magnitud más grandes que la mayoría del grueso de los datos). Tomar logaritmos resulta en mejoras numéricas, y evita que algunos valores atipicos dominen el cálculo del error. Menos común: variables que son proporciones \\(p\\) pueden transformarse mediante la transformación inversa de la logística (\\(x = \\log(\\frac{p}{1-p})\\).) Discusión: En un modelo lineal usual, tenemos que si cambiamos \\(x_j \\to x_j + \\Delta x\\), entonces la predicción \\(y\\) tiene un cambio de \\[\\Delta y = b_j \\Delta x.\\] Es decir, mismos cambios absolutos en alguna variable de entrada produce mismos cambios absolutos en las predicciones, independientemente del nivel de las entradas. Sin embargo, el modelo logarítmico es multiplicativo, pues tomando exponencial de ambos lados, obtenemos: \\[y = B_0\\prod x_j^{b_j}\\] Entonces, si cambiamos \\(x_j \\to x_j + \\Delta x\\), el cambio porcentual en \\(y\\) es \\[ \\frac{y+\\Delta y}{y} = \\left ( \\frac{x_j +\\Delta x}{x_j}\\right )^{b_j}\\] De modo que mismos cambios porcentuales en \\(x\\) resultan en los mismos cambios porcentuales de \\(y\\), independientemente del nivel de las entradas. Adicionalmente, es útil notar que si \\(\\frac{\\Delta x}{x_j}\\) es chica, entonces aproximadamente \\[ \\frac{\\Delta y}{y} \\approx b_j \\frac{\\Delta x}{x_j}\\] Es decir, el cambio relativo en \\(y\\) es proporcional al cambio relativo en \\(x_j\\) para cambios relativamente chicos en \\(x_j\\), y el coeficiente es la constante de proporcionalidad. Ejercicio Puedes repetir el ejercicio de la tarea 6 transformando las variables numéricas con logaritmo (o \\(\\log(1+x)\\) cuando \\(x\\) tiene ceros). Utiliza el mismo error del concurso de kaggle, que es el error cuadrático medio en escala logarítmica (en el concurso, esta es otra razón para usar escala logarítmica en la variable respuesta.) 6.7.1 ¿Cuándo usar estas técnicas? Estas técnicas pueden mejorar considerablemente nuestros modelos lineales, pero a veces puede ser difícil descubrir exactamente que transformaciones pueden ser útiles, y muchas veces requiere conocimiento experto del problema que enfrentamos. En general, Es mejor usar regularización al hacer este tipo de trabajo, para protegernos de varianza alta cuando incluimos varias entradas derivadas. Es buena idea probar incluir interacciones entre variables que tienen efectos grandes en la predicción, o interacciones que creemos son importantes en nuestro problema (por ejemplo, temperatura y viento en nuestro ejemplo de arriba, o existencia de estacionamiento y tráfico vehicular como en nuestro ejemplo de predicción de ventas de una tienda). Gráficas como la de arriba (entrada vs respuesta) pueden ayudarnos a decidir si conviene categorizar alguna variable o añadir un efecto no lineal. Este es un trabajo que no es tan fácil, pero para problema con relativamente pocas variables es factible. En situaciones con muchas variables de entrada y muchos datos, existen mejores opciones. "],
["redes-neuronales-parte-1.html", "Clase 7 Redes neuronales (parte 1) 7.1 Introducción a redes neuronales 7.2 Interacciones en redes neuronales 7.3 Cálculo en redes: feed-forward Notación 7.4 Feed forward 7.5 Backpropagation: cálculo del gradiente (clasificación binaria) 7.6 Ajuste de parámetros (introducción)", " Clase 7 Redes neuronales (parte 1) 7.1 Introducción a redes neuronales En la parte anterior, vimos cómo hacer más flexibles los métodos de regresión: la idea es construir entradas derivadas a partir de las variables originales, e incluirlas en el modelo de regresión. Este enfoque es bueno cuando tenemos relativamente pocas variables originales de entrada, y tenemos una idea de qué variables derivadas es buena idea incluir (por ejemplo, splines para una variable como edad, interacciones para variables importantes, etc). Sin embargo, si hay una gran cantidad de entradas, esta técnica puede ser prohibitiva en términos de cálculo y trabajo manual. Por ejemplo, si tenemos unas 100 entradas numéricas, al crear todas las interacciones \\(x_i x_j\\) y los cuadrados \\(x_i^2\\) terminamos con unas 5150 variables. Para el problema de dígitos (256 entradas o pixeles) terminaríamos con unas 32 mil entradas adicionales. Aún cuando es posible regularizar, en estos casos suena más conveniente construir entradas derivadas a partir de los datos. Para hacer esto, consideramos entradas \\(X_1, . . . , X_p\\), y supongamos que tenemos un problema de clasificación binaria, con \\(G = 1\\) o \\(G = 0\\). Aunque hay muchas maneras de construir entradas derivadas, una manera simple sería construir \\(m\\) nuevas entradas mediante: \\[a_k = h \\left ( \\theta_{k,0} + \\sum_{j=1}^p \\theta_{k,j}x_j \\right)\\] para \\(k=1,\\ldots, m\\), donde \\(h\\) es la función logística, y las \\(\\theta\\) son parámetros que seleccionaremos más tarde. La idea es hacer combinaciones lineales de variables transformadas. Modelamos ahora la probabilidad de clase 1 con regresión logística, pero en lugar de usar las entradas originales X usamos las entradas derivadas \\(a_1, . . . , a_m\\): \\[p_1(x) = h \\left ( \\beta_0 + \\sum_{j=1}^m \\beta_ja_j \\right)\\] Podemos representar este esquema con una red dirigida (\\(m=3\\) variables derivadas): Observaciones: ¿Por qué usar \\(h\\) para las entradas derivadas \\(a_k\\)? En primer lugar, nótese que si no transformamos con alguna función no lineal \\(h\\), el modelo final \\(p_1\\) para la probabilidad condicional es el mismo que el de regresión logística (combinaciones lineales de combinaciones lineales son combinaciones lineales). Sin embargo, al transformar con \\(h\\), las \\(x_j\\) contribuyen de manera no lineal a las entradas derivadas. Las variables \\(a_k\\) que se pueden obtener son similares (para una variable de entrada) a los I-splines que vimos en la parte anterior. Es posible demostrar que si se crean suficientes entradas derivadas (\\(m\\) es suficientemente grande), entonces la función \\(p_1(x)\\) puede aproximar cualquier función continua. La función \\(h\\) (que se llama función de activación no es especial: funciones continuas con forma similar a la sigmoide (logística) pueden usarse también (por ejemplo, arcotangente, o lineal rectificada). La idea es que cualquier función se puede aproximar mediante superposición de funciones tipo sigmoide (ver por ejemplo Cybenko 1989, Approximation by Superpositions of a Sigmoidal Function). ¿Cómo construyen entradas las redes neuronales? Comencemos por un ejemplo simple de clasificación binaria con una sola entrada \\(x\\). Supondremos que el modelo verdadero está dado por: h &lt;- function(x){ 1/(1 + exp(-x)) # es lo mismo que exp(x)/(1 + exp(x)) } x &lt;- seq(-2, 2, 0.1) p &lt;- h(2 - 3 * x^2) #probabilidad condicional de clase 1 (vs. 0) set.seed(2805721) x_1 &lt;- runif(30, -2, 2) g_1 &lt;- rbinom(30, 1, h(2 - 3 * x_1^2)) datos &lt;- data.frame(x_1, g_1) dat_p &lt;- data.frame(x, p) g &lt;- qplot(x, p, geom=&#39;line&#39;, colour=&quot;red&quot;) g + geom_point(data = datos, aes(x = x_1, y = g_1), colour = &#39;red&#39;) donde adicionalmente graficamos 30 datos simulados. Recordamos que queremos ajustar la curva roja, que da la probabilidad condicional de clase. Podríamos ajustar un modelo de regresión logística expandiendo manualmente el espacio de entradas agregando \\(x^2\\), y obtendríamos un ajuste razonable. Pero la idea aquí es que podemos crear entradas derivadas de forma automática. Supongamos entonces que pensamos crear dos entradas \\(a_1\\) y \\(a_2\\), funciones de \\(x_1\\), y luego predecir \\(g.1\\), la clase, en función de estas dos entradas. Por ejemplo, podríamos tomar: donde hacemos una regresión logística para predecir \\(G\\) mediante \\[p_1(a) = h(\\beta_0 + \\beta_1a_1+\\beta_2 a_2),\\] \\(a_1\\) y \\(a_2\\) están dadas por \\[a_1(x)=h(\\beta_{1,0} + \\beta_{1,1} x_1),\\] \\[a_2(x)=h(\\beta_{2,0} + \\beta_{2,1} x_1).\\] Por ejemplo, podríamos tomar a_1 &lt;- h( 1 + 2*x) # 2(x+1/2) a_2 &lt;- h(-1 + 2*x) # 2(x-1/2) # una es una versión desplazada de otra. Las funciones \\(a_1\\) y \\(a_2\\) dependen de \\(x\\) de la siguiente forma: dat_a &lt;- data_frame(x = x, a_1 = a_1, a_2 = a_2) dat_a_2 &lt;- dat_a %&gt;% gather(variable, valor, a_1:a_2) ggplot(dat_a_2, aes(x=x, y=valor, colour=variable, group=variable)) + geom_line() Si las escalamos y sumamos, obtenemos dat_a &lt;- data.frame(x=x, a_1 = -4 + 12 * a_1, a_2 = -12 * a_2, suma = -4 + 12 * a_1 - 12 * a_2) dat_a_2 &lt;- dat_a %&gt;% gather(variable, valor, a_1:suma) ggplot(dat_a_2, aes(x = x, y = valor, colour = variable, group = variable)) + geom_line() y finalmente, aplicando \\(h\\): dat_2 &lt;- data.frame(x, p2 = h(-4 + 12 * a_1 - 12 * a_2)) ggplot(dat_2, aes(x=x, y=p2)) + geom_line()+ geom_line(data=dat_p, aes(x=x,y=p), col=&#39;red&#39;) +ylim(c(0,1))+ geom_point(data = datos, aes(x = x_1, y = g_1)) que da un ajuste razonable. Este es un ejemplo de cómo la mezcla de dos funciones logísticas puede replicar esta función con forma de chipote. ¿Cómo ajustar los parámetros? Para encontrar los mejores parámetros, minimizamos la devianza sobre los parámetros \\(\\beta_0,\\beta_1,\\beta_{1,0},\\beta_{1,1}, \\beta_{2,0},\\beta_{2,1}\\). Veremos más adelante que conviene hacer esto usando descenso o en gradiente o descenso en gradiente estocástico, pero por el momento usamos la función optim de R para minimizar la devianza. En primer lugar, creamos una función que para todas las entradas calcula los valores de salida. En esta función hacemos feed-forward de las entradas a través de la red para calcular la salida. ## esta función calcula los valores de cada nodo en toda la red, ## para cada entrada feed_fow &lt;- function(beta, x){ a_1 &lt;- h(beta[1] + beta[2] * x) # calcula variable 1 de capa oculta a_2 &lt;- h(beta[3] + beta[4] * x) # calcula variable 2 de capa oculta p &lt;- h(beta[5] + beta[6] * a_1 + beta[7] * a_2) # calcula capa de salida p } Nótese que simplemente seguimos el diagrama mostrado arriba para hacer los cálculos, combinando linealmente las entradas en cada capa. Ahora definimos una función para calcular la devianza. Conviene crear una función que crea funciones, para obtener una función que sólo se evalúa en los parámetros para cada conjunto de datos de entrenamiento fijos: devianza_fun &lt;- function(x, y){ # esta función es una fábrica de funciones devianza &lt;- function(beta){ p &lt;- feed_fow(beta, x) - 2 * mean(y*log(p) + (1-y)*log(1-p)) } devianza } Por ejemplo: dev &lt;- devianza_fun(x_1, g_1) # crea función dev ## ahora dev toma solamente los 7 parámetros beta: dev(c(0,0,0,0,0,0,0)) ## [1] 1.386294 Finalmente, optimizamos la devianza. Para esto usaremos la función optim de R: set.seed(5) salida &lt;- optim(rnorm(7), dev, method = &#39;BFGS&#39;) # inicializar al azar punto inicial salida ## $par ## [1] -24.8192568 23.0201169 -8.4364869 -6.7633494 0.9849461 -14.0157655 ## [7] -14.3394673 ## ## $value ## [1] 0.654347 ## ## $counts ## function gradient ## 103 100 ## ## $convergence ## [1] 1 ## ## $message ## NULL beta &lt;- salida$par Y ahora podemos graficar con el vector \\(\\beta\\) encontrado: ## hacer feed forward con beta encontrados p_2 &lt;- feed_fow(beta, x) dat_2 &lt;- data.frame(x, p_2 = p_2) ggplot(dat_2, aes(x = x, y = p_2)) + geom_line()+ geom_line(data = dat_p, aes(x = x, y = p), col=&#39;red&#39;) +ylim(c(0,1))+ geom_point(data = datos, aes(x = x_1, y = g_1)) Los coeficientes estimados, que en este caso muchas veces se llaman pesos, son: beta ## [1] -24.8192568 23.0201169 -8.4364869 -6.7633494 0.9849461 -14.0157655 ## [7] -14.3394673 que parecen ser muy grandes. Igualmente, de la figura vemos que el ajuste no parece ser muy estable (esto se puede confirmar corriendo con distintos conjuntos de entrenamiento). Podemos entonces regularizar ligeramente la devianza para resolver este problema. En primer lugar, definimos la devianza regularizada (ridge), donde penalizamos todos los coeficientes que multiplican a una variable, pero no los intercepts: devianza_reg &lt;- function(x, y, lambda){ # esta función es una fábrica de funciones devianza &lt;- function(beta){ p &lt;- feed_fow(beta, x) # en esta regularizacion quitamos sesgos, pero puede hacerse también con sesgos. - 2 * mean(y*log(p) + (1-y)*log(1-p)) + lambda*sum(beta[-c(1,3,5)]^2) } devianza } dev_r &lt;- devianza_reg(x_1, g_1, 0.001) # crea función dev set.seed(5) salida &lt;- optim(rnorm(7), dev_r, method=&#39;BFGS&#39;) # inicializar al azar punto inicial salida ## $par ## [1] -4.826652 4.107146 -4.845864 -4.561488 1.067216 -5.236453 -5.195981 ## ## $value ## [1] 0.8322745 ## ## $counts ## function gradient ## 102 100 ## ## $convergence ## [1] 1 ## ## $message ## NULL beta &lt;- salida$par dev(beta) ## [1] 0.74018 p_2 &lt;- feed_fow(beta, x) dat_2 &lt;- data.frame(x, p_2 = p_2) ggplot(dat_2, aes(x = x, y = p_2)) + geom_line()+ geom_line(data = dat_p, aes(x = x, y = p), col=&#39;red&#39;) +ylim(c(0,1))+ geom_point(data = datos, aes(x = x_1, y = g_1)) y obtenemos un ajuste mucho más estable. Podemos también usar la función nnet del paquete nnet. Ojo: en nnet, el error es la devianza no está normalizada por número de casos y dividida entre dos: library(nnet) set.seed(12) nn &lt;- nnet(g_1 ~ x_1, data = datos, size = 2, decay = 0.0, entropy = T) ## # weights: 7 ## initial value 19.318858 ## iter 10 value 11.967705 ## iter 20 value 10.251964 ## iter 30 value 9.647707 ## iter 40 value 9.573030 ## iter 50 value 9.569389 ## iter 60 value 9.555125 ## iter 70 value 9.546210 ## iter 80 value 9.544512 ## iter 90 value 9.539825 ## iter 100 value 9.535977 ## final value 9.535977 ## stopped after 100 iterations nn$wts ## [1] -51.274012 48.789640 8.764849 6.219901 -29.155181 -24.998108 ## [7] 30.125349 nn$value ## [1] 9.535977 2*nn$value/30 ## [1] 0.6357318 dev(nn$wts) ## [1] 0.6357318 qplot(x, predict(nn, newdata=data.frame(x_1 = x)), geom=&#39;line&#39;) 7.1.0.1 Ejercicio Un ejemplo más complejo. Utiliza los siguientes datos, y agrega si es necesario variables derivadas \\(a_3, a_4\\) en la capa oculta. h &lt;- function(x){ exp(x)/(1 + exp(x)) } x &lt;- seq(-2,2,0.05) p &lt;- h(3 + x- 3 * x ^ 2 + 3 * cos(4 * x)) set.seed(280572) x.2 &lt;- runif(300, -2, 2) g.2 &lt;- rbinom(300, 1, h(3 + x.2 - 3 * x.2 ^ 2 + 3 * cos(4 * x.2))) datos &lt;- data.frame(x.2,g.2) dat.p &lt;- data.frame(x,p) g &lt;- qplot(x,p, geom=&#39;line&#39;, col=&#39;red&#39;) g + geom_jitter(data = datos, aes(x=x.2,y=g.2), col =&#39;black&#39;, position =position_jitter(height=0.05), alpha=0.4) 7.2 Interacciones en redes neuronales Es posible capturar interacciones con redes neuronales. Consideremos el siguiente ejemplo simple: p &lt;- function(x1, x2){ h(-5 + 10*x1 + 10*x2 - 30*x1*x2) } dat &lt;- expand.grid(x1 = seq(0, 1, 0.05), x2 = seq(0, 1, 0.05)) dat &lt;- dat %&gt;% mutate(p = p(x1, x2)) ggplot(dat, aes(x=x1, y=x2)) + geom_tile(aes(fill=p)) Esta función puede entenderse como un o exclusivo: la probabilidad es alta sólo cuando \\(x_1\\) y \\(x_2\\) tienen valores opuestos (\\(x_1\\) grande pero \\(x_2\\) chica y viceversa). No es posible modelar esta función mediante el modelo logístico (sin interacciones). Pero podemos incluir la interacción en el modelo logístico o intentar usar una red neuronal. Primero simulamos unos datos y probamos el modelo logístico con y sin interacciones: set.seed(322) n &lt;- 500 dat_ent &lt;- data_frame(x1=runif(n,0,1), x2 = runif(n, 0, 1)) %&gt;% mutate(p = p(x1, x2)) %&gt;% mutate(y = rbinom(n, 1, p)) mod_1 &lt;- glm(y ~ x1 + x2, data = dat_ent, family = &#39;binomial&#39;) mod_1 ## ## Call: glm(formula = y ~ x1 + x2, family = &quot;binomial&quot;, data = dat_ent) ## ## Coefficients: ## (Intercept) x1 x2 ## -0.01011 -1.47942 -1.19196 ## ## Degrees of Freedom: 499 Total (i.e. Null); 497 Residual ## Null Deviance: 529.4 ## Residual Deviance: 504.5 AIC: 510.5 table(predict(mod_1) &gt; 0.5, dat_ent$y) ## ## 0 1 ## FALSE 389 111 mod_2 &lt;- glm(y ~ x1 + x2 + x1:x2, data = dat_ent, family = &#39;binomial&#39;) mod_2 ## ## Call: glm(formula = y ~ x1 + x2 + x1:x2, family = &quot;binomial&quot;, data = dat_ent) ## ## Coefficients: ## (Intercept) x1 x2 x1:x2 ## -4.726 9.641 9.831 -32.466 ## ## Degrees of Freedom: 499 Total (i.e. Null); 496 Residual ## Null Deviance: 529.4 ## Residual Deviance: 305.6 AIC: 313.6 table(predict(mod_2) &gt; 0.5, dat_ent$y) ## ## 0 1 ## FALSE 374 60 ## TRUE 15 51 Observese la gran diferencia de devianza entre los dos modelos (en este caso, el sobreajuste no es un problema). Ahora consideramos qué red neuronal puede ser apropiada. set.seed(11) nn &lt;- nnet(y ~ x1 + x2, data = dat_ent, size = 3, decay = 0.001, entropy = T, maxit = 500) ## # weights: 13 ## initial value 294.186925 ## iter 10 value 233.560013 ## iter 20 value 195.096851 ## iter 30 value 190.466423 ## iter 40 value 184.454612 ## iter 50 value 170.767082 ## iter 60 value 156.347417 ## iter 70 value 153.521658 ## iter 80 value 153.069566 ## iter 90 value 152.852374 ## iter 100 value 152.835812 ## iter 110 value 152.826924 ## iter 120 value 152.825819 ## final value 152.825815 ## converged #primera capa matrix(round(nn$wts[1:9], 1), 3,3, byrow=T) ## [,1] [,2] [,3] ## [1,] -2.2 3.0 -2.4 ## [2,] -8.2 5.9 8.7 ## [3,] -2.7 -1.6 3.6 #segunda capa round(nn$wts[10:13], 1) ## [1] -5.7 15.1 -8.6 19.8 #2*nn$value El cálculo de esta red es: feed_fow &lt;- function(beta, x){ a_1 &lt;- h(beta[1] + beta[2]*x[1] + beta[3]*x[2]) a_2 &lt;- h(beta[4] + beta[5]*x[1] + beta[6]*x[2]) a_3 &lt;- h(beta[7] + beta[8]*x[1] + beta[9]*x[2]) p &lt;- h(beta[10]+beta[11]*a_1 + beta[12]*a_2 + beta[13]*a_3) # calcula capa de salida p } Y vemos que esta red captura la interacción: feed_fow(nn$wts, c(0,0)) ## [1] 0.04946031 feed_fow(nn$wts, c(0,1)) ## [1] 0.9560235 feed_fow(nn$wts, c(1,0)) ## [1] 0.9830594 feed_fow(nn$wts, c(1,1)) ## [1] 0.004197137 dat &lt;- dat %&gt;% rowwise %&gt;% mutate(p_red = feed_fow(nn$wts, c(x1, x2))) ggplot(dat, aes(x=x1, y=x2)) + geom_tile(aes(fill=p_red)) Observación: ¿cómo funciona esta red? Consideremos la capa intermedia. dat_entrada &lt;- data_frame(x_1 = c(0,0,1,1), x_2 = c(0,1,0,1)) a_1 &lt;- dat_entrada %&gt;% rowwise() %&gt;% mutate(a_1 = h(sum(nn$wts[1:3] * c(1,x_1,x_2) ))) a_2 &lt;- dat_entrada %&gt;% rowwise() %&gt;% mutate(a_2 = h(sum(nn$wts[4:6] * c(1,x_1,x_2) ))) a_3 &lt;- dat_entrada %&gt;% rowwise() %&gt;% mutate(a_3 = h(sum(nn$wts[7:9] * c(1,x_1,x_2) ))) capa_intermedia &lt;- left_join(a_1, a_2) %&gt;% left_join(a_3) ## Joining, by = c(&quot;x_1&quot;, &quot;x_2&quot;) ## Joining, by = c(&quot;x_1&quot;, &quot;x_2&quot;) a_1 ## Source: local data frame [4 x 3] ## Groups: &lt;by row&gt; ## ## # A tibble: 4 x 3 ## x_1 x_2 a_1 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0 0.102 ## 2 0 1 0.0101 ## 3 1 0 0.686 ## 4 1 1 0.164 a_3 ## Source: local data frame [4 x 3] ## Groups: &lt;by row&gt; ## ## # A tibble: 4 x 3 ## x_1 x_2 a_3 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0 0.0629 ## 2 0 1 0.709 ## 3 1 0 0.0130 ## 4 1 1 0.324 a_2 ## Source: local data frame [4 x 3] ## Groups: &lt;by row&gt; ## ## # A tibble: 4 x 3 ## x_1 x_2 a_2 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0 0.000284 ## 2 0 1 0.621 ## 3 1 0 0.0960 ## 4 1 1 0.998 Y observamos que las unidades \\(a_1\\) y \\(a_3\\) tienen valor alto cuando las variables \\(x_1\\) y \\(x_2\\), correspondientemente, tienen valores altos. La unidad \\(a_2\\) responde cuando tanto como \\(x_1\\)y \\(x_2\\) tienen valores altos. En la capa final, le damos peso relativamente alto a las unidades \\(a_1\\) y \\(a_3\\), y peso negativo a la unidad \\(a_2\\) nn$wts[10:13] ## [1] -5.747250 15.138708 -8.628917 19.801144 capa_final &lt;- capa_intermedia %&gt;% rowwise() %&gt;% mutate(p= h(sum(nn$wts[10:13]*c(1,a_1,a_2,a_3) ))) %&gt;% mutate(p=round(p,2)) capa_final ## Source: local data frame [4 x 6] ## Groups: &lt;by row&gt; ## ## # A tibble: 4 x 6 ## x_1 x_2 a_1 a_2 a_3 p ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0 0.102 0.000284 0.0629 0.05 ## 2 0 1 0.0101 0.621 0.709 0.96 ## 3 1 0 0.686 0.0960 0.0130 0.98 ## 4 1 1 0.164 0.998 0.324 0 7.3 Cálculo en redes: feed-forward Ahora generalizamos lo que vimos arriba para definir la arquitectura básica de redes neuronales y cómo se hacen cálculos en las redes. A las variables originales les llamamos capa de entrada de la red, y a la variable de salida capa de salida. Puede haber más de una capa intermedia. A estas les llamamos capas ocultas. Cuando todas las conexiones posibles de cada capa a la siguiente están presente, decimos que la red es completamente conexa. Como vimos en el ejemplo de arriba, para hacer cálculos en la red empezamos con la primera capa, hacemos combinaciones lineales y aplicamos nuestra función no lineal \\(h\\). Una vez que calculamos la segunda capa, podemos calcular la siguiente de la misma forma: combinaciones lineales y aplicación de \\(h\\). Y así sucesivamente hasta que llegamos a la capa final. Notación Sea \\(L\\) el número total de capas. En primer lugar, para un cierto caso de entrada \\(x = (x_1,x_2,\\ldots, x_p)\\), denotamos por: \\(a^{(l)}_j\\) el valor que toma la unidad \\(j\\) de la capa \\(l\\), para \\(j=0,1,\\ldots, n_{l}\\), donde \\(n_l\\) es el número de unidades de la capa \\(l\\). Ponemos \\(a^{(l)}_0=1\\) para lidiar con los sesgos. En particular, ponemos \\(a^{(1)}_j = x_j\\), que son los valores de las entradas (primera capa) Para clasificación binaria, la última capa solo tiene un elemento, que es \\(p_1 = a^{(L)}\\). Para un problema de clasificación en \\(K&gt;2\\) clases, tenemos que la última capa es de tamaño \\(K\\): \\(p_1 = a^{(L)}_1, p_2 = a^{(L)}_2,\\ldots, p_K = a^{(L)}_K\\) Adicionalmente, escribimos \\(\\theta_{i,k}^{(l)}=\\) es el peso de entrada \\(a_{k}^{(l-1)}\\) de capa \\(l-1\\) en la entrada \\(a_{i}^{(l)}\\) de la capa \\(l\\). Los sesgos están dados por \\[\\theta_{i,0}^{(l)}\\] Ejemplo En nuestro ejemplo, tenemos que en la capa \\(l=3\\) hay dos unidades. Así que podemos calcular los valores \\(a^{(3)}_1\\) y \\(a^{(3)}_2\\). Están dados por \\[a_1^{(3)} = h(\\theta_{1,0}^{(2)} + \\theta_{1,1}^{(2)} a_1^{(2)}+ \\theta_{1,2}^{(2)}a_2^{(2)}+ \\theta_{1,3}^{(2)} a_3^{(2)})\\] \\[a_2^{(3)} = h(\\theta_{2,0}^{(2)} + \\theta_{2,1}^{(2)} a_1^{(2)}+ \\theta_{2,2}^{(2)}a_2^{(2)}+ \\theta_{2,3}^{(2)} a_3^{(2)})\\] Como se ilustra en la siguiente gráfica: Para visualizar las ordenadas (que también se llaman sesgos en este contexto), ponemos \\(a_{0}^{(2)}=1\\). Ejemplo Consideremos propagar a la capa 3 a partir de la capa 2. Usaremos los siguientes pesos para capa 3 y valores de la capa 2 (en gris están los sesgos): Que en nuestra notación escribimos como \\[a^{(2)}_0 = 1, a^{(2)}_1 = -2, a^{(2)}_2 = 5, a^{(2)}=3\\] y los pesos son, para la primera unidad: \\[\\theta^{(2)}_{1,0} = 3, \\,\\,\\, \\theta^{(2)}_{1,1} = 1.5,\\,\\,\\,\\theta^{(2)}_{1,2} = -1,\\,\\,\\theta^{(2)}_{1,3} = -0.5 \\] y para la segunda unidad \\[\\theta^{(2)}_{2,0} = 1, \\,\\,\\, \\theta^{(2)}_{2,1} = 2,\\,\\,\\,\\theta^{(2)}_{2,2} = 0.5,\\,\\, \\theta^{(2)}_{2,3} = -0.2\\] Y ahora queremos calcular los valores que toman las unidades de la capa 3, que son \\(a^{(3)}_1\\) y \\(a^{(3)}_2\\)$ Para hacer feed forward a la siguiente capa, hacemos entonces \\[a^{(3)}_1 = h(3 + a^{(2)}_1 - a^{(2)}_2 -0.5 a_3^{(2)}),\\] \\[a^{(3)}_2 = h(1 + 2a^{(2)}_1 + 0.5a^{(2)}_2 - 0.2 a_3^{(2)}),\\] Ponemos los pesos y valores de la capa 2 (incluyendo sesgo): a_2 &lt;- c(1, -2, 5, 3) # ponemos un 1 al principio para el sesgo theta_2_1 = c(3, 1.5, -1.0, -0.5) theta_2_2 = c(1, 2, 0.5, -0.2) y calculamos a_3 &lt;- c(1, h(sum(theta_2_1*a_2)),h(sum(theta_2_2*a_2))) # ponemos un 1 al principio a_3 ## [1] 1.000000000 0.001501182 0.249739894 7.4 Feed forward Para calcular los valores de salida de una red a partir de pesos y datos de entrada, usamos el algoritmo feed-forward, calculando capa por capa. Cálculo en redes: Feed-forward Para la primera capa, escribimos las variables de entrada: \\[a^{(1)}_j = x_j, j=1\\ldots,n_1\\] Para la primera capa oculta, o la segunda capa \\[a^{(2)}_j = h\\left( \\theta_{j,0}^{(1)}+ \\sum_{k=1}^{n_1} \\theta_{j,k}^{(1)} a^{(1)}_k \\right), j=1\\ldots,n_2\\] para la \\(l\\)-ésima capa: \\[a^{(l)}_j = h\\left( \\theta_{j,0}^{(l-1)}+ \\sum_{k=1}^{n_{l-1}} \\theta_{j,k}^{(l-1)} a^{(l-1)}_k \\right), j=1\\ldots,n_{l}\\] y así sucesivamente. Para la capa final o capa de salida (para problema binario), suponiendo que tenemos \\(L\\) capas (\\(L-2\\) capas ocultas): \\[p_1 = h\\left( \\theta_{1,0}^{(L-1)}+ \\sum_{k=1}^{n_{L-1}} \\theta_{1,k}^{(L-1)} a^{(L-1)}_k \\right).\\] Nótese que entonces: Cada capa se caracteriza por el conjunto de parámetros \\(\\Theta^{(l)}\\), que es una matriz de \\(n_l\\times n_{l-1}\\). La red completa entonces se caracteriza por: La estructura elegida (número de capas ocultas y número de nodos en cada capa oculta). Las matrices de pesos en cada capa \\(\\Theta^{(1)},\\Theta^{(2)},\\ldots, \\Theta^{(L-1)}\\) Adicionalmente, escribimos en forma vectorial: \\[a^{(l)} = (a^{(l)}_0, a^{(l)}_1, a^{(l)}_2, \\ldots, a^{(l)}_{n_l})^t\\] Para calcular la salidas, igual que hicimos, antes, propagaremos hacia adelante los valores de las variables de entrada usando los pesos. Agregando entradas adicionales en cada capa \\(a_0^{(l)}\\), \\(l=1,2,\\ldots, L-1\\), donde \\(a_0^{l}=1\\), y agregando a \\(\\Theta^{(l)}\\) una columna con las ordenadas al origen (o sesgos) podemos escribir: Feed-forward(matricial) Capa 1 (vector de entradas) \\[ a^{(1)} = x\\] Capa 2 \\[ a^{(2)} = h(\\Theta^{(1)}a^{(1)})\\] Capa \\(l\\) (oculta) \\[ a^{(l)} = h(\\Theta^{(l-1)}a^{(l-1)})\\] Capa de salida: En un problema de clasificación binaria, la capa de salida se calcula como en regresión logística: \\[a^{(L)}= p = h(\\Theta^{(L-1)}a^{(L-1)})\\] donde \\(h\\) se aplica componente a componente sobre los vectores correspondientes. Nótese que feed-foward consiste principalmente de multiplicaciones de matrices con algunas aplicaciones de \\(h\\) Para un problema de regresión, la última capa se calcula como en regresión lineal: \\[a^{(L)} = p = \\Theta^{(L-1)}a^{(L-1)}\\] 7.5 Backpropagation: cálculo del gradiente (clasificación binaria) Más adelante, para ajustar los pesos y sesgos de las redes (valores \\(\\theta\\)), utilizaremos descenso en gradiente y otros algoritmos derivados del gradiente (descenso estocástico). En esta parte entonces veremos cómo calcular estos gradientes con el algoritmo de back-propagation, que es una aplicación de la regla de la cadena para derivar. Back-propagation resulta en una fórmula recursiva donde propagamos errores de la red como gradientes desde el final de red (capa de salida) hasta el principio, capa por capa. Consideramos el problema de clasificación binaria Recordamos la devianza (con regularización ridge) es \\[D = -\\frac{2}{n}\\sum_{i=1}^n y_i\\log(p_1(x_i)) +(1-y_i)\\log(1-p_1(x_i)) + \\lambda \\sum_{l=2}^{L} \\sum_{k=1}^{n_{l-1}} \\sum_{j=1}^{n_l}(\\theta_{j,k}^{(l)})^2.\\] Queremos entonces calcular las derivadas de la devianza con respecto a cada parámetro \\(\\theta_{j,k}^{(l)}\\). Esto nos proporciona el gradiente para nuestro algoritmo de descenso. Consideramos aquí el problema de clasificación binaria con devianza como función de pérdida, y sin regularización. La parte de la parcial que corresponde al término de regularización es fácil de agregar al final. Recordamos también nuestra notación para la función logística (o sigmoide): \\[h(z)=\\frac{1}{1+e^{-z}}.\\] Necesitaremos su derivada, que está dada por (cálculala): \\[h&#39;(z) = h(z)(1-h(z))\\] 7.5.1 Cálculo para un caso de entrenamiento Como hicimos en regresión logística, primero simplificamos el problema y consideramos calcular las parciales para un solo caso de entrenamiento \\((x,y)\\): \\[ D= -\\left ( y\\log (p_1(x)) + (1-y)\\log (1-p_1(x))\\right) . \\] Después sumaremos sobre toda la muestra de entrenamiento. Entonces queremos calcular \\[\\frac{\\partial D}{\\partial \\theta_{j,k}^{(l)}}\\] Y escribiremos, con la notación de arriba, \\[a^{(l+1)}_j = h(z^{(l+1)}_j)\\] donde \\[z^{(l+1)} = \\Theta^{(l)} a^{(l)},\\] que coordenada a coordenada se escribe como \\[z^{(l+1)}_j = \\sum_{k=0}^{n_{l}} \\theta_{j,k}^{(l)} a^{(l)}_k\\] Paso 1: Derivar respecto a capa \\(l+1\\) Como los valores de cada capa determinan los valores de salida y la devianza, podemos escribir (recordemos que \\(a_0^{(l)}=1\\) es constante): \\[D=D(a_0^{(l+1)},a_1^{(l+1)},a_2^{(l+1)},\\ldots, a_{n_{l+1}}^{(l+1)})=D(a_1^{(l+1)},a_2^{(l+1)},\\ldots, a_{n_{l+1}}^{(l+1)})\\] Así que por la regla de la cadena para varias variables: \\[\\frac{\\partial D}{\\partial \\theta_{j,k}^{(l)}} = \\sum_{t=1}^{n_{l}} \\frac{\\partial D}{\\partial a_t^{(l+1)}}\\frac{\\partial a_t^{(l+1)}} {\\partial \\theta_{j,k}^{(l)} }\\] Pero si vemos dónde aparece \\(\\theta_{j,k}^{(l)}\\) en la gráfica de la red: \\[ \\cdots a^{(l)}_k \\xrightarrow{\\theta_{j,k}^{(l)}} a^{(l+1)}_j \\cdots \\rightarrow D\\] Entonces podemos concluir que \\(\\frac{\\partial a_t^{(l+1)}}{\\partial \\theta_{j,k}^{(l)}} =0\\) cuando \\(t\\neq j\\) (pues no dependen de \\(\\theta_{j,k}^{(l)}\\)), y entonces, para toda \\(j=1,2,\\ldots, n_{l+1}, k=0,1,\\ldots, n_{l}\\) \\[\\begin{equation} \\frac{\\partial D}{\\partial \\theta_{j,k}^{(l)}} = \\frac{\\partial D}{\\partial a_j^{(l+1)}}\\frac{\\partial a_j^{(l+1)}}{\\partial \\theta_{j,k}^{(l)} } . \\tag{7.1} \\end{equation}\\] Adicionalmente, como \\[a_j^{(l+1)} = h(z_j^{(l+1)}) = h\\left (\\sum_{k=0}^{n_{l}} \\theta_{j,k}^{(l)} a^{(l)}_k \\right )\\] y las \\(a_k^{(l)}\\) no dependen de \\(\\theta_{j,k}^{(l)}\\), tenemos por la regla de la cadena que \\[\\begin{equation} \\frac{\\partial a_j^{(l+1)}}{\\partial \\theta_{j,k}^{(l)} } = h&#39;(z_j^{(l+1)})a_k^{(l)}. \\end{equation}\\] Esta última expresión podemos calcularla pues sólo requiere la derivada de \\(h\\) y los valores otenidos en el paso de feed-forward. Paso 2: Obtener fórmula recursiva Así que sólo nos queda calcular las parciales (\\(j = 1,\\ldots, n_l\\)) \\[\\frac{\\partial D}{\\partial a_j^{(l)}}\\] Para obtener una fórmula recursiva para esta cantidad (hacia atrás), aplicamos otra vez regla de la cadena, pero con respecto a la capa \\(l\\) (ojo: queremos obtener una fórmula recursiva!): \\[\\frac{\\partial D}{\\partial a_j^{(l)}}= \\sum_{s=1}^{n_{l+1}} \\frac{\\partial D}{\\partial a_s^{(l+1)}}\\frac{\\partial a_s^{(l+1)}}{\\partial a_j^{(l)}},\\] que se puede entender a partir de este diagrama: Nótese que la suma empieza en \\(s=1\\), no en \\(s=0\\), pues \\(a_0^{(l+1)}\\) no depende de \\(a_k^{(l)}\\). En este caso los elementos de la suma no se anulan necesariamente. Primero consideramos la derivada de: \\[\\frac{\\partial a_s^{(l+1)}}{\\partial a_j^{(l)}}=h&#39;(z_s^{(l+1)})\\theta_{s,j}^{(l)},\\] de modo que \\[\\frac{\\partial D}{\\partial a_j^{(l)}}= \\sum_{s=1}^{n_l} \\frac{\\partial D}{\\partial a_s^{(l+1)}} h&#39;(z_s^{(l+1)})\\theta_{s,j}^{(l)}.\\] Nótese que esto nos da una fórmula recursiva para las parciales que nos falta calcular (de \\(D\\) con respecto a \\(a\\)), pues las otras cantidades las conocemos por backpropagation. Paso 3: Simplificación de la recursión \\[\\begin{equation} \\delta_s^{ (l+1)}=\\frac{\\partial D}{\\partial a_s^{(l+1)}} h&#39;(z_s^{(l+1)}) \\tag{7.2} \\end{equation}\\] de manera que la ecuación recursiva es \\[\\begin{equation} \\frac{\\partial D}{\\partial a_j^{(l)}} = \\sum_{s=1}^{n_{l+1}} \\delta_s^{(l+1)}\\theta_{s,j}^{(l)}. \\tag{7.3} \\end{equation}\\] Tenemos que si \\(l=2,\\ldots,L-1\\), entonces podemos escribir (usando (7.3)) como fórmula recursiva: \\[\\begin{equation} \\delta_j^{(l)} = \\left (\\sum_{s=1}^{n_l} \\delta_s^{(l+1)} \\theta_{s,j}^{(l)}\\right ) h&#39;(z_j^{(l)}), \\tag{7.4} \\end{equation}\\] para \\(j=1,2,\\ldots, n_{l}\\). Paso 4: Condiciones inciales Para la última capa, tenemos que (demostrar!) \\[\\delta_1^{(L)}=p - y.\\] Paso 5: Cálculo de parciales Finalmente, usando (7.1) y (7.2) , obtenemos \\[\\frac{\\partial D}{\\partial \\theta_{j,k}^{(l)}} = \\delta_j^{(l+1)}a_k^{(l)},\\] y con esto ya podemos hacer backpropagation para calcular el gradiente sobre cada caso de entrenamiento, y solo resta acumular para obtener el gradiente sobre la muestra de entrenamiento. Muchas veces es útil escribir una versión vectorizada (importante para implementar): Paso 6: Versión matricial Ahora podemos escribir estas ecuaciones en forma vectorial. En primer lugar, \\[\\delta^{(L)}=p-y.\\] Y además se puede ver de la ecuación (7.4) que (\\(\\Theta_{*}^{(l+1)}\\) denota la matriz de pesos sin la columna correspondiente al sesgo): \\[\\begin{equation} \\delta^{(l)}=\\left( \\Theta_{*}^{(l)} \\right)^t\\delta^{(l+1)} \\circ h&#39;(z^{(l)}) \\tag{7.5} \\end{equation}\\] donde \\(\\circ\\) denota el producto componente a componente. Ahora todo ya está calculado. Lo interesante es que las \\(\\delta^{(l)}\\) se calculan de manera recursiva. 7.5.2 Algoritmo de backpropagation Backpropagation Para problema de clasificación con regularización $ 0 $. Para \\(i=1,\\ldots, N,\\) tomamos el dato de entrenamiento \\((x^{(i)}, y^{(i)})\\) y hacemos: Ponemos \\(a^{(1)}=x^{(i)}\\) (vector de entradas, incluyendo 1). Calculamos \\(a^{(2)},a^{(3)},\\ldots, a^{(L)}\\) usando feed forward para la entrada \\(x^{(i)}.\\) Calculamos \\(\\delta^{(L)}=a^{(L)}-y^{(i)}\\), y luego \\(\\delta^{(L-1)},\\ldots, \\delta^{(2)}\\) según la recursión (7.4). Acumulamos \\(\\Delta_{j,k}^{(l)}=\\Delta_{j,k}^{(l)} + \\delta_j^{(l+1)}a_k^{(l)}\\). Finalmente, ponemos, si \\(k\\neq 0\\), \\[D_{j,k}^{(l)} = \\frac{2}{N}\\Delta_{j,k}^{(l)} + 2\\lambda\\theta_{j,k}^{(l)}\\] y si \\(k=0\\), \\[D_{j,k}^{(l)} = \\frac{2}{N}\\Delta_{j,k}^{(l)} .\\] Entonces: \\[D_{j,k}^{(l)} =\\frac{\\partial D}{\\partial \\theta_{j,k}^{(l)}}.\\] Nótese que back-propagation consiste principalmente de mutliplicaciones de matrices con algunas aplicaciones de \\(h\\) y acumulaciones, igual que feed-forward. 7.6 Ajuste de parámetros (introducción) Consideramos la versión con regularización ridge (también llamada L2) de la devianza de entrenamiento como nuestro función objetivo: Ajuste de redes neuronales Para un problema de clasificación binaria con \\(y_i=0\\) o \\(y_i=1\\), ajustamos los pesos \\(\\Theta^{(1)},\\Theta^{(2)},\\ldots, \\Theta^{(L)}\\) de la red minimizando la devianza (penalizada) sobre la muestra de entrenamiento: \\[D = -\\frac{2}{n}\\sum_{i=1}^n y_i\\log(p_1(x_i)) +(1-y_i)\\log(1-p_1(x_i)) + \\lambda \\sum_{l=2}^{L} \\sum_{k=1}^{n_{l-1}} \\sum_{j=1}^{n_l}(\\theta_{j,k}^{(l)})^2.\\] Este problema en general no es convexo y puede tener múltiples mínimos. Veremos el proceso de ajuste, selección de arquitectura, etc. más adelante. Por el momento hacemos unas observaciones acerca de este problema de minimización: Hay varios algoritmos para minimizar esta devianza, algunos avanzados incluyendo información de segundo orden (como Newton), pero actualmente las técnicas más populares, para redes grandes, están derivadas de descenso en gradiente. Más específicamente, una variación, que es descenso estocástico. Que el algoritmo depende principalmente de multiplicaciones de matrices y acumulaciones implica que puede escalarse de diversas maneras. Una es paralelizando sobre la muestra de entrenamiento (y acumular acumulados al final), pero también se puede paralelizar la de multiplicaciones de matrices (para lo cual los GPUs se prestan muy bien). Para redes neuronales, el gradiente se calcula con un algoritmo que se llama back-propagation, que es una aplicación de la regla de la cadena para propagar errores desde la capa de salida a lo largo de todas las capas para ajustar los pesos y sesgos. En estos problemas no buscamos el mínimo global, sino un mínimo local de buen desempeño. Puede haber múltiples mínimos, puntos silla, regiones relativamente planas, precipicios (curvatura alta). Todo esto dificulta el entrenamiento de redes neuronales grandes. Para redes grandes, ni siquiera esperamos a alcanzar un mínimo local, sino que nos detenemos prematuramente cuando obtenemos el mejor desempeño posible. Nótese que la simetría implica que podemos obtener la misma red cambiando pesos entre neuronas y las conexiones correspondientes. Esto implica que necesariamente hay varios mínimos. Para este problema, no tiene sentido comenzar las iteraciones con todos los pesos igual a cero, pues las unidades de la red son simétricas: no hay nada que distinga una de otra si todos los pesos son iguales. Esto quiere decir que si iteramos, ¡todas las neuronas van a aprender lo mismo! Es importante no comenzar valores de los pesos grandes, pues las funciones logísticas pueden quedar en regiones planas donde la minimización es lenta, o podemos tener gradientes demasiado grandes y produzcan inestabilidad en el cálculo del gradiente. Generalmente los pesos se inicializan al azar con variables independientes gaussianas o uniformes centradas en cero, y con varianza chica (por ejemplo \\(U(-0.5,0.5)\\)). Una recomendación es usar \\(U(-1/\\sqrt{m}, 1/\\sqrt{m})\\) donde \\(m\\) es el número de entradas. En general, hay que experimentar con este parámetro. El proceso para ajustar una red es entonces: Definir número de capas ocultas, número de neuronas por cada capa, y un valor del parámetro de regularización. Estandarizar las entradas. Seleccionar parámetros al azar para \\(\\Theta^{(2)},\\Theta^{(3)},\\ldots, \\Theta^{(L)}\\). Se toman, por ejemplo, normales con media 0 y varianza chica. Correr un algoritmo de minimización de la devianza mostrada arriba. Verificar convergencia del algoritmo a un mínimo local (o el algoritmo no está mejorando). Predecir usando el modelo ajustado. Finalmente, podemos probar distintas arquitecturas y valores del parámetros de regularización, para afinar estos parámetros según validación cruzada o una muestra de validación. 7.6.1 Ejemplo Consideramos una arquitectura de dos capas para el problema de diabetes library(keras) ## ## Attaching package: &#39;keras&#39; ## The following objects are masked from &#39;package:igraph&#39;: ## ## %&lt;-%, normalize Escalamos y preparamos los datos: diabetes_ent &lt;- MASS::Pima.tr diabetes_pr &lt;- MASS::Pima.te x_ent &lt;- diabetes_ent %&gt;% select(-type) %&gt;% as.matrix x_ent_s &lt;- scale(x_ent) x_valid &lt;- diabetes_pr %&gt;% select(-type) %&gt;% as.matrix x_valid_s &lt;- x_valid %&gt;% scale(center = attr(x_ent_s, &#39;scaled:center&#39;), scale = attr(x_ent_s, &#39;scaled:scale&#39;)) y_ent &lt;- as.numeric(diabetes_ent$type == &#39;Yes&#39;) y_valid &lt;- as.numeric(diabetes_pr$type == &#39;Yes&#39;) Para definir la arquitectura de dos capas con: 10 unidades en cada capa función de activación sigmoide, regularización L2 (ridge), salida logística (\\(p_1\\)), escribimos: set.seed(923) modelo_tc &lt;- keras_model_sequential() # no es necesario asignar a nuevo objeto, modelo_tc es modificado al agregar capas modelo_tc %&gt;% layer_dense(units = 10, activation = &#39;sigmoid&#39;, kernel_regularizer = regularizer_l2(l = 1e-3), kernel_initializer = initializer_random_uniform(minval = -0.5, maxval = 0.5), input_shape=7) %&gt;% layer_dense(units = 10, activation = &#39;sigmoid&#39;, kernel_regularizer = regularizer_l2(l = 1e-3), kernel_initializer = initializer_random_uniform(minval = -0.5, maxval = 0.5)) %&gt;% layer_dense(units = 1, activation = &#39;sigmoid&#39;, kernel_regularizer = regularizer_l2(l = 1e-3), kernel_initializer = initializer_random_uniform(minval = -0.5, maxval = 0.5) ) Ahora difinimos la función de pérdida (devianza es equivalente a entropía cruzada binaria), y pedimos registrar porcentaje de correctos (accuracy) y compilamos en tensorflow: modelo_tc %&gt;% compile( loss = &#39;binary_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.8), metrics = c(&#39;accuracy&#39;,&#39;binary_crossentropy&#39;)) Iteramos con descenso en gradiente y monitoreamos el error de validación. Hacemos 100 iteraciones de descenso en gradiente (épocas=100) iteraciones &lt;- modelo_tc %&gt;% fit( x_ent_s, y_ent, #batch size mismo que nrow(x_ent_s) es descenso en grad. epochs = 1000, batch_size = nrow(x_ent_s), verbose = 1, validation_data = list(x_valid_s, y_valid) ) score &lt;- modelo_tc %&gt;% evaluate(x_valid_s, y_valid) score ## $loss ## [1] 0.4757808 ## ## $acc ## [1] 0.7771084 ## ## $binary_crossentropy ## [1] 0.4355485 tab_confusion &lt;- table(modelo_tc %&gt;% predict_classes(x_valid_s),y_valid) tab_confusion ## y_valid ## 0 1 ## 0 194 45 ## 1 29 64 prop.table(tab_confusion, 2) ## y_valid ## 0 1 ## 0 0.8699552 0.4128440 ## 1 0.1300448 0.5871560 Es importante monitorear las curvas de aprendizaje (entrenamiento y validación) para diagnosticar mejoras: df_iteraciones &lt;- as.data.frame(iteraciones) ggplot(df_iteraciones, aes(x=epoch, y=value, colour=data, group=data)) + geom_line() + geom_point() + facet_wrap(~metric, ncol=1, scales = &#39;free&#39;) Observación: puedes utilizar Tensorboard, una herramienta para visualizar resultados del entrenamiento de modelos incluída en Tensorflow (que es lo que usa keras para hacer los cálculos): iteraciones &lt;- modelo_tc %&gt;% fit( x_ent_s, y_ent, #batch size mismo que nrow(x_ent_s) es descenso en grad. epochs = 500, batch_size = nrow(x_ent_s), verbose = 0, callbacks = callback_tensorboard(&quot;logs/diabetes/run_1&quot;), validation_data = list(x_valid_s, y_valid) ) y después puedes hacer: tensorboard(&quot;logs/diabetes/&quot;) Ejercicio Corre el ejemplo anterior con distintos parámetros de tasa de aprendizaje, número de unidades en las capas de intermedia y regularización (cambia arriba verbose=1 para monitorear al correr). "],
["redes-neuronales-parte-2.html", "Clase 8 Redes neuronales (parte 2) 8.1 Descenso estocástico 8.2 Algoritmo de descenso estocástico 8.3 ¿Por qué usar descenso estocástico por minilotes? 8.4 Escogiendo la tasa de aprendizaje 8.5 Mejoras al algoritmo de descenso estocástico. 8.6 Ajuste de redes con descenso estocástico 8.7 Activaciones relu 8.8 Dropout para regularización 8.9 Ajuste de hiperparámetros 8.10 Ajuste automático", " Clase 8 Redes neuronales (parte 2) En esta parte veremos aspectos más modernos de redes neuronales (incluyendo aprendizaje profundo). Estoy incluye métodos de ajuste, regularización, y definición de activaciones. 8.1 Descenso estocástico El algoritmo más popular para ajustar redes grandes es descenso estocástico, que es una modificación de nuestro algoritmo de descenso en gradiente. Antes de presentar las razones para usarlo, veremos cómo funciona para problemas con regresión lineal o logística. En descenso estocástico, el cálculo del gradiente se hace sobre una submuestra relativamente chica de la muestra de entrenamiento. En este contexto, a esta submuestra se le llama un minilote. En cada iteración, nos movemos en la dirección de descenso de ese minilote. La muestra de entrenamiento se divide entonces (al azar) en minilotes, y recorremos todos los minilotes haciendo una actualización de nuestros parámetros en cada minilote. Un recorrido sobre todos los minilotes se llama una época (las iteraciones se entienden sobre los minilotes). Antes de escribir el algoritmo mostramos una implementación para regresión logística. Usamos las mismas funciones para calcular devianza y gradiente. library(dplyr) library(tidyr) library(ggplot2) h &lt;- function(x){1/(1+exp(-x))} # la devianza es la misma devianza_calc &lt;- function(x, y){ dev_fun &lt;- function(beta){ p_beta &lt;- h(as.matrix(cbind(1, x)) %*% beta) -2*mean(y*log(p_beta) + (1-y)*log(1-p_beta)) } dev_fun } # el cálculo del gradiente es el mismo, pero x_ent y y_ent serán diferentes grad_calc &lt;- function(x_ent, y_ent){ salida_grad &lt;- function(beta){ p_beta &lt;- h(as.matrix(cbind(1, x_ent)) %*% beta) e &lt;- y_ent - p_beta grad_out &lt;- -2*as.numeric(t(cbind(1,x_ent)) %*% e)/nrow(x_ent) names(grad_out) &lt;- c(&#39;Intercept&#39;, colnames(x_ent)) grad_out } salida_grad } Y comparamos los dos algoritmos: descenso &lt;- function(n, z_0, eta, h_deriv){ z &lt;- matrix(0,n, length(z_0)) z[1, ] &lt;- z_0 for(i in 1:(n-1)){ z[i+1, ] &lt;- z[i, ] - eta * h_deriv(z[i, ]) } z } # esta implementación es solo para este ejemplo: descenso_estocástico &lt;- function(n_epocas, z_0, eta, minilotes){ #minilotes es una lista m &lt;- length(minilotes) z &lt;- matrix(0, m*n_epocas, length(z_0)) z[1, ] &lt;- z_0 for(i in 1:(m*n_epocas-1)){ k &lt;- i %% m + 1 if(i %% m == 0){ #comenzar nueva época y reordenar minilotes al azar minilotes &lt;- minilotes[sample(1:m, m)] } h_deriv &lt;- grad_calc(minilotes[[k]]$x, minilotes[[k]]$y) z[i+1, ] &lt;- z[i, ] - eta * h_deriv(z[i, ]) } z } Usaremos el ejemplo simulado de regresión para hacer algunos experimentos: p_1 &lt;- function(x){ ifelse(x &lt; 30, 0.9, 0.9 - 0.007 * (x - 15)) } set.seed(143) sim_datos &lt;- function(n){ x &lt;- pmin(rexp(n, 1/30), 100) probs &lt;- p_1(x) g &lt;- rbinom(length(x), 1, probs) # con dos variables de ruido: dat &lt;- data_frame(x_1 = (x - mean(x))/sd(x), x_2 = rnorm(length(x),0,1), x_3 = rnorm(length(x),0,1), p_1 = probs, g ) dat %&gt;% select(x_1, x_2, x_3, g) } dat_ent &lt;- sim_datos(100) dat_valid &lt;- sim_datos(1000) glm(g ~ x_1 + x_2+ x_3 , data = dat_ent, family = &#39;binomial&#39;) %&gt;% coef ## (Intercept) x_1 x_2 x_3 ## 1.8082362 -0.7439627 0.2172971 0.3711973 Hacemos descenso en gradiente: iteraciones_descenso &lt;- descenso(300, rep(0,4), 0.8, h_deriv = grad_calc(x_ent = as.matrix(dat_ent[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y_ent=dat_ent$g)) %&gt;% data.frame %&gt;% rename(beta_1 = X2, beta_2 = X3) ggplot(iteraciones_descenso, aes(x=beta_1, y=beta_2)) + geom_point() Y ahora hacemos descenso estocástico. Vamos a hacer minilotes de tamaño 5: dat_ent$minilote &lt;- rep(1:10, each=5) split_ml &lt;- split(dat_ent %&gt;% sample_n(nrow(dat_ent)), dat_ent$minilote) minilotes &lt;- lapply(split_ml, function(dat_ml){ list(x = as.matrix(dat_ml[, c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop=FALSE]), y = dat_ml$g) }) length(minilotes) ## [1] 10 Ahora iteramos. Nótese cómo descenso en gradiente tiene un patrón aleatorio de avance hacia el mínimo, y una vez que llega a una región oscila alrededor de este mínimo. iter_estocastico &lt;- descenso_estocástico(30, rep(0, 4), 0.1, minilotes) %&gt;% data.frame %&gt;% rename(beta_0 = X1, beta_1 = X2, beta_2 = X3) ggplot(iteraciones_descenso, aes(x=beta_1, y=beta_2)) + geom_path() + geom_point() + geom_path(data = iter_estocastico, colour =&#39;red&#39;, alpha=0.5) + geom_point(data = iter_estocastico, colour =&#39;red&#39;, alpha=0.5) Podemos ver cómo se ve la devianza de entrenamiento: dev_ent &lt;- devianza_calc(x = as.matrix(dat_ent[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_ent$g) dev_valid &lt;- devianza_calc(x = as.matrix(dat_valid[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_valid$g) dat_dev &lt;- data_frame(iteracion = 1:nrow(iteraciones_descenso)) %&gt;% mutate(descenso = apply(iteraciones_descenso, 1, dev_ent), descenso_estocastico = apply(iter_estocastico, 1, dev_ent)) %&gt;% gather(algoritmo, dev_ent, -iteracion) %&gt;% mutate(tipo =&#39;entrenamiento&#39;) dat_dev_valid &lt;- data_frame(iteracion = 1:nrow(iteraciones_descenso)) %&gt;% mutate(descenso = apply(iteraciones_descenso, 1, dev_valid), descenso_estocastico = apply(iter_estocastico, 1, dev_valid)) %&gt;% gather(algoritmo, dev_ent, -iteracion) %&gt;% mutate(tipo =&#39;validación&#39;) dat_dev &lt;- bind_rows(dat_dev, dat_dev_valid) ggplot(filter(dat_dev, tipo==&#39;entrenamiento&#39;), aes(x=iteracion, y=dev_ent, colour=algoritmo)) + geom_line() + geom_point() + facet_wrap(~tipo) y vemos que descenso estocástico también converge a una buena solución. 8.2 Algoritmo de descenso estocástico Descenso estocástico. Separamos al azar los datos de entrenamiento en \\(n\\) minilotes de tamaño \\(m\\). Para épocas \\(e =1,2,\\ldots, n_e\\) Calcular el gradiente sobre el minilote y hacer actualización, sucesivamente para cada uno de los minilotes \\(k=1,2,\\ldots, n/m\\): \\[\\beta_{i+1} = \\beta_{i} - \\eta\\sum_{j=1}^m \\nabla D^{(k)}_j (\\beta_i)\\] donde \\(D^{(k)}_j (\\beta_i)\\) es la devianza para el \\(j\\)-ésimo caso del minilote \\(k\\). Repetir para la siguiente época (opcional: reordenar antes al azar los minibatches, para evitar ciclos). 8.3 ¿Por qué usar descenso estocástico por minilotes? Las propiedades importantes de descenso estocástico son: Muchas veces no es necesario usar todos los datos para encontrar una buena dirección de descenso. Podemos ver la dirección de descenso en gradiente como un valor esperado sobre la muestra de entrenamiento (pues la pérdida es un promedio sobre el conjunto de entrenamiento). Una submuestra (minilote) puede ser suficiente para estimar ese valor esperado, con costo menor de cómputo. Adicionalmente, quizá no es tan buena idea intentar estimar el gradiente con la mejor precisión pues es solamente una dirección de descenso local (así que quizá no da la mejor decisión de a dónde moverse en cada punto). Es mejor hacer iteraciones más rápidas con direcciones estimadas. Desde este punto de vista, calcular el gradiente completo para descenso en gradiente es computacionalmente ineficiente. Si el conjunto de entrenamiento es masivo, descenso en gradiente no es factible. ¿Cuál es el mejor tamaño de minilote? Por un lado, minilotes más grandes nos dan mejores eficiencias en paralelización (multiplicación de matrices), especialmente en GPUs. Por otro lado, con minilotes más grandes puede ser que hagamos trabajo de más, por las razones expuestas en los incisos anteriores, y tengamos menos iteraciones en el mismo tiempo. El mejor punto está entre minilotes demasiado chicos (no aprovechamos paralelismo) o demasiado grande (hacemos demasiado trabajo por iteración). 4.La propiedad más importante de descenso estocástico en minilotes es que su convergencia no depende del tamaño del conjunto de entrenamiento, es decir, el tiempo de iteración para descenso estocástico no crece con el número de casos totales. Podemos tener obtener buenos ajustes incluso con tamaños muy grandes de conjuntos de entrenamiento (por ejemplo, antes de procesar todos los datos de entrenamiento). Descenso estocástico escala bien en este sentido: el factor limitante es el tamaño de minilote y el número de iteraciones. Es importante permutar al azar los datos antes de hacer los minibatches, pues órdenes naturales en los datos pueden afectar la convergencia. Se ha observado también que permutar los minibatches en cada iteración típicamente acelera la convergencia (si se pueden tener los datos en memoria). Ejemplo En el ejemplo anterior nota que las direcciones de descenso de descenso estocástico son muy razonables (punto 1). Nota también que obtenemos una buena aproximación a la solución con menos cómputo (punto 2 - mismo número de iteraciones, pero cada iteración con un minilote). ggplot(filter(dat_dev, iteracion &gt;= 1), aes(x=iteracion, y=dev_ent, colour=algoritmo)) + geom_line() + geom_point(size=0.5)+ facet_wrap(~tipo, ncol=1) 8.4 Escogiendo la tasa de aprendizaje Para escoger la tasa, monitoreamos las curvas de error de entrenamiento y de validación. Si la tasa es muy grande, habrá oscilaciones grandes y muchas veces incrementos grandes en la función objectivo (error de entrenamiento). Algunas oscilaciones suaves no tienen problema -es la naturaleza estocástica del algoritmo. Si la tasa es muy baja, el aprendizaje es lento y podemos quedarnos en un valor demasiado alto. Conviene monitorear las primeras iteraciones y escoger una tasa más alta que la mejor que tengamos acutalmente, pero no tan alta que cause inestabilidad. Una gráfica como la siguiente es útil. En este ejemplo, incluso podríamos detenernos antes para evitar el sobreajuste de la última parte de las iteraciones: ggplot(filter(dat_dev, algoritmo==&#39;descenso_estocastico&#39;), aes(x=iteracion, y=dev_ent, colour=tipo)) + geom_line() + geom_point() Por ejemplo: tasa demasiado alta: iter_estocastico &lt;- descenso_estocástico(20, rep(0,4), 0.95, minilotes) %&gt;% data.frame %&gt;% rename(beta_0 = X1, beta_1 = X2) dev_ent &lt;- devianza_calc(x = as.matrix(dat_ent[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_ent$g) dev_valid &lt;- devianza_calc(x = as.matrix(dat_valid[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_valid$g) dat_dev &lt;- data_frame(iteracion = 1:nrow(iter_estocastico)) %&gt;% mutate(entrena = apply(iter_estocastico, 1, dev_ent), validacion = apply(iter_estocastico, 1, dev_valid)) %&gt;% gather(tipo, devianza, entrena:validacion) ggplot(dat_dev, aes(x=iteracion, y=devianza, colour=tipo)) + geom_line() + geom_point() Tasa demasiado chica ( o hacer más iteraciones): iter_estocastico &lt;- descenso_estocástico(20, rep(0,4), 0.01, minilotes) %&gt;% data.frame %&gt;% rename(beta_0 = X1, beta_1 = X2) dev_ent &lt;- devianza_calc(x = as.matrix(dat_ent[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_ent$g) dev_valid &lt;- devianza_calc(x = as.matrix(dat_valid[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_valid$g) dat_dev &lt;- data_frame(iteracion = 1:nrow(iter_estocastico)) %&gt;% mutate(entrena = apply(iter_estocastico, 1, dev_ent), validacion = apply(iter_estocastico, 1, dev_valid)) %&gt;% gather(tipo, devianza, entrena:validacion) ggplot(dat_dev, aes(x=iteracion, y=devianza, colour=tipo)) + geom_line() Para redes neuronales, es importante explorar distintas tasas de aprendizaje, aún cuando no parezca haber oscilaciones grandes o convergencia muy lenta. En algunos casos, si la tasa es demasiado grande, puede ser que el algoritmo llegue a lugares con gradientes cercanos a cero (por ejemplo, por activaciones demasiado grandes) y tenga dificultad para moverse. 8.5 Mejoras al algoritmo de descenso estocástico. 8.5.1 Decaimiento de tasa de aprendizaje Hay muchos algoritmos derivados de descenso estocástico. La primera mejora consiste en reducir gradualmente la tasa de aprendizaje para aprender rápido al principio, pero filtrar el ruido de la estimación de minilotes más adelante en las iteraciones y permitir que el algoritmo se asiente en un mínimo. descenso_estocástico &lt;- function(n_epocas, z_0, eta, minilotes, decaimiento = 0.0){ #minilotes es una lista m &lt;- length(minilotes) z &lt;- matrix(0, m*n_epocas, length(z_0)) z[1, ] &lt;- z_0 for(i in 1:(m*n_epocas-1)){ k &lt;- i %% m + 1 if(i %% m == 0){ #comenzar nueva época y reordenar minilotes al azar minilotes &lt;- minilotes[sample(1:m, m)] } h_deriv &lt;- grad_calc(minilotes[[k]]$x, minilotes[[k]]$y) z[i+1, ] &lt;- z[i, ] - eta * h_deriv(z[i, ]) eta &lt;- eta*(1/(1+decaimiento*i)) } z } Y ahora vemos qué pasa con decaimiento: iter_estocastico &lt;- descenso_estocástico(20, c(0,0, 0, 0), 0.3, minilotes, decaimiento = 0.0002) %&gt;% data.frame %&gt;% rename(beta_0 = X1, beta_1 = X2, beta_2 = X3, beta_3 = X4) dev_ent &lt;- devianza_calc(x = as.matrix(dat_ent[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_ent$g) dev_valid &lt;- devianza_calc(x = as.matrix(dat_valid[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_valid$g) dat_dev &lt;- data_frame(iteracion = 1:nrow(iter_estocastico)) %&gt;% mutate(entrena = apply(iter_estocastico, 1, dev_ent), validacion = apply(iter_estocastico, 1, dev_valid)) %&gt;% gather(tipo, devianza, entrena:validacion) ggplot(filter(dat_dev, iteracion&gt;1), aes(x=iteracion, y=devianza, colour=tipo)) + geom_line() + geom_point() ggplot(iteraciones_descenso, aes(x=beta_1, y=beta_2)) + geom_path() + geom_point() + geom_path(data = iter_estocastico, colour =&#39;red&#39;, alpha=0.5) + geom_point(data = iter_estocastico, colour =&#39;red&#39;, alpha=0.5) La tasa de aprendizaje es uno de los parámetros en redes neuronales más importantes de afinar. Generalmente se empieza con una tasa de aprendizaje con un valor bajo (0.01, o 0.1), pero es necesario experimentar. Un valor muy alto puede provocar oscilaciones muy fuertes en la pérdida Un valor alto también puede provocar que el algoritmo se detenga en lugar con función pérdida alta (sobreajusta rápidamente). Un valor demasiado bajo produce convergencia lenta. 8.5.2 Momento También es posible utilizar una idea adicional que acelera la convergencia. La idea es que muchas veces la aleatoriedad del algoritmo puede producir iteraciones en direcciones que no son tan buenas (pues la estimación del gradiente es mala). Esto es parte del algoritmo. Sin embargo, si en varias iteraciones hemos observado movimientos en direcciones consistentes, quizá deberíamos movernos en esas direcciones consistentes, y reducir el peso de la dirección del minilote (que nos puede llevar en una dirección mala). El resultado es un suavizamiento de las curvas de aprendizaje. Esto es similar al movimiento de una canica en una superficie: la dirección de su movimiento está dada en parte por la dirección de descenso (el gradiente) y en parte la velocidad actual de la canica. La canica se mueve en un promedio de estas dos direcciones Descenso estocástico con momento Separamos al azar los datos de entrenamiento en \\(n\\) minilotes de tamaño \\(m\\). Para épocas \\(e =1,2,\\ldots, n_e\\) Calcular el gradiente sobre el minilote y hacer actualización, sucesivamente para cada uno de los minilotes \\(k=1,2,\\ldots, n/m\\): \\[\\beta_{i+1} = \\beta_{i} + v,\\] \\[v= \\alpha v - \\eta\\sum_{j=1}^m \\nabla D^{(k)}_j\\] donde \\(D^{(k)}_j (\\beta_i)\\) es la devianza para el \\(j\\)-ésimo caso del minilote \\(k\\). A \\(v\\) se llama la velocidad Repetir para la siguiente época descenso_estocástico &lt;- function(n_epocas, z_0, eta, minilotes, momento = 0.0, decaimiento = 0.0){ #minilotes es una lista m &lt;- length(minilotes) z &lt;- matrix(0, m*n_epocas, length(z_0)) z[1, ] &lt;- z_0 v &lt;- 0 for(i in 1:(m*n_epocas-1)){ k &lt;- i %% m + 1 if(i %% m == 0){ #comenzar nueva época y reordenar minilotes al azar minilotes &lt;- minilotes[sample(1:m, m)] v &lt;- 0 } h_deriv &lt;- grad_calc(minilotes[[k]]$x, minilotes[[k]]$y) z[i+1, ] &lt;- z[i, ] + v v &lt;- momento*v - eta * h_deriv(z[i, ]) eta &lt;- eta*(1/(1+decaimiento*i)) } z } Y ahora vemos que usando momento el algoritmo es más parecido a descenso en gradiente usual (pues tenemos cierta memoria de direcciones anteriores de descenso): set.seed(231) iter_estocastico &lt;- descenso_estocástico(20, c(0,0, 0, 0), 0.2, minilotes, momento = 0.7, decaimiento = 0.001) %&gt;% data.frame %&gt;% rename(beta_0 = X1, beta_1 = X2, beta_2=X3, beta_3=X4) dev_ent &lt;- devianza_calc(x = as.matrix(dat_ent[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_ent$g) dev_valid &lt;- devianza_calc(x = as.matrix(dat_valid[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;), drop =FALSE]), y=dat_valid$g) dat_dev &lt;- data_frame(iteracion = 1:nrow(iter_estocastico)) %&gt;% mutate(entrena = apply(iter_estocastico, 1, dev_ent), validacion = apply(iter_estocastico, 1, dev_valid)) %&gt;% gather(tipo, devianza, entrena:validacion) ggplot(filter(dat_dev, iteracion &gt; 1), aes(x=iteracion, y=devianza, colour=tipo)) + geom_line() + geom_point() ggplot(iteraciones_descenso, aes(x=beta_1, y=beta_2)) + geom_path() + geom_point() + geom_path(data = iter_estocastico, colour =&#39;red&#39;, alpha=0.5) + geom_point(data = iter_estocastico, colour =&#39;red&#39;, alpha=0.5) Nótese cómo llegamos más rápido a una buena solución (comparado con el ejemplo sin momento). Adicionalmente, error de entrenamiento y validación lucen más suaves, producto de promediar velocidades a lo largo de iteraciones. Valores típicos para momento son 0,0.5,0.9 o 0.99. 8.5.3 Otras variaciones Otras variaciones incluyen usar una tasa adaptativa de aprendizaje por cada parámetro (algoritmos adagrad, rmsprop, adam y adamax), o actualizaciones un poco diferentes (nesterov). Los más comunes son descenso estocástico, descenso estocástico con momento, rmsprop y adam (Capítulo 8 del Deep Learning Book, (Goodfellow, Bengio, and Courville 2016)). 8.6 Ajuste de redes con descenso estocástico library(keras) set.seed(21321) x_ent &lt;- as.matrix(dat_ent[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;)]) x_valid &lt;- as.matrix(dat_valid[,c(&#39;x_1&#39;,&#39;x_2&#39;,&#39;x_3&#39;)]) y_ent &lt;- dat_ent$g y_valid &lt;- dat_valid$g Empezamos con regresión logística (sin capas ocultas), que se escribe y ajusta como sigue: modelo &lt;- keras_model_sequential() modelo %&gt;% layer_dense(units = 1, activation = &#39;sigmoid&#39;, input_shape = c(3)) modelo %&gt;% compile(loss = &#39;binary_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.2, momentum = 0, decay = 0), metrics = c(&#39;accuracy&#39;) ) history &lt;- modelo %&gt;% fit(x_ent, y_ent, epochs = 50, batch_size = 64, verbose = 0, validation_data = list(x_valid, y_valid)) Podemos ver el progreso del algoritmo por época aprendizaje &lt;- as.data.frame(history) ggplot(aprendizaje, aes(x=epoch, y=value, colour=data, group=data)) + facet_wrap(~metric, ncol = 1) + geom_line() + geom_point(size = 0.5) Ver los pesos: get_weights(modelo) ## [[1]] ## [,1] ## [1,] -0.6412241 ## [2,] 0.1661989 ## [3,] 0.3180167 ## ## [[2]] ## [1] 1.68286 Y verificamos que concuerda con la salida de glm: mod_logistico &lt;- glm(g ~ x_1 + x_2+ x_3, data = dat_ent, family = &#39;binomial&#39;) coef(mod_logistico) ## (Intercept) x_1 x_2 x_3 ## 1.8082362 -0.7439627 0.2172971 0.3711973 0.5*mod_logistico$deviance/nrow(dat_ent) ## [1] 0.3925183 Ejemplo Ahora hacemos algunos ejemplos para redes totalmente conexas. Usaremos los datos de reconocimiento de dígitos. library(readr) digitos_entrena &lt;- read_csv(&#39;./datos/zip-train.csv&#39;) digitos_prueba &lt;- read_csv(&#39;./datos/zip-test.csv&#39;) names(digitos_entrena)[1] &lt;- &#39;digito&#39; names(digitos_entrena)[2:257] &lt;- paste0(&#39;pixel_&#39;, 1:256) names(digitos_prueba)[1] &lt;- &#39;digito&#39; names(digitos_prueba)[2:257] &lt;- paste0(&#39;pixel_&#39;, 1:256) dim(digitos_entrena) ## [1] 7291 257 table(digitos_entrena$digito) ## ## 0 1 2 3 4 5 6 7 8 9 ## 1194 1005 731 658 652 556 664 645 542 644 Ponemos el rango entre [0,2] (pixeles positivos) x_train &lt;- digitos_entrena %&gt;% select(contains(&#39;pixel&#39;)) %&gt;% as.matrix + 1 x_train &lt;- x_train x_test &lt;- digitos_prueba %&gt;% select(contains(&#39;pixel&#39;)) %&gt;% as.matrix + 1 x_test &lt;- x_test Usamos codificación dummy: #dim(x_train) &lt;- c(nrow(x_train), 16, 16, 1) #dim(x_test) &lt;- c(nrow(x_test), 16, 16, 1) y_train &lt;- to_categorical(digitos_entrena$digito) y_test &lt;- to_categorical(digitos_prueba$digito) head(y_train) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 0 0 0 0 0 0 1 0 0 0 ## [2,] 0 0 0 0 0 1 0 0 0 0 ## [3,] 0 0 0 0 1 0 0 0 0 0 ## [4,] 0 0 0 0 0 0 0 1 0 0 ## [5,] 0 0 0 1 0 0 0 0 0 0 ## [6,] 0 0 0 0 0 0 1 0 0 0 Y definimos un modelo con 2 capas de 200 unidades cada una y regularización L2. Nótese que usamos softmax en la última capa, que es la función (ver parte de regresión multinomial) cuya salida \\(k\\) está dada por \\[p_k = \\frac{exp(z_k)}{\\sum_j exp(z_j)}\\] donde \\(z=(z_1,\\ldots, z_K)\\) (estas son las combinaciones lineales de las unidades de la capa anterior). modelo_tc &lt;- keras_model_sequential() modelo_tc %&gt;% layer_dense(units = 200, activation = &#39;sigmoid&#39;, kernel_regularizer = regularizer_l2(l = 1e-6), input_shape=256) %&gt;% layer_dense(units = 200, activation = &#39;sigmoid&#39;, kernel_regularizer = regularizer_l2(l = 1e-6)) %&gt;% layer_dense(units = 10, activation = &#39;softmax&#39;, kernel_regularizer = regularizer_l2(l = 1e-6)) modelo_tc %&gt;% compile( loss = &#39;categorical_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.5, momentum = 0.0, decay = 1e-6), metrics = c(&#39;accuracy&#39; ,&#39;categorical_crossentropy&#39;) ) history &lt;- modelo_tc %&gt;% fit( x_train, y_train, epochs = 100, batch_size = 256, verbose = 0, validation_data = list(x_test, y_test) ) score &lt;- modelo_tc %&gt;% evaluate(x_test, y_test) score ## $loss ## [1] 0.2994796 ## ## $acc ## [1] 0.9312407 ## ## $categorical_crossentropy ## [1] 0.2984314 Podemos también intentar con el ejemplo de spam: library(readr) library(tidyr) library(dplyr) spam_entrena &lt;- read_csv(&#39;./datos/spam-entrena.csv&#39;) #%&gt;% sample_n(2000) spam_prueba &lt;- read_csv(&#39;./datos/spam-prueba.csv&#39;) set.seed(293) x_ent &lt;- spam_entrena %&gt;% select(-X1, -spam) %&gt;% as.matrix x_ent_s &lt;- scale(x_ent) x_valid &lt;- spam_prueba %&gt;% select(-X1, -spam) %&gt;% as.matrix x_valid_s &lt;- x_valid %&gt;% scale(center = attr(x_ent_s, &#39;scaled:center&#39;), scale = attr(x_ent_s, &#39;scaled:scale&#39;)) y_ent &lt;- spam_entrena$spam y_valid &lt;- spam_prueba$spam En este caso, intentemos una capa oculta: modelo_tc &lt;- keras_model_sequential() modelo_tc %&gt;% layer_dense(units = 200, activation = &#39;sigmoid&#39;, kernel_regularizer = regularizer_l2(l = 1e-5), input_shape=57) %&gt;% layer_dense(units = 1, activation = &#39;sigmoid&#39;) modelo_tc %&gt;% compile( loss = &#39;binary_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.5, momentum = 0.5), metrics = c(&#39;accuracy&#39;, &#39;binary_crossentropy&#39;) ) history &lt;- modelo_tc %&gt;% fit( x_ent_s, y_ent, epochs = 200, batch_size = 256, verbose = 0, validation_data = list(x_valid_s, y_valid) ) score &lt;- modelo_tc %&gt;% evaluate(x_valid_s, y_valid) tab_confusion &lt;- table(modelo_tc %&gt;% predict_classes(x_valid_s),y_valid) tab_confusion ## y_valid ## 0 1 ## 0 898 62 ## 1 29 545 prop.table(tab_confusion, 2) ## y_valid ## 0 1 ## 0 0.96871629 0.10214168 ## 1 0.03128371 0.89785832 8.7 Activaciones relu Recientemente se ha descubierto (en gran parte empíricamente) que hay una unidad más conveniente para las activaciones de las unidades, en lugar de la función sigmoide Activaciones lineales rectificadas (relu) La función relu es \\[\\begin{equation} h(z) = \\begin{cases} z &amp;\\, z&gt;0\\\\ 0 &amp;\\, z&lt;=0 \\end{cases} \\end{equation}\\] Estas generalmente sustituyen a las unidades sigmoidales en capas ocultas h_relu &lt;- function(z) ifelse(z &gt; 0, z, 0) h_logistica &lt;- function(z) 4/(1+exp(-z)) #mult por 4 para comparar más fácilmente curve(h_relu, -5,5) curve(h_logistica, add=T, col=&#39;red&#39;) La razón del exito de estas activaciones no está del todo clara, aunque generalmente se cita el hecho de que una unidad saturada (valores de entrada muy positivos o muy negativos) es problemática en optimización, y las unidades tienen menos ese problema pues no se saturan para valores positivos. Pregunta: ¿cómo cambiaría el algoritmo de feed-forward con estas unidades? ¿el de back-prop? Ejemplo Veamos el mismo modelo de dos capas de arriba, pero con activaciones relu: modelo_tc &lt;- keras_model_sequential() modelo_tc %&gt;% layer_dense(units = 200, activation = &#39;relu&#39;, kernel_regularizer = regularizer_l2(l = 1e-3), input_shape=256) %&gt;% layer_dense(units = 200, activation = &#39;relu&#39;, kernel_regularizer = regularizer_l2(l = 1e-3)) %&gt;% layer_dense(units = 10, activation = &#39;softmax&#39;, kernel_regularizer = regularizer_l2(l = 1e-3)) modelo_tc %&gt;% compile( loss = &#39;categorical_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.3, momentum = 0.0, decay = 0), metrics = c(&#39;accuracy&#39;, &#39;categorical_crossentropy&#39;) ) history &lt;- modelo_tc %&gt;% fit( x_train, y_train, epochs = 200, batch_size = 256, verbose = 0, validation_data = list(x_test, y_test) ) score &lt;- modelo_tc %&gt;% evaluate(x_test, y_test) score ## $loss ## [1] 0.2850646 ## ## $acc ## [1] 0.9427005 ## ## $categorical_crossentropy ## [1] 0.2088045 8.8 Dropout para regularización Un método más nuevo y exitoso para regularizar es el dropout. Consiste en perturbar la red en cada pasada de entrenamiento de minibatch (feed-forward y backprop), eliminando al azar algunas de las unidades de cada capa. El objeto es que al introducir ruido en el proceso de entrenamiento evitamos sobreajuste, pues en cada paso de la iteración estamos limitando el número de unidades que la red puede usar para ajustar las respuestas. Dropout entonces busca una reducción en el sobreajuste que sea más provechosa que el consecuente aumento en el sesgo. Dropout En cada iteración (minibatch), seleccionamos con cierta probablidad \\(p\\) eliminar cada una de las unidades (independientemente en cada capa, y posiblemente con distintas \\(p\\) en cada capa), es decir, hacemos su salida igual a 0. Hacemos forward-feed y back-propagation poniendo en 0 las unidades eliminadas. Escalar pesos: para predecir (prueba), usamos todas las unidades. Si una unidad tiene peso \\(\\theta\\) en una capa después de entrenar, y la probablidad de que esa capa no se haya hecho 0 es \\(1-p\\), entonces usamos \\((1-p)\\theta\\) como peso para hacer predicciones. Si hacemos dropout de la capa de entrada, generalmente se usan valores chicos alrededor de \\(0.2\\). En capas intermedias se usan generalmente valores más grandes alrededor de \\(0.5\\). Podemos hacer dropout de la capa de entrada. En este caso, estamos evitando que el modelo dependa fuertemente de variables individuales. Por ejemplo, en procesamiento de imágenes, no queremos que por sobreajuste algunas predicciones estén ligadas fuertemente a un solo pixel (aún cuando en entrenamiento puede ser que un pixel separe bien los casos que nos interesa clasificar). Ejemplo: dropout y regularización Consideremos el problema de separar 9 y 3 del resto de dígitos zip. Queremos comparar el desempeño de una red sin y con dropout (tanto de entradas como de capa oculta) y entender parcialmente cómo se comportan los pesos aprendidos: set.seed(29123) entrena_3 &lt;- digitos_entrena %&gt;% sample_n(nrow(digitos_entrena)) %&gt;% sample_n(3000) x_train_3 &lt;- entrena_3 %&gt;% select(-digito) %&gt;% as.matrix + 1 y_train_3 &lt;- (entrena_3$digito %in% c(3,8)) %&gt;% as.numeric set.seed(12) modelo_sin_reg &lt;- keras_model_sequential() modelo_sin_reg %&gt;% layer_dense(units = 30, activation = &#39;relu&#39;, input_shape = 256) %&gt;% layer_dense(units = 1, activation = &#39;sigmoid&#39;) set.seed(12) modelo_dropout &lt;- keras_model_sequential() modelo_dropout %&gt;% layer_reshape(input_shape=256, target_shape=256) %&gt;% layer_dropout(0.5) %&gt;% layer_dense(units = 30, activation = &#39;relu&#39;, input_shape = 256, name = &quot;dense_1&quot;) %&gt;% layer_dropout(0.5) %&gt;% layer_dense(units = 1, activation = &#39;sigmoid&#39;, name=&#39;output&#39;) El modelo sin regularización sobreajusta (nótese que el error de validación comienza a crecer considerablemente muy pronto, hay un margen grande entre entrenamiento y validación, y la pérdida de entrenamiento es cercana a 0): modelo_sin_reg %&gt;% compile(loss = &#39;binary_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.5), metrics = c(&#39;accuracy&#39;) ) history_1 &lt;- modelo_sin_reg %&gt;% fit(x_train_3/2, y_train_3, verbose=0, epochs = 800, batch_size = 256, validation_split = 0.2 ) hist_1 &lt;- as.data.frame(history_1) ggplot(hist_1, aes(x=epoch, y=value, colour=data)) + geom_line() + facet_wrap(~metric, scales = &#39;free&#39;, ncol=1) Y parecen ruidosas las unidades que aprendió en la capa oculta (algunas no aprendieron o aprendieron cosas irrelevantes). En la siguiente imagen, cada pixel es un peso. Cada imagen agrupa los pesos de una unidad, y ordenamos los pesos según la variable de entrada (pixel) al que se multiplican. graf_pesos &lt;- function(pesos, mostrar_facets=FALSE){ pesos_df &lt;- as_tibble(pesos) %&gt;% mutate(pixel = 1:256) %&gt;% mutate(x=(pixel -1) %% 16, y = (pixel-1)%/% 16) %&gt;% gather(unidad, valor, -pixel,-x,-y) %&gt;% mutate(unidad = as.integer(unidad)) %&gt;% mutate(x_grid = (unidad-1) %% 6 + 1, y_grid= (unidad-1) %/% 6 + 1) marco &lt;- expand.grid(x_grid = 1:6, y_grid=1:5) pesos_df &lt;- full_join(marco, pesos_df, by=c(&#39;x_grid&#39;,&#39;y_grid&#39;)) pesos_df$valor[is.na(pesos_df$valor)] &lt;- 0 gplot &lt;- ggplot(pesos_df, aes(x=x,y=-y, fill=valor)) + geom_tile() + facet_grid(x_grid~y_grid) + scale_fill_gradient2(low = &quot;black&quot;, mid=&#39;gray80&#39;, high = &quot;white&quot;) + coord_fixed() if(!mostrar_facets){ gplot &lt;- gplot + theme(strip.background = element_blank(), strip.text = element_blank()) } gplot } pesos &lt;- get_weights(modelo_sin_reg)[[1]] colnames(pesos) &lt;- 1:ncol(pesos) graf_pesos(pesos) Ahora ajustamos el modelo con dropout: modelo_dropout %&gt;% compile(loss = &#39;binary_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.5), metrics = c(&#39;accuracy&#39;) ) history_2 &lt;- modelo_dropout %&gt;% fit(x_train_3/2, y_train_3, verbose = 0, epochs = 800, batch_size = 256, validation_split = 0.2, callbacks = callback_tensorboard(&quot;logs/digits/run_2&quot;, write_images=TRUE), ) hist_2 &lt;- as.data.frame(history_2) ggplot(hist_2, aes(x=epoch, y=value, colour=data)) + geom_line() + facet_wrap(~metric, scales = &#39;free&#39;) El desempeño es mejor, y parecen ser más útiles los patrones que aprendió el capa oculta: pesos &lt;- get_weights(modelo_dropout)[[1]] colnames(pesos) &lt;- 1:ncol(pesos) graf_pesos(pesos) get_weights(modelo_dropout)[[3]] ## [,1] ## [1,] -0.7514948 ## [2,] -0.9018582 ## [3,] -0.8122044 ## [4,] -0.8950837 ## [5,] 0.4953574 ## [6,] -1.0647782 ## [7,] -0.8266635 ## [8,] 0.5718913 ## [9,] -0.9430886 ## [10,] -0.8011689 ## [11,] 0.4392230 ## [12,] -0.7657505 ## [13,] -0.8234765 ## [14,] -0.5586338 ## [15,] 0.8779517 ## [16,] -0.6304026 ## [17,] 0.8206695 ## [18,] -1.0194393 ## [19,] 0.4734551 ## [20,] 0.8670473 ## [21,] 0.4668860 ## [22,] -0.9397925 ## [23,] 0.6468973 ## [24,] -1.3634844 ## [25,] 0.6484733 ## [26,] -1.3969481 ## [27,] 0.5777472 ## [28,] 0.8165900 ## [29,] -1.3984982 ## [30,] -1.3770382 ¿Cuáles de estas unidades tienen peso positivo y negativo en la capa final? pesos_capa_f &lt;- get_weights(modelo_dropout)[[3]] graf_pesos(pesos[, pesos_capa_f &gt; 0], mostrar_facets = TRUE) ## Warning: Removed 18 rows containing missing values (geom_tile). graf_pesos(pesos[, pesos_capa_f &lt; -0], mostrar_facets = TRUE) ## Warning: Removed 12 rows containing missing values (geom_tile). Veamos cómo se activan distintas unidades con diferentes entradas: indices &lt;- c(10, 28, 3, 29, 16) entrena_3$digito[indices] ## [1] 3 5 7 1 6 dense_layer &lt;- keras_model(inputs = modelo_dropout$input, outputs = get_layer(modelo_dropout, &#39;dense_1&#39;)$output) dense_output &lt;- predict(dense_layer, x_train_3[indices, , drop=FALSE]) dense_t &lt;- t(dense_output) dense_t ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.0000000 0.000000 0.0000000 0.000000 6.3378801 ## [2,] 0.0000000 4.803685 0.0000000 3.284762 4.1118021 ## [3,] 0.0000000 1.959248 0.0000000 0.000000 4.7809901 ## [4,] 0.0000000 0.000000 1.4627091 0.000000 2.2469437 ## [5,] 0.0000000 0.000000 0.0000000 0.000000 0.0000000 ## [6,] 0.0000000 0.000000 2.2397161 2.108541 0.0000000 ## [7,] 0.0000000 4.820392 0.0000000 2.029704 3.2892756 ## [8,] 0.0000000 0.000000 0.0000000 0.000000 0.0000000 ## [9,] 0.0000000 0.000000 0.0000000 0.000000 0.0000000 ## [10,] 0.0000000 0.000000 2.6849706 0.000000 0.0000000 ## [11,] 3.6951528 0.000000 0.0000000 0.000000 0.0000000 ## [12,] 0.0000000 0.000000 0.2565318 0.000000 6.3758636 ## [13,] 0.0000000 0.000000 4.9329519 0.000000 0.5490778 ## [14,] 0.0000000 2.684938 0.0000000 0.000000 6.0356817 ## [15,] 0.0000000 0.000000 0.0000000 0.000000 0.0000000 ## [16,] 0.0000000 4.906095 0.0000000 2.844200 7.2686534 ## [17,] 1.4977627 0.000000 0.0000000 0.000000 0.0000000 ## [18,] 0.0000000 1.959741 0.0000000 2.619646 4.5612979 ## [19,] 0.3636817 0.000000 0.0000000 0.000000 0.0000000 ## [20,] 0.0000000 0.000000 0.0000000 0.000000 0.0000000 ## [21,] 1.4057198 0.000000 0.0000000 0.000000 0.0000000 ## [22,] 0.0000000 0.000000 0.0000000 2.040815 0.0000000 ## [23,] 0.0000000 0.000000 0.0000000 0.000000 0.0000000 ## [24,] 0.0000000 0.000000 3.9003155 0.000000 0.0000000 ## [25,] 4.5947180 0.000000 0.5240173 0.000000 0.0000000 ## [26,] 0.0000000 0.000000 3.9117086 1.707053 0.0000000 ## [27,] 0.0000000 0.000000 0.0000000 0.000000 0.0000000 ## [28,] 2.1404605 0.000000 0.0000000 0.000000 0.0000000 ## [29,] 0.0000000 0.000000 4.0400424 2.496658 0.0000000 ## [30,] 0.0000000 0.000000 3.7048852 1.990880 0.0000000 graf_pesos(pesos[, dense_t[ ,1] &gt; 0], mostrar_facets = TRUE) graf_pesos(pesos[, dense_t[ ,2] &gt; 0], mostrar_facets = TRUE) graf_pesos(pesos[, dense_t[ ,3] &gt; 0], mostrar_facets = TRUE) graf_pesos(pesos[, dense_t[ ,4] &gt; 0], mostrar_facets = TRUE) Comentarios adicionales Algunas maneras en que podemos pensar en la regularización de dropout: Dropout busca que cada unidad calcule algo importante por sí sola, y dependa menos de otras unidades para hacer algo útil. Algunas unidades y pesos pueden acoplarse fuertemente (y de manera compleja) para hacer las predicciones. Si estas unidades aprendieron ese acoplamento demasiado fuerte para el conjunto de entrenamiento, entonces puede ser nuevos datos, con perturbaciones, puedan producir predicciones malas (mala generalización). Con dropout buscamos que la unidades capturen información útil en general, no necesariamente en acoplamiento fuerte con otras unidades. Podemos pensar que en cada pasada de minibatch, escogemos una arquitectura diferente, y entrenamos. El resultado final será entonces es un tipo de promedio de todas esas arquitecturas que probamos. Este promedio reduce varianza de las salidas de las unidades. El paso de escalamiento es importante para el funcionamiento correcto del método. La idea intuitiva es que el peso de una unidad es 0 con probabilidad \\(p\\) y \\(\\theta\\) con probabilidad \\(1-p\\). Tomamos el valor esperado como peso para la red completa, que es \\(p0+(1-p)\\theta\\). Ver (Srivastava et al. 2014) Ejemplo Experimenta en este ejemplo con distintos valores de dropout, y verifica intuitivamente sus efectos de regularización (ve las curvas de aprendizaje). modelo_tc &lt;- keras_model_sequential() modelo_tc %&gt;% layer_reshape(input_shape=256, target_shape=256) %&gt;% layer_dropout(rate=0.2) %&gt;% layer_dense(units = 200, activation = &#39;relu&#39;) %&gt;% layer_dropout(rate = 0.5) %&gt;% layer_dense(units = 200, activation = &#39;relu&#39;) %&gt;% layer_dropout(rate = 0.5) %&gt;% layer_dense(units = 10, activation = &#39;softmax&#39;, kernel_regularizer = regularizer_l2(l = 1e-4)) modelo_tc %&gt;% compile( loss = &#39;categorical_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.3, momentum = 0.5, decay = 0.0001), metrics = c(&#39;accuracy&#39;, &#39;categorical_crossentropy&#39;) ) history &lt;- modelo_tc %&gt;% fit( x_train, y_train, epochs = 100, batch_size = 256, validation_data = list(x_test, y_test) ) score &lt;- modelo_tc %&gt;% evaluate(x_test, y_test) score ## $loss ## [1] 0.2215342 ## ## $acc ## [1] 0.9496761 ## ## $categorical_crossentropy ## [1] 0.2171682 8.9 Ajuste de hiperparámetros Esta sección es de (Goodfellow, Bengio, and Courville 2016) Dos enfoques: Manual (entender teoría, experiencia) o automático (computo). 8.9.1 Ajuste Manual de Hiperparámetros Ajustar la flexibilidad del modelo al problema: debe tener el sesgo apropiado (capacidad de representar patrones), ajustando con regularización de costo y proceso de entrenamiento. Por ejemplo: más capas tiene más poder de representación (menos sesgo), pero el algoritmo de minimización puede tener dificultades por varianza o por dificultades en minimización, o si la regularización es demasiado grande. Forma de U del error según capacidad del modelo: en un extremo, baja capacidad (sesgo alto). En otro extremo, hay alta capacidad y brecha grande entre error de entrenamiento y de prueba. La tasa de aprendizaje es el hiperparámetro más importante. Si es demasiado alta, entonces puede aumentar el error de entrenamiento. Cuando es muy baja, el proceso es lento y se puede atorar. Si el error en entrenamiento es más alto que tu tasa objetivo (el error que quisieras lograr), hay que bajar sesgo (con parámetros o arquitectura) Si el error de prueba es más grande que el de entrenamiento, hay dos acciones: prueba = entrena + gap. Hay que hacer tradeoff entre estas dos. En deep learning, generalmente funciona mejor cuando el error de entrenamiento es muy chico, y hay que reducir el gap regularizando: conviene comenzar con una red sobreajustada que tenga error de entrenamiento bajo, y regularizar y controlar complejidad a partir de esta. 8.10 Ajuste automático Grid search cuando hay pocos: todas las combinaciones de parámetros. Prohibitivo si hay demasiados. Random search es más rápido. Definir distribuciones para los hiperparámetros. Puedes correr repetidamente con distintos rangos. Es eficiente porque no gasta corridas (por ejemplo, cuando un parámetro no tiene mucho efecto). References "],
["redes-convolucionales.html", "Clase 9 Redes convolucionales 9.1 Filtros convolucionales 9.2 Filtros convolucionales para redes neuronales 9.3 Capas de agregación (pooling) 9.4 Ejemplo (arquitectura LeNet):", " Clase 9 Redes convolucionales Las redes convolucionales son un tipo de arquitectura de red que utiliza ciertos supuestos acerca de los pesos, en contraste a las redes totalmente conexas donde los pesos pueden tomar cualquier valor. Esos supuestos están adaptados para explotar la estructura señales, por ejemplo: sonido o imágenes. En estos dos casos, se trata de entradas que tienen una estructura adicional de proximidad (es decir, hay un concepto de pixeles cercanos y lejanos, igual de tiempos cercanos o lejanos). Las redes convolucionales son la arquitectura más exitosa para tratar con este tipo de problemas con estructura espacial o temporal. Hay tres consecuencias básicos que producen el uso de convoluciones, que explicamos primero intuitivamente: Conexiones ralas: existen unidades que solo están conectadas a una fracción relativamente chica de las unidades de la capa anterior (en lugar de todas, como en redes totalmente conexas). Por ejemplo: una unidad que busca detectar una forma en una esquina de una imagen no necesita estar conectada a pixeles de otras partes de la imagen. Parámetros compartidos: diferentes unidades tienen pesos compartidos. Por ejemplo: una unidad que quiere detectar el sonido de cierto animal al principio de la grabación puede utilizar los mismos pesos aplicados a otra parte de la grabación. Podemos “mover” el detector (con los mismos pesos) a lo largo de la grabación para ver en dónde detecta el sonido que nos interesa. Equivarianza: Una translación de una entrada (en tiempo o espacio), produce una traslación equivalente en la salida. Por ejemplo, Si una unidad asociada a la esquina superior derecha de una imagen detecta un número, entonces habrá otra unidad que puede detectar el número en la esquina inferior. Todas estas propiedades inducen estructura en comparación con una red totalmente conexa. Cuando esa estructura es la apropiada, no introduce sesgo adicional y reduce considerablemente la varianza. El éxito de este tipo de redes (como las convolucionales) es encontrar la estructura apropiada para el problema que estamos tratando. 9.1 Filtros convolucionales Filtros en una dimensión Comenzamos por considerar filtros para una serie de tiempo. Un filtro es una transformación de una señal que pretende extraer ciertas características y suprimir otras. Por ejemplo, consideramos la siguiente serie, y promedios móviles centrados de longitud 5. Los promedios móviles filtran las componentes de frecuencia alta (variaciones en tiempos cortos), y nos dejan con la variación de mayor frecuencia: library(tidyverse) library(RcppRoll) h &lt;- function(x){ifelse(x&gt;0,x,0)} datos &lt;- data_frame(t = 1:length(BJsales), serie = as.numeric(BJsales) + rnorm(length(BJsales), 0, 10)) %&gt;% mutate(promedio_mov = roll_mean(serie, 5, align=&#39;center&#39;, fill = NA)) ggplot(filter(datos, t &lt; 100), aes(x=t, y=serie)) + geom_line() + geom_line(aes(y=promedio_mov), colour=&#39;red&#39;, size=1.2) Podemos escribir este filtro de la siguiente manera: si \\(x_t\\) representa la serie original, y \\(y_t\\) la serie filtrada, entonces \\[ y_t = \\frac{1}{5}(x_{t-2} + x_{t-1} + x_t + x_{t+1}+x_{t+2})\\] Podemos escribir esta operación poniendo \\[f =\\frac{1}{5} (\\ldots, 0,0,1,1,1,1,1,0,0,\\ldots)\\] donde \\(f_s=1/5\\) para \\(s=-2,-1,0,1,2\\) y cero en otro caso. Entonces \\[y_t = \\cdots + x_{t-2}f_{-2} + x_{t-1}f_{-1} + x_{t}f_{0} +x_{t+1}f_{1} +x_{t+2}f_{2}\\] Que también se puede escribir como \\[\\begin{equation} y_t = \\sum_{s=-\\infty}^{\\infty} x_s f_{s-t} \\end{equation}\\] Nótese que estamos moviendo el filtro \\(f\\) a lo largo de la serie (tiempo) y aplicándolo cada vez. Observación: en matemáticas y procesamiento de señales, la convolución es más comunmente \\[\\begin{equation} y_t = \\sum_{s=-\\infty}^{\\infty} x_s f_{t-s}, \\end{equation}\\] mientras que la fórmula que nosotros usamos se llama correlación cruzada. En redes neuronales se dice filtro convolucional, aunque estrictamente usa la correlación cruzada (por ejemplo en Tensorflow). Este es un ejemplo de filtro convolucional del tipo que se usa en redes neuronales: es una vector \\(f\\) que se aplica a la serie \\(x\\) como en la ecuación anterior para obtener una serie transformada (filtrada) \\(y\\). El vector se desplaza a lo largo de la serie par obtener los distintos valores filtrados. Otro ejemplo son las primeras diferencias: la diferencia del valor actual menos el anterior. Este filtro toma valores altos cuando la serie crece y bajos cuando decrece: datos &lt;- datos %&gt;% mutate(dif = promedio_mov - lag(promedio_mov)) ggplot(datos, aes(x=t, y=dif)) + geom_line() + geom_abline(slope=0, intercept=0) ## Warning: Removed 5 rows containing missing values (geom_path). ¿Cuál es el filtro \\(f\\) en este caso? Filtros convolucionales en dos dimensiones En dos dimensiones, nuestro filtro es una matriz \\(f_{i,j}\\), que se aplica a una matriz \\(x_{i,j}\\) (podemos pensar que es una imagen) alrededor de cada posible pixel, para obtener la matriz (imagen) filtrada \\(y_{i,j}\\) dada por \\[\\begin{equation} y_{a,b} = \\sum_{s,t=-\\infty}^{\\infty} x_{s,t} f_{s-a,t-b} \\end{equation}\\] A la matriz \\(f\\) se le llama matriz convolucional, kernel o máscara del filtro Por ejemplo, consideremos el filtro de 3x3 filtro_difuminar &lt;- matrix(rep(1/9,9), 3,3, byrow=T) filtro_difuminar ## [,1] [,2] [,3] ## [1,] 0.1111111 0.1111111 0.1111111 ## [2,] 0.1111111 0.1111111 0.1111111 ## [3,] 0.1111111 0.1111111 0.1111111 El centro de este filtro se sobrepone sobre la cada pixel de la imagen \\(x\\), se multiplican los valores de la imagen por los del filtro y se suma para obtener el nuevo pixel de la imagen \\(y\\). ¿Qué efecto tiene este filtro? Este filtro promedia los pixeles de un parche de 3x3 de la imagen, o suaviza la imagen. Es el análogo en 2 dimensiones del filtro de promedios móviles que vimos arriba. library(imager) estatua &lt;- load.image(&#39;figuras/escultura.jpg&#39;) %&gt;% grayscale plot(estatua, axes=FALSE) estatua_mat &lt;- as.array(estatua) dim(estatua_mat) ## [1] 174 240 1 1 estatua_dif &lt;- array(0, c(dim(estatua)[1]-1, dim(estatua)[2]-1, 1, 1)) # Ojo: esta manera es muy lenta: si necesitas convoluciones a mano busca # paquetes apropiados for(i in 2:dim(estatua_dif)[1]){ for(j in 2:dim(estatua_dif)[2]){ estatua_dif[i, j, 1, 1] &lt;- sum(filtro_difuminar*estatua[(i-1):(i+1), (j-1):(j+1), 1, 1]) } } plot(as.cimg(estatua_dif), axes=FALSE) Podemos intentar otro filtro, que detecta bordes de arriba hacia abajo (es decir, cambios de intensidad que van de bajos a altos conforme bajamos en la imagen): filtro_borde &lt;- (matrix(c(-1, -1, -1, 0, 0, 0, 1, 1, 1), 3, 3, byrow=T)) filtro_borde ## [,1] [,2] [,3] ## [1,] -1 -1 -1 ## [2,] 0 0 0 ## [3,] 1 1 1 estatua_filtrada &lt;- array(0, c(dim(estatua_dif)[1]-1, dim(estatua_dif)[2]-1, 1, 1)) for(i in 2:dim(estatua_filtrada)[1]){ for(j in 2:dim(estatua_filtrada)[2]){ estatua_filtrada[i,j,1,1] &lt;- sum(t(filtro_borde)*estatua_dif[(i - 1):(i + 1),(j - 1):(j + 1), 1, 1]) } } plot(as.cimg(estatua_filtrada)) Este filtro toma valores altos cuando hay un gradiente de intensidad de arriba hacia abajo. ¿Cómo harías un filtro que detecta curvas? Considera el siguiente ejemplo, en donde construimos un detector de diagonales: library(keras) mnist &lt;- dataset_mnist() digito &lt;- t(mnist$train$x[10,,]) plot(as.cimg(digito)) filtro_diag &lt;- matrix(rep(-1,25), 5, 5) diag(filtro_diag) &lt;- 2 for(i in 1:4){ filtro_diag[i, i+1] &lt;- 1 filtro_diag[i+1, i] &lt;- 1 } filtro_diag_1 &lt;- filtro_diag[, 5:1] filtro_diag_1 ## [,1] [,2] [,3] [,4] [,5] ## [1,] -1 -1 -1 1 2 ## [2,] -1 -1 1 2 1 ## [3,] -1 1 2 1 -1 ## [4,] 1 2 1 -1 -1 ## [5,] 2 1 -1 -1 -1 digito_f &lt;- array(0, c(dim(digito)[1]-2, dim(digito)[2]-2, 1, 1)) for(i in 3:dim(digito_f)[1]){ for(j in 3:dim(digito_f)[2]){ digito_f[i,j,1,1] &lt;- sum((filtro_diag_1)*digito[(i-2):(i+2),(j-2):(j+2)]) } } plot(as.cimg(digito_f)) 9.2 Filtros convolucionales para redes neuronales En redes neuronales, la idea es que que qeremos aprender estos filtros a partir de los datos. La imagen filtrada nos da las entradas de la siguiente capa. Entonces, supongamos que un filtro de 3x3 está dado por ciertos pesos \\[ f = \\left[ {\\begin{array}{ccccc} \\theta_{1,1} &amp; \\theta_{1,2} &amp; \\theta_{1,3} \\\\ \\theta_{2,1} &amp; \\theta_{2,2} &amp; \\theta_{2,3} \\\\ \\theta_{3,1} &amp; \\theta_{3,2} &amp; \\theta_{3,3} \\\\ \\end{array} } \\right] \\] Este filtro lo aplicaremos a cada parche de la imagen de entrada. Empezamos aplicando el filtro sobre la parte superior izquierda de la imagen para calcular la primera unidad de salida \\(a_1\\) knitr::include_graphics(&#39;./figuras/conv_1.png&#39;) Ahora nos movemos un pixel a la derecha y aplicamos el filtro para obtener la unidad \\(a_2\\). Podemos poner las unidades en el orden de la imagen para entender mejor las unidades: knitr::include_graphics(&#39;./figuras/conv_2.png&#39;) Al aplicar el filtro a lo largo de toda la imagen, obtenemos 9 unidades de salida: knitr::include_graphics(&#39;./figuras/conv_3.png&#39;) Finalmente, podemos agregar más parámetros para otros filtros: knitr::include_graphics(&#39;./figuras/conv_4.png&#39;) 9.3 Capas de agregación (pooling) En procesamiento de imágenes y redes convolucionales también se utilizan capas de pooling. Estas se encargan de resumir pixeles adyacentes. Una de las más populares es el max pooling, donde en cada parche de la imagen tomamos el máximo. knitr::include_graphics(&#39;./figuras/pooling_1.png&#39;) Hay dos razones para usar estas agregaciones: Obtener invarianza a translaciones adicional (en un parche de la imagen, solo importa si alguno de las unidades agregadas está activa para que el max-pooling esté activo) Reduce el tamaño de la imagen (o de una capa de convolución) y en consecuencia tenemos menos parámetros que tratar en las siguientes capas 9.4 Ejemplo (arquitectura LeNet): Las capas de pooling generalmente se aplican después de las convoluciones, y hacia al final usamos capas totalmente conexas. Estas últimas capas se encargan de combinar la información de las capas de convolución anteriores, que detectan patrones simples, para obtener unidades que se encargan de detectar patrones más complejos. knitr::include_graphics(&#39;./figuras/lenet_1.png&#39;) ## [1] 7291 257 ## ## 0 1 2 3 4 5 6 7 8 9 ## 1194 1005 731 658 652 556 664 645 542 644 Ponemos el rango entre [0,1] (pixeles positivos) y usamos codificación dummy x_train &lt;- digitos_entrena %&gt;% select(contains(&#39;pixel&#39;)) %&gt;% as.matrix + 1 x_train &lt;- x_train/2 dim(x_train) &lt;- c(nrow(x_train), 16, 16, 1) x_test &lt;- digitos_prueba %&gt;% select(contains(&#39;pixel&#39;)) %&gt;% as.matrix + 1 x_test &lt;- x_test/2 dim(x_test) &lt;- c(nrow(x_test), 16, 16, 1) y_train &lt;- to_categorical(digitos_entrena$digito, 10) y_test &lt;- to_categorical(digitos_prueba$digito, 10) Para fines de interpretación, agregaremos regularización ridge además de dropout (puedes obtener buen desempeño usando solamente dropout), y usaremos una arquitectura un poco más simple: # reproducibilidad en keras es más difícil, pues hay varias capas de software # set.seed no funciona. Podemos usar use_session_with_seed https://keras.rstudio.com/articles/faq.html#how-can-i-obtain-reproducible-results-using-keras-during-development # use_session_with_seed(72881) ## Set session seed to 72881 (disabled GPU, CPU parallelism) usar_cache &lt;- TRUE if(!usar_cache){ # correr modelo y guardarlo serializado set.seed(213) lambda &lt;- 0.01 model_2 &lt;- keras_model_sequential() model_2 %&gt;% layer_conv_2d(filters = 8, kernel_size = c(5,5), activation = &#39;relu&#39;, input_shape = c(16,16,1), padding =&#39;same&#39;, kernel_regularizer = regularizer_l2(lambda), name = &#39;conv_1&#39;) %&gt;% layer_max_pooling_2d(pool_size = c(2, 2)) %&gt;% layer_dropout(rate = 0.25) %&gt;% layer_conv_2d(filters = 12, kernel_size = c(3,3), activation = &#39;relu&#39;, kernel_regularizer = regularizer_l2(lambda), name = &#39;conv_2&#39;) %&gt;% layer_max_pooling_2d(pool_size = c(2, 2)) %&gt;% layer_dropout(rate = 0.25) %&gt;% layer_flatten() %&gt;% layer_dense(units = 50, activation = &#39;relu&#39;, kernel_regularizer = regularizer_l2(lambda)) %&gt;% layer_dropout(rate = 0.5) %&gt;% layer_dense(units = 10, activation = &#39;softmax&#39;, kernel_regularizer = regularizer_l2(lambda)) model_2 %&gt;% compile( loss = &#39;categorical_crossentropy&#39;, optimizer = optimizer_sgd(lr = 0.02, momentum = 0.5), metrics = c(&#39;accuracy&#39;,&#39;categorical_crossentropy&#39;) ) history &lt;- model_2 %&gt;% fit( x_train, y_train, epochs = 600, batch_size = 256, verbose = 0, validation_data = list(x_test, y_test) ) model_serialized &lt;- serialize_model(model_2) saveRDS(model_serialized, file= &#39;cache_obj/red_conv_ser.rds&#39;) } else { # cargar modelo serializado model_serialized &lt;- readRDS(file = &#39;cache_obj/red_conv_ser.rds&#39;) model_2 &lt;- unserialize_model(model_serialized) } score &lt;- model_2 %&gt;% evaluate(x_test, y_test) score ## $loss ## [1] 0.5679085 ## ## $acc ## [1] 0.9387145 ## ## $categorical_crossentropy ## [1] 0.2172532 score_entrena &lt;- model_2 %&gt;% evaluate(x_train, y_train) score_entrena ## $loss ## [1] 0.4763389 ## ## $acc ## [1] 0.9709231 ## ## $categorical_crossentropy ## [1] 0.1256836 Conteo de parámetros En pimer lugar, contemos el número de parámetros. Podemos ver los matrices donde están guardados los pesos: wts &lt;- get_weights(model_2) lapply(wts, dim) ## [[1]] ## [1] 5 5 1 8 ## ## [[2]] ## [1] 8 ## ## [[3]] ## [1] 3 3 8 12 ## ## [[4]] ## [1] 12 ## ## [[5]] ## [1] 108 50 ## ## [[6]] ## [1] 50 ## ## [[7]] ## [1] 50 10 ## ## [[8]] ## [1] 10 La primera capa convolucional está construida con 8 filtros, cada uno de tamaño 5, 5. Adicionalmente, tenemos los 8 sesgos. La segunda capa convolucional está construida con 12 filtros, cada uno de tamaño 3, 3, para cada una de las 12 imágenes filtradas de la capa anterior. Adicionalmente, tenemos los 12 sesgos. num_params &lt;- sapply(wts, function(x){ length(as.numeric(x))}) num_params ## [1] 200 8 864 12 5400 50 500 10 En la primera capa convolucional tenemos 200 pesos más 8 sesgos, para un total de 208 parámetros. Esto es porque tenemos En la segunda capa convolucional tenemos 864 pesos más 12 sesgos, para un total de 876 parámetros. En la primera capa densa tenemos 5400 pesos más 50 sesgos, para un total de 5450 parámetros. En la segunda capa densa tenemos 500 pesos más 10 sesgos, para un total de 510 parámetros. El total de parámetros es 7044. Recalcula para confirmar este conteo de número de parámetros. Observación: la segunda capa convolucional trata cada una de las 8 “imágenes” filtradas como una nueva imagen. Cada una de ella tendrá 12 filtros asociados, y estos 12 filtros se suman para producir las activaciones de la capa de salida de esta segunda convolución. Pesos y activaciones Y ahora graficamos los filtros aprendidos en la primera capa: library(scales) capa_1 &lt;- wts[[1]] capa_list &lt;- lapply(1:8, function(i){ data_frame(val = as.numeric(t(capa_1[,,1,i])), pixel = 1:25, unidad=i) }) %&gt;% bind_rows %&gt;% mutate(y = (pixel-1) %% 5, x = (pixel-1) %/% 5) %&gt;% group_by(unidad) capa_list ## # A tibble: 200 x 5 ## # Groups: unidad [8] ## val pixel unidad y x ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.131 1 1 0 0 ## 2 0.278 2 1 1 0 ## 3 0.246 3 1 2 0 ## 4 -0.00461 4 1 3 0 ## 5 -0.144 5 1 4 0 ## 6 -0.165 6 1 0 1 ## 7 0.0589 7 1 1 1 ## 8 0.417 8 1 2 1 ## 9 0.268 9 1 3 1 ## 10 -0.0650 10 1 4 1 ## # ... with 190 more rows graficar_pesos &lt;- function(capa_list, ncol = 4, blank = FALSE){ g_salida &lt;- ggplot(capa_list, aes(x=x, y=-y)) + geom_raster(aes(fill=val), interpolate=FALSE) + facet_wrap(~unidad, ncol = ncol) + coord_equal() + scale_fill_gradient2(low = &quot;red&quot;, mid=&#39;gray80&#39;,high = &quot;black&quot;) if(blank){ g_salida &lt;- g_salida + theme(strip.background = element_blank(), strip.text = element_blank()) } g_salida } graficar_pesos(capa_list) Nota que estos son detectores de formas geométricas simples (diagonales, rectas). 1, 2 y 7 detectan diagonales. 5,6 y 8 detectan bordes horizontales 3 y 4 detectan bordes verticales Podemos ver las activaciones de la primera capa para algunos dígitos: red_conv_1 &lt;- keras_model(inputs = model_2$input, outputs = get_layer(model_2, &#39;conv_1&#39;)$output) activaciones_1 &lt;- predict(red_conv_1, x_train[1:50,,,,drop=FALSE]) graficar_activaciones &lt;- function(activaciones, ind){ probas_ind &lt;- activaciones[ind,,,] # drop primera dimensión x_tamaño &lt;- dim(probas_ind)[1] y_tamaño &lt;- dim(probas_ind)[2] num_filtros &lt;- dim(probas_ind)[3] unidades_df &lt;- lapply(1:dim(probas_ind)[3], function(i){ mat &lt;- t(probas_ind[,,i]) data_frame(val = as.numeric(mat), pixel = 1:(x_tamaño*y_tamaño), unidad = i) %&gt;% mutate(y = (pixel-1) %% x_tamaño, x = (pixel-1) %/% y_tamaño) %&gt;% group_by(unidad) }) dat &lt;- bind_rows(unidades_df) ggplot(dat, aes(x=x, y=-y, fill=val)) + geom_tile() + facet_wrap(~unidad, ncol = 4) + scale_fill_gradient2(low = &quot;gray60&quot;, mid = &quot;white&quot;, high = &quot;blue&quot;, midpoint = 0.5) + coord_equal() } graficar_activaciones(activaciones_1, 4) graficar_activaciones(activaciones_1, 5) graficar_activaciones(activaciones_1, 15) graficar_activaciones(activaciones_1, 8) graficar_activaciones(activaciones_1, 33) La segunda es capa de convolución es más difícil de interpretar. En esta capa, cada unidad de salida es combinación del filtrado de las 8 “imágenes” de la capa anterior. Los filtros aprendidos en la segunda capa son: capa_2 &lt;- wts[[3]] out &lt;- list() for(j in 1:8){ out_temp &lt;- list() for(i in 1:12){ dat_lay &lt;- data_frame(val = as.numeric(capa_2[,,j,i]), pixel = 1:9, unidad=i, origen = j) %&gt;% mutate(y = (pixel-1) %% 3, x = (pixel-1) %/% 3) out_temp[[i]] &lt;- dat_lay } out[[j]] &lt;- bind_rows(out_temp) } capa_out &lt;- bind_rows(out) library(gridExtra) ## ## Attaching package: &#39;gridExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine g_1 &lt;- graficar_pesos(capa_list, ncol = 1, blank = TRUE) g_2 &lt;- ggplot(capa_out, aes(x = x, y = -y)) + geom_tile(aes(fill = (val))) + facet_grid(origen ~ unidad) + coord_equal() + scale_fill_gradient2(low = &quot;red&quot;, mid=&#39;gray90&#39;,high = &quot;black&quot;) + theme(strip.background = element_blank(), strip.text = element_blank()) g_1 g_2 Nótese que en esta gráfica los filtros claramente tienen una estructura espacial (en general no se ven ruidosos). En esta gráfica: los renglones son las unidades de la capa origen (después de la primera convolución), las columnas son las unidades de salida de la segunda capa de convolución. Por ejemplo, consideremos los filtros de la primera y la segunda unidad de salida: ggplot(capa_out %&gt;% filter(unidad %in% c(1, 2, 3)), aes(x = x, y = -y)) + geom_tile(aes(fill = (val))) + facet_grid(origen ~ unidad) + coord_equal()+ scale_fill_gradient2(low = &quot;red&quot;, mid=&#39;gray90&#39;,high = &quot;black&quot;) + theme(strip.background = element_blank(), strip.text = element_blank()) Veamos las activaciones de las siguiente capa convolucional: red_conv_2 &lt;- keras_model(inputs = model_2$input, outputs = get_layer(model_2, &#39;conv_2&#39;)$output) activaciones_2 &lt;- predict(red_conv_2, x_train[1:50,,,,drop=FALSE]) dim(activaciones_2) ## [1] 50 6 6 12 require(gridExtra) grid.arrange(graficar_activaciones(activaciones_1, 4), graficar_activaciones(activaciones_2, 4), ncol=2) grid.arrange(graficar_activaciones(activaciones_1, 5), graficar_activaciones(activaciones_2, 5), ncol=2) grid.arrange(graficar_activaciones(activaciones_1, 6), graficar_activaciones(activaciones_2, 6), ncol=2) grid.arrange(graficar_activaciones(activaciones_1, 15), graficar_activaciones(activaciones_2, 15), ncol=2) grid.arrange(graficar_activaciones(activaciones_1, 30), graficar_activaciones(activaciones_2, 30), ncol=2) grid.arrange(graficar_activaciones(activaciones_1, 50), graficar_activaciones(activaciones_2, 50), ncol=2) "],
["diagnostico-y-mejora-de-modelos.html", "Clase 10 Diagnóstico y mejora de modelos 10.1 Aspectos generales 10.2 ¿Qué hacer cuando el desempeño no es satisfactorio? 10.3 Pipeline de procesamiento 10.4 Diagnósticos: sesgo y varianza 10.5 Refinando el pipeline 10.6 Consiguiendo más datos 10.7 Usar datos adicionales 10.8 Examen de modelo y Análisis de errores", " Clase 10 Diagnóstico y mejora de modelos 10.1 Aspectos generales Al comenzar un proyecto de machine learning, las primeras consideraciones deben ser: Establecer métricas de error apropiadas para el problema, y cuál es el máximo valor de este error requerido para nuestra aplicación. Construir un pipeline lo antes posible que vaya de datos hasta medición de calidad de los modelos. Este pipeline deberá, al menos, incluir cálculos de entradas, medición de desempeño de los modelos y cálculos de otros diagnósticos (como error de entrenamiento, convergencia de algoritmos, etc.) En general, es difícil preveer exactamente qué va a funcionar para un problema particular, y los diagnósticos que veremos requieren de haber ajustado modelos. Nuestra primera recomendación para ir hacia un modelo de mejor desempeño es: Es mejor y más rápido comenzar rápido, aún con un modelo simple, con entradas {} (no muy refinadas), y con los datos que tenemos a mano. De esta forma podemos aprender más rápido. Demasiado tiempo pensando, discutiendo, o diseñando qué algoritmo deberíamos usar, cómo deberíamos construir las entradas, etc. es muchas veces tiempo perdido. Con el pipeline establecido, si el resultado no es satisfactorio, entonces tenemos que tomar decisiones para mejorar. 10.2 ¿Qué hacer cuando el desempeño no es satisfactorio? Supongamos que tenemos un clasificador construido con regresión logística regularizada, y que cuando lo aplicamos a nuestra muestra de prueba el desempeño es malo. ¿Qué hacer? Algunas opciones: Conseguir más datos de entrenamiento. Reducir el número de entradas por algún método (eliminación manual, componentes principales, etc.) Construir más entradas utilizando distintos enfoques o fuentes de datos. Incluir variables derivadas adicionales e interacciones. Intentar construir una red neuronal para predecir (otro método). Aumentar la regularización. Disminuir la regularización. Correr más tiempo el algoritmo de ajuste. ¿Con cuál empezar? Cada una de estas estrategias intenta arreglar distintos problemas. En lugar de intentar al azar distintas cosas, que consumen tiempo y dinero y no necesariamente nos van a llevar a mejoras, a continuación veremos diagnósticos y recetas que nos sugieren la mejor manera de usar nuestro tiempo para mejorar nuestros modelos. Usaremos el siguiente ejemplo para ilustrar los conceptos: Ejemplo Nos interesa hacer una predicción de polaridad de críticas o comentarios de pelíıculas: buscamos clasificar una reseña como positiva o negativa dependiendo de su contenido. Tenemos dos grupos de reseñas separadas en positivas y negativas (estos datos fueron etiquetados por una persona). Cada reseña está un archivo de texto, y tenemos 1000 de cada tipo: negativos &lt;- list.files(&#39;./datos/sentiment/neg&#39;, full.names = TRUE) positivos &lt;- list.files(&#39;./datos/sentiment/pos&#39;, full.names = TRUE) head(negativos) ## [1] &quot;./datos/sentiment/neg/cv000_29416.txt&quot; ## [2] &quot;./datos/sentiment/neg/cv001_19502.txt&quot; ## [3] &quot;./datos/sentiment/neg/cv002_17424.txt&quot; ## [4] &quot;./datos/sentiment/neg/cv003_12683.txt&quot; ## [5] &quot;./datos/sentiment/neg/cv004_12641.txt&quot; ## [6] &quot;./datos/sentiment/neg/cv005_29357.txt&quot; head(positivos) ## [1] &quot;./datos/sentiment/pos/cv000_29590.txt&quot; ## [2] &quot;./datos/sentiment/pos/cv001_18431.txt&quot; ## [3] &quot;./datos/sentiment/pos/cv002_15918.txt&quot; ## [4] &quot;./datos/sentiment/pos/cv003_11664.txt&quot; ## [5] &quot;./datos/sentiment/pos/cv004_11636.txt&quot; ## [6] &quot;./datos/sentiment/pos/cv005_29443.txt&quot; length(negativos) ## [1] 1000 length(positivos) ## [1] 1000 read_file(negativos[1]) [1] “plot : two teen couples go to a church party , drink and then drive . get into an accident . of the guys dies , but his girlfriend continues to see him in her life , and has nightmares . ’s the deal ? the movie and &quot; sorta &quot; find out . . . : a mind-fuck movie for the teen generation that touches on a very cool idea , but presents it in a very bad package . is what makes this review an even harder one to write , since i generally applaud films which attempt to break the mold , mess with your head and such ( lost highway &amp; memento ) , but there are good and bad ways of making all types of films , and these folks just didn’t snag this one correctly . seem to have taken this pretty neat concept , but executed it terribly . what are the problems with the movie ? , its main problem is that it’s simply too jumbled . starts off &quot; normal &quot; but then downshifts into this &quot; fantasy &quot; world in which you , as an audience member , have no idea what’s going on . are dreams , there are characters coming back from the dead , there are others who look like the dead , there are strange apparitions , there are disappearances , there are a looooot of chase scenes , there are tons of weird things that happen , and most of it is simply not explained . i personally don’t mind trying to unravel a film every now and then , but when all it does is give me the same clue over and over again , i get kind of fed up after a while , which is this film’s biggest problem . ’s obviously got this big secret to hide , but it seems to want to hide it completely until its final five minutes . do they make things entertaining , thrilling or even engaging , in the meantime ? really . sad part is that the arrow and i both dig on flicks like this , so we actually figured most of it out by the half-way point , so all of the strangeness after that did start to make a little bit of sense , but it still didn’t the make the film all that more entertaining . guess the bottom line with movies like this is that you should always make sure that the audience is &quot; into it &quot; even before they are given the secret password to enter your world of understanding . mean , showing melissa sagemiller running away from visions for about 20 minutes throughout the movie is just plain lazy ! ! , we get it . . . there people chasing her and we don’t know who they are . we really need to see it over and over again ? about giving us different scenes offering further insight into all of the strangeness going down in the movie ? , the studio took this film away from its director and chopped it up themselves , and it shows . might’ve been a pretty decent teen mind-fuck movie in here somewhere , but i guess &quot; the suits &quot; decided that turning it into a music video with little edge , would make more sense . actors are pretty good for the most part , although wes bentley just seemed to be playing the exact same character that he did in american beauty , only in a new neighborhood . my biggest kudos go out to sagemiller , who holds her own throughout the entire film , and actually has you feeling her character’s unraveling . , the film doesn’t stick because it doesn’t entertain , it’s confusing , it rarely excites and it feels pretty redundant for most of its runtime , despite a pretty cool ending and explanation to all of the craziness that came before it . , and by the way , this is not a horror or teen slasher flick . . . it’s packaged to look that way because someone is apparently assuming that the genre is still hot with the kids . also wrapped production two years ago and has been sitting on the shelves ever since . . . . skip ! ’s joblo coming from ? nightmare of elm street 3 ( 7/10 ) - blair witch 2 ( 7/10 ) - the crow ( 9/10 ) - the crow : salvation ( 4/10 ) - lost highway ( 10/10 ) - memento ( 10/10 ) - the others ( 9/10 ) - stir of echoes ( 8/10 ) ” read_file(positivos[1]) [1] “films adapted from comic books have had plenty of success , whether they’re about superheroes ( batman , superman , spawn ) , or geared toward kids ( casper ) or the arthouse crowd ( ghost world ) , but there’s never really been a comic book like from hell before . starters , it was created by alan moore ( and eddie campbell ) , who brought the medium to a whole new level in the mid ‘80s with a 12-part series called the watchmen . say moore and campbell thoroughly researched the subject of jack the ripper would be like saying michael jackson is starting to look a little odd . book ( or &quot; graphic novel , &quot; if you will ) is over 500 pages long and includes nearly 30 more that consist of nothing but footnotes . other words , don’t dismiss this film because of its source . you can get past the whole comic book thing , you might find another stumbling block in from hell’s directors , albert and allen hughes . the hughes brothers to direct this seems almost as ludicrous as casting carrot top in , well , anything , but riddle me this : who better to direct a film that’s set in the ghetto and features really violent street crime than the mad geniuses behind menace ii society ? ghetto in question is , of course , whitechapel in 1888 london’s east end . ’s a filthy , sooty place where the whores ( called &quot; unfortunates &quot; ) are starting to get a little nervous about this mysterious psychopath who has been carving through their profession with surgical precision . the first stiff turns up , copper peter godley ( robbie coltrane , the world is not enough ) calls in inspector frederick abberline ( johnny depp , blow ) to crack the case . , a widower , has prophetic dreams he unsuccessfully tries to quell with copious amounts of absinthe and opium . arriving in whitechapel , he befriends an unfortunate named mary kelly ( heather graham , say it isn’t so ) and proceeds to investigate the horribly gruesome crimes that even the police surgeon can’t stomach . don’t think anyone needs to be briefed on jack the ripper , so i won’t go into the particulars here , other than to say moore and campbell have a unique and interesting theory about both the identity of the killer and the reasons he chooses to slay . the comic , they don’t bother cloaking the identity of the ripper , but screenwriters terry hayes ( vertical limit ) and rafael yglesias ( les mis ? rables ) do a good job of keeping him hidden from viewers until the very end . ’s funny to watch the locals blindly point the finger of blame at jews and indians because , after all , an englishman could never be capable of committing such ghastly acts . from hell’s ending had me whistling the stonecutters song from the simpsons for days ( &quot; who holds back the electric car/who made steve guttenberg a star ? &quot; ) . ’t worry - it’ll all make sense when you see it . onto from hell’s appearance : it’s certainly dark and bleak enough , and it’s surprising to see how much more it looks like a tim burton film than planet of the apes did ( at times , it seems like sleepy hollow 2 ) . print i saw wasn’t completely finished ( both color and music had not been finalized , so no comments about marilyn manson ) , but cinematographer peter deming ( don’t say a word ) ably captures the dreariness of victorian-era london and helped make the flashy killing scenes remind me of the crazy flashbacks in twin peaks , even though the violence in the film pales in comparison to that in the black-and-white comic . winner martin childs’ ( shakespeare in love ) production design turns the original prague surroundings into one creepy place . the acting in from hell is solid , with the dreamy depp turning in a typically strong performance and deftly handling a british accent . holm ( joe gould’s secret ) and richardson ( 102 dalmatians ) log in great supporting roles , but the big surprise here is graham . cringed the first time she opened her mouth , imagining her attempt at an irish accent , but it actually wasn’t half bad . film , however , is all good . 2 : 00 - r for strong violence/gore , sexuality , language and drug content ” Consideremos primero la métrica de error, que depende de nuestra aplicación. En este caso, quisiéramos hacer dar una calificación a cada película basada en el % de reseñas positivas que tiene. Supongamos que se ha decidido que necesitamos al menos una tasa de correctos de 90% para que el score sea confiable (cómo calcularías algo así?). Ahora necesitamos construir un pipeline para obtener las primeras predicciones. Tenemos que pensar qué entradas podríamos construir. 10.3 Pipeline de procesamiento Empezamos por construir funciones para leer datos (ver script). Construimos un data frame: source(&#39;./scripts/funciones_sentiment.R&#39;) df &lt;- prep_df(&#39;./datos/sentiment/&#39;) %&gt;% unnest(texto) nrow(df) [1] 2000 df$texto[1] [1] “Review films adapted from comic books have had plenty of success , whether they’re about superheroes ( batman , superman , spawn ) , or geared toward kids ( casper ) or the arthouse crowd ( ghost world ) , but there’s never really been a comic book like from hell before . for starters , it was created by alan moore ( and eddie campbell ) , who brought the medium to a whole new level in the mid ‘80s with a 12-part series called the watchmen . to say moore and campbell thoroughly researched the subject of jack the ripper would be like saying michael jackson is starting to look a little odd . the book ( or &quot; graphic novel , &quot; if you will ) is over 500 pages long and includes nearly 30 more that consist of nothing but footnotes . in other words , don’t dismiss this film because of its source . if you can get past the whole comic book thing , you might find another stumbling block in from hell’s directors , albert and allen hughes . getting the hughes brothers to direct this seems almost as ludicrous as casting carrot top in , well , anything , but riddle me this : who better to direct a film that’s set in the ghetto and features really violent street crime than the mad geniuses behind menace ii society ? the ghetto in question is , of course , whitechapel in 1888 london’s east end . it’s a filthy , sooty place where the whores ( called &quot; unfortunates &quot; ) are starting to get a little nervous about this mysterious psychopath who has been carving through their profession with surgical precision . when the first stiff turns up , copper peter godley ( robbie coltrane , the world is not enough ) calls in inspector frederick abberline ( johnny depp , blow ) to crack the case . abberline , a widower , has prophetic dreams he unsuccessfully tries to quell with copious amounts of absinthe and opium . upon arriving in whitechapel , he befriends an unfortunate named mary kelly ( heather graham , say it isn’t so ) and proceeds to investigate the horribly gruesome crimes that even the police surgeon can’t stomach . i don’t think anyone needs to be briefed on jack the ripper , so i won’t go into the particulars here , other than to say moore and campbell have a unique and interesting theory about both the identity of the killer and the reasons he chooses to slay . in the comic , they don’t bother cloaking the identity of the ripper , but screenwriters terry hayes ( vertical limit ) and rafael yglesias ( les mis ? rables ) do a good job of keeping him hidden from viewers until the very end . it’s funny to watch the locals blindly point the finger of blame at jews and indians because , after all , an englishman could never be capable of committing such ghastly acts . and from hell’s ending had me whistling the stonecutters song from the simpsons for days ( &quot; who holds back the electric car/who made steve guttenberg a star ? &quot; ) . don’t worry - it’ll all make sense when you see it . now onto from hell’s appearance : it’s certainly dark and bleak enough , and it’s surprising to see how much more it looks like a tim burton film than planet of the apes did ( at times , it seems like sleepy hollow 2 ) . the print i saw wasn’t completely finished ( both color and music had not been finalized , so no comments about marilyn manson ) , but cinematographer peter deming ( don’t say a word ) ably captures the dreariness of victorian-era london and helped make the flashy killing scenes remind me of the crazy flashbacks in twin peaks , even though the violence in the film pales in comparison to that in the black-and-white comic . oscar winner martin childs’ ( shakespeare in love ) production design turns the original prague surroundings into one creepy place . even the acting in from hell is solid , with the dreamy depp turning in a typically strong performance and deftly handling a british accent . ians holm ( joe gould’s secret ) and richardson ( 102 dalmatians ) log in great supporting roles , but the big surprise here is graham . i cringed the first time she opened her mouth , imagining her attempt at an irish accent , but it actually wasn’t half bad . the film , however , is all good . 2 : 00 - r for strong violence/gore , sexuality , language and drug content” Ahora separamos una muestra de prueba (y una de entrenamiento más chica para simular después el proceso de recoger más datos): set.seed(94512) df$muestra &lt;- sample(c(&#39;entrena&#39;, &#39;prueba&#39;), 2000, prob = c(0.8, 0.2), replace = TRUE) table(df$muestra) ## ## entrena prueba ## 1575 425 df_ent &lt;- df %&gt;% filter(muestra == &#39;entrena&#39;) df_pr &lt;- df %&gt;% filter(muestra == &#39;prueba&#39;) df_ent &lt;- sample_n(df_ent, nrow(df_ent)) #permutamos al azar df_ent_grande &lt;- df_ent df_ent &lt;- df_ent %&gt;% sample_n(700) Intentemos algo simple para empezar: consideramos qué palabras contiene cada reseña, e intentamos clasificar en base esas palabras. Así que en primer lugar dividimos cada texto en tokens (pueden ser palabras, o sucesiones de caracteres o de palabras de tamaño fijo (n-gramas), oraciones, etc.). En este caso, usamos el paquete tidytext. La función unnest_tokens elimina signos de puntuación, convierte todo a minúsculas, y separa las palabras: Vamos a calcular los tokens y ordernarlos por frecuencia. Empezamos calculando nuestro vocabulario. Supongamos que usamos las 50 palabras más comunes, y usamos poca regularización: vocabulario &lt;- calc_vocabulario(df_ent, 50) head(vocabulario) ## # A tibble: 6 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 a 12904 ## 2 about 1228 ## 3 all 1464 ## 4 an 2000 ## 5 and 12173 ## 6 are 2359 tail(vocabulario) ## # A tibble: 6 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 what 1006 ## 2 when 1091 ## 3 which 1153 ## 4 who 1870 ## 5 with 3705 ## 6 you 1565 Todas las etapas de preprocesamiento deben hacerse en función de los datos de entrenamiento. En este ejemplo, podríamos cometer el error de usar todos los datos para calcular el vocabulario. Nuestras entradas aquí no se ven muy buenas: los términos más comunes son en su mayoría palabras sin significado, de modo que no esperamos un desempeño muy bueno. En este momento no nos preocupamos mucho por eso, queremos correr los primeros modelos. library(glmnet) mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda = 1e-1) ## [1] &quot;Tokenizar&quot; ## [1] &quot;Construir matrices X, y&quot; ## [1] &quot;Ajustar modelo&quot; ## [1] &quot;Evaluar modelo&quot; ## [1] &quot;Error entrenamiento: 0.31&quot; ## [1] &quot;Error prueba: 0.36&quot; ## [1] &quot;Devianza entrena:1.148&quot; ## [1] &quot;Devianza prueba:1.271&quot; 10.4 Diagnósticos: sesgo y varianza Y notamos que El error de entrenamiento no es satisfactorio: está muy por arriba de nuestro objetivo (10%) Hay algo de brecha entre entrenamiento y prueba, de modo que disminuir varianza puede ayudar. ¿Qué hacer? Nuestro clasificador ni siquiera puede clasificar bien la muestra de entrenamiento, lo que implica que nuestro modelo tiene sesgo alto. Controlar la varianza no nos va a ayudar a resolver nuestro problema en este punto. Podemos intentar un modelo más flexible. Error de entrenamiento demasiado alto indica que necesitamos probar con modelos más flexibles (disminuir el sesgo). Para disminuir el sesgo podemos: Expander el vocabulario (agregar más entradas) Crear nuevas entradas a partir de los datos (más informativas) Usar un método más flexible (como redes neuronales) Regularizar menos Cosas que no van a funcionar (puede bajar un poco el error de validación, pero el error de entrenamiento es muy alto): Conseguir más datos de entrenamiento (el error de entrenamiento va a subir, y el de validación va a quedar muy arriba, aunque disminuya) Regularizar más (misma razón) Usar un vocabulario más chico, eliminar entradas (misma razón) Por ejemplo, si juntáramos más datos de entrenamiento (con el costo que esto implica), obtendríamos: mod_x &lt;- correr_modelo(df_ent_grande, df_pr, vocabulario, lambda = 1e-1) ## [1] &quot;Tokenizar&quot; ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; ## [1] &quot;Construir matrices X, y&quot; ## [1] &quot;Ajustar modelo&quot; ## [1] &quot;Evaluar modelo&quot; ## [1] &quot;Error entrenamiento: 0.31&quot; ## [1] &quot;Error prueba: 0.35&quot; ## [1] &quot;Devianza entrena:1.187&quot; ## [1] &quot;Devianza prueba:1.246&quot; Vemos que aunque bajó ligeramente el error de prueba, el error es demasiado alto. Esta estrategia no funcionó con este modelo, y hubiéramos perdido tiempo y dinero (por duplicar el tamaño de muestra) sin obtener mejoras apreciables. Observación: el error de entrenamiento subió. ¿Puedes explicar eso? Esto sucede porque típicamente el error para cada caso individual de la muestra original sube, pues la optimización se hace sobre más casos. Es más difícil ajustar los datos de entrenamiento cuando tenemos más datos. En lugar de eso, podemos comenzar quitando regularización, por ejemplo mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda =1e-10) ## [1] &quot;Tokenizar&quot; ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; ## [1] &quot;Construir matrices X, y&quot; ## [1] &quot;Ajustar modelo&quot; ## [1] &quot;Evaluar modelo&quot; ## [1] &quot;Error entrenamiento: 0.29&quot; ## [1] &quot;Error prueba: 0.37&quot; ## [1] &quot;Devianza entrena:1.099&quot; ## [1] &quot;Devianza prueba:1.32&quot; Y notamos que reducimos un poco el sesgo. Por el momento, seguiremos intentando reducir sesgo. Podemos ahora incluir más variables vocabulario &lt;- calc_vocabulario(df_ent, 3000) mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda=1e-10) ## [1] &quot;Tokenizar&quot; ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; ## [1] &quot;Construir matrices X, y&quot; ## [1] &quot;Ajustar modelo&quot; ## [1] &quot;Evaluar modelo&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.38&quot; ## [1] &quot;Devianza entrena:0&quot; ## [1] &quot;Devianza prueba:7.66&quot; El sesgo ya no parece ser un problema: Ahora tenemos un problema de varianza. Una brecha grande entre entrenamiento y validación muchas veces indica sobreajuste (el problema es varianza). Podemos regularizar más: mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda=1e-6) ## [1] &quot;Tokenizar&quot; ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; ## [1] &quot;Construir matrices X, y&quot; ## [1] &quot;Ajustar modelo&quot; ## [1] &quot;Evaluar modelo&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.3&quot; ## [1] &quot;Devianza entrena:0&quot; ## [1] &quot;Devianza prueba:3.203&quot; mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda=0.05) ## [1] &quot;Tokenizar&quot; ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; ## [1] &quot;Construir matrices X, y&quot; ## [1] &quot;Ajustar modelo&quot; ## [1] &quot;Evaluar modelo&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.18&quot; ## [1] &quot;Devianza entrena:0.072&quot; ## [1] &quot;Devianza prueba:0.764&quot; 10.5 Refinando el pipeline Refinar el pipeline para producir mejores entradas, o corridas más rápidas, generalmente es una buena inversión de tiempo (aunque es mejor no hacerlo prematuramente). El error de entrenamiento es satisfactorio todavía, y nos estamos acercando a nuestro objetivo (intenta regularizar más para verificar que el problema ahora es sesgo). En este punto, podemos intentar reducir varianza (reducir error de prueba con algún incremento en error de entrenamiento). Buscar más casos de entrenamiento: si son baratos, esto podría ayudar (aumentar al doble o 10 veces más). Redefinir entradas más informativas, para reducir el número de variables pero al mismo tiempo no aumentar el sesgo. Intentaremos por el momento el segundo camino (reducción de varianza). Podemos intentar tres cosas: Eliminar los términos que son demasiado frecuentes (son palabras no informativas, como the, a, he, she, etc.). Esto podría reducir varianza sin afectar mucho el sesgo. Usar raíces de palabras en lugar de palabras (por ejemplo, transfomar defect, defects, defective -&gt; defect y boring,bored, bore -&gt; bore, etc.). De esta manera, controlamos la proliferación de entradas que indican lo mismo y aumentan varianza - y quizá el sesgo no aumente mucho. Intentar usar bigramas - esto reduce el sesgo, pero quizá la varianza no aumente mucho. data(&quot;stop_words&quot;) head(stop_words) ## # A tibble: 6 x 2 ## word lexicon ## &lt;chr&gt; &lt;chr&gt; ## 1 a SMART ## 2 a&#39;s SMART ## 3 able SMART ## 4 about SMART ## 5 above SMART ## 6 according SMART head(calc_vocabulario(df_ent, 100)) ## # A tibble: 6 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 a 12904 ## 2 about 1228 ## 3 after 569 ## 4 all 1464 ## 5 also 704 ## 6 an 2000 head(calc_vocabulario(df_ent, 100, remove_stop = TRUE)) ## # A tibble: 6 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 2 179 ## 2 acting 224 ## 3 action 418 ## 4 actor 165 ## 5 actors 256 ## 6 american 193 vocabulario &lt;- calc_vocabulario(df_ent, 2000, remove_stop = TRUE) head(vocabulario %&gt;% arrange(desc(frec)),20) ## # A tibble: 20 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 film 2991 ## 2 movie 1844 ## 3 time 797 ## 4 review 788 ## 5 story 749 ## 6 character 639 ## 7 characters 631 ## 8 life 527 ## 9 films 515 ## 10 plot 490 ## 11 bad 484 ## 12 people 484 ## 13 scene 482 ## 14 movies 455 ## 15 scenes 443 ## 16 action 418 ## 17 director 413 ## 18 love 393 ## 19 real 329 ## 20 world 323 tail(vocabulario %&gt;% arrange(desc(frec)),20) ## # A tibble: 20 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 shock 18 ## 2 sir 18 ## 3 sleep 18 ## 4 sole 18 ## 5 spot 18 ## 6 stays 18 ## 7 stereotypical 18 ## 8 strip 18 ## 9 supergirl 18 ## 10 taylor 18 ## 11 threat 18 ## 12 thrillers 18 ## 13 tradition 18 ## 14 tree 18 ## 15 trial 18 ## 16 trio 18 ## 17 triumph 18 ## 18 visit 18 ## 19 warning 18 ## 20 werewolf 18 Este vocabulario parece que puede ser más útil. Vamos a tener que ajustar la regularización de nuevo (y también el número de entradas). Nota: este proceso también lo podemos hacer con cv.glmnet de manera más rápida. require(doMC) ## Loading required package: doMC ## Loading required package: iterators ## Loading required package: parallel registerDoMC(cores=4) if(!usar_cache){ mod_x &lt;- correr_modelo_cv(df_ent, df_pr, vocabulario, lambda = exp(seq(-10,5,0.1))) saveRDS(mod_x, file = &#39;./cache_obj/mod_sentiment_1.rds&#39;) } else { mod_x &lt;- readRDS(&#39;./cache_obj/mod_sentiment_1.rds&#39;) describir_modelo_cv(mod_x) } ## [1] &quot;Lambda min: 0.201896517994655&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.21&quot; ## [1] &quot;Devianza entrena:0.261&quot; ## [1] &quot;Devianza prueba:0.879&quot; #mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda =1) #mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda =0.1) #mod_x &lt;- correr_modelo(df_ent, df_pr, vocabulario, lambda =0.01) No estamos mejorando. Podemos intentar con un número diferente de entradas: vocabulario &lt;- calc_vocabulario(df_ent, 4000, remove_stop = TRUE) if(!usar_cache){ mod_x &lt;- correr_modelo_cv(df_ent, df_pr, vocabulario, lambda = exp(seq(-10,5,0.1))) saveRDS(mod_x, file = &#39;./cache_obj/mod_sentiment_2.rds&#39;) } else { mod_x &lt;- readRDS(&#39;./cache_obj/mod_sentiment_2.rds&#39;) describir_modelo_cv(mod_x) } ## [1] &quot;Lambda min: 0.49658530379141&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.18&quot; ## [1] &quot;Devianza entrena:0.295&quot; ## [1] &quot;Devianza prueba:0.883&quot; Y parece que nuestra estrategia no está funcionando muy bien. Regresamos a nuestro modelo con ridge vocabulario &lt;- calc_vocabulario(df_ent, 3000, remove_stop = FALSE) if(!usar_cache){ mod_x &lt;- correr_modelo_cv(df_ent, df_pr, vocabulario, lambda = exp(seq(-5,2,0.1))) saveRDS(mod_x, file = &#39;./cache_obj/mod_sentiment_3.rds&#39;) } else { mod_x &lt;- readRDS(&#39;./cache_obj/mod_sentiment_3.rds&#39;) describir_modelo_cv(mod_x) } ## [1] &quot;Lambda min: 0.110803158362334&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.18&quot; ## [1] &quot;Devianza entrena:0.128&quot; ## [1] &quot;Devianza prueba:0.775&quot; Podemos intentar aumentar el número de palabras y aumentar también la regularización vocabulario &lt;- calc_vocabulario(df_ent, 4000, remove_stop = FALSE) if(!usar_cache){ mod_x &lt;- correr_modelo_cv(df_ent, df_pr, vocabulario, lambda = exp(seq(-5,2,0.1))) saveRDS(mod_x, file = &#39;./cache_obj/mod_sentiment_4.rds&#39;) } else { mod_x &lt;- readRDS(&#39;./cache_obj/mod_sentiment_4.rds&#39;) describir_modelo_cv(mod_x) } ## [1] &quot;Lambda min: 0.22313016014843&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.16&quot; ## [1] &quot;Devianza entrena:0.173&quot; ## [1] &quot;Devianza prueba:0.776&quot; 10.6 Consiguiendo más datos Si nuestro problema es varianza, conseguir más datos de entrenamiento puede ayudarnos, especialmente si producir estos datos es relativamente barato y rápido. Como nuestro principal problema es varianza, podemos mejorar buscando más datos. Supongamos que hacemos eso en este caso, conseguimos el doble casos de entrenamiento. En este ejemplo, podríamos etiquetar más reviews: esto es relativamente barato y rápido vocabulario &lt;- calc_vocabulario(df_ent_grande, 3000, remove_stop = FALSE) if(!usar_cache){ mod_x &lt;- correr_modelo_cv(df_ent_grande, df_pr, vocabulario, lambda = exp(seq(-5,2,0.1))) saveRDS(mod_x, file = &#39;./cache_obj/mod_sentiment_5.rds&#39;) } else { mod_x &lt;- readRDS(&#39;./cache_obj/mod_sentiment_5.rds&#39;) describir_modelo_cv(mod_x) } ## [1] &quot;Lambda min: 0.0907179532894125&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.12&quot; ## [1] &quot;Devianza entrena:0.18&quot; ## [1] &quot;Devianza prueba:0.653&quot; Y ya casi logramos nuestro objetivo. Podemos intentar con más palabras vocabulario &lt;- calc_vocabulario(df_ent_grande, 4000, remove_stop = FALSE) if(!usar_cache){ mod_x &lt;- correr_modelo_cv(df_ent_grande, df_pr, vocabulario, lambda = exp(seq(-5,2,0.1))) saveRDS(mod_x, file = &#39;./cache_obj/mod_sentiment_6.rds&#39;) } else { mod_x &lt;- readRDS(&#39;./cache_obj/mod_sentiment_6.rds&#39;) describir_modelo_cv(mod_x) } ## [1] &quot;Lambda min: 0.0742735782143339&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.12&quot; ## [1] &quot;Devianza entrena:0.127&quot; ## [1] &quot;Devianza prueba:0.621&quot; Y esto funcionó bien. Subir más la regularización no ayuda mucho (pruébalo). Parece que el sesgo lo podemos hacer chico (reducir el error de entrenamiento considerablemente), pero tenemos un problema más grande con la varianza. Quizá muchas palabras que estamos usando no tienen qué ver con la calidad de positivo/negativo, y eso induce varianza. Estos modelos no utilizan la estructura que hay en las reseñas, simplemente cuentan qué palabras aparecen. Quizá aprovechar esta estructura podemos incluir variables más informativas que induzcan menos varianza sin aumentar el sesgo. Podemos conseguir más datos. Obsérvese que: ¿Podríamos intentar con una red neuronal totalmente conexa? Probablemente esto no va a ayudar, pues es un modelo más complejo y nuestro problema es varianza. 10.7 Usar datos adicionales Considerar fuentes adicionales de datos muchas veces puede ayudar a mejorar nuestras entradas, lo cual puede tener beneficios en predicción (tanto sesgo como varianza). Intentemos el primer camino. Probamos usar palabras que tengan afinidad como parte de su significado (positivas y negativas). Estos datos están incluidos en el paquete tidytext. bing &lt;- filter(sentiments, lexicon == &#39;bing&#39;) tail(bing) ## # A tibble: 6 x 4 ## word sentiment lexicon score ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 zealous negative bing NA ## 2 zealously negative bing NA ## 3 zenith positive bing NA ## 4 zest positive bing NA ## 5 zippy positive bing NA ## 6 zombie negative bing NA dim(vocabulario) ## [1] 4106 2 vocabulario &lt;- calc_vocabulario(df_ent_grande, 8000, remove_stop = FALSE) voc_bing &lt;- vocabulario %&gt;% inner_join(bing %&gt;% rename(palabra = word)) ## Joining, by = &quot;palabra&quot; dim(voc_bing) ## [1] 1476 5 mod_x &lt;- correr_modelo_cv(df_ent_grande, df_pr, voc_bing, alpha=0, lambda = exp(seq(-5,2,0.1))) ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; describir_modelo_cv(mod_x) ## [1] &quot;Lambda min: 0.122456428252982&quot; ## [1] &quot;Error entrenamiento: 0.02&quot; ## [1] &quot;Error prueba: 0.17&quot; ## [1] &quot;Devianza entrena:0.381&quot; ## [1] &quot;Devianza prueba:0.774&quot; Estas variables solas no dan un resultado tan bueno (tenemos tanto sesgo como varianza altas). Podemos combinar: vocabulario &lt;- calc_vocabulario(df_ent_grande, 3000, remove_stop =FALSE) voc &lt;- bind_rows(vocabulario, voc_bing %&gt;% select(palabra, frec)) %&gt;% unique dim(voc) ## [1] 4021 2 mod_x &lt;- correr_modelo_cv(df_ent_grande, df_pr, voc, alpha=0, lambda = exp(seq(-5,2,0.1))) ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; describir_modelo_cv(mod_x) ## [1] &quot;Lambda min: 0.0907179532894125&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.13&quot; ## [1] &quot;Devianza entrena:0.147&quot; ## [1] &quot;Devianza prueba:0.633&quot; Este camino no se ve mal, pero no hemos logrado mejoras. Aunque quizá valdría la pena intentar refinar más y ver qué pasa. 10.8 Examen de modelo y Análisis de errores Ahora podemos ver qué errores estamos cometiendo, y cómo está funcionando el modelo. Busquemos los peores. Corremos el mejor modelo hasta ahora: vocabulario &lt;- calc_vocabulario(df_ent_grande, 4000, remove_stop = FALSE) mod_x &lt;- correr_modelo_cv(df_ent_grande, df_pr, vocabulario, lambda = exp(seq(-5,2,0.1))) ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; describir_modelo_cv(mod_x) ## [1] &quot;Lambda min: 0.0820849986238988&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.12&quot; ## [1] &quot;Devianza entrena:0.136&quot; ## [1] &quot;Devianza prueba:0.623&quot; coeficientes &lt;- predict(mod_x$mod, lambda = &#39;lambda.min&#39;, type = &#39;coefficients&#39;) coef_df &lt;- data_frame(palabra = rownames(coeficientes), coef = coeficientes[,1]) arrange(coef_df, coef) %&gt;% print(n=20) ## # A tibble: 4,107 x 2 ## palabra coef ## &lt;chr&gt; &lt;dbl&gt; ## 1 (Intercept) -0.510 ## 2 sloppy -0.305 ## 3 tiresome -0.304 ## 4 tedious -0.300 ## 5 designed -0.275 ## 6 forgot -0.275 ## 7 profanity -0.274 ## 8 insulting -0.264 ## 9 redeeming -0.258 ## 10 ludicrous -0.257 ## 11 asleep -0.253 ## 12 embarrassing -0.250 ## 13 miserably -0.244 ## 14 alas -0.243 ## 15 lifeless -0.238 ## 16 random -0.234 ## 17 abilities -0.228 ## 18 inept -0.227 ## 19 ridiculous -0.227 ## 20 stupidity -0.223 ## # ... with 4,087 more rows arrange(coef_df, desc(coef)) %&gt;% print(n=20) ## # A tibble: 4,107 x 2 ## palabra coef ## &lt;chr&gt; &lt;dbl&gt; ## 1 refreshing 0.293 ## 2 beings 0.275 ## 3 underneath 0.275 ## 4 commanding 0.250 ## 5 outstanding 0.237 ## 6 marvelous 0.227 ## 7 finest 0.223 ## 8 identify 0.220 ## 9 enjoyment 0.218 ## 10 ralph 0.213 ## 11 exceptional 0.212 ## 12 anger 0.208 ## 13 mature 0.208 ## 14 threatens 0.208 ## 15 luckily 0.205 ## 16 enters 0.205 ## 17 overall 0.201 ## 18 breathtaking 0.200 ## 19 popcorn 0.199 ## 20 portrait 0.196 ## # ... with 4,087 more rows Y busquemos las diferencias más grandes del la probabilidad ajustada con la clase observada y &lt;- mod_x$prueba$y x &lt;- mod_x$prueba$x probs &lt;- predict(mod_x$mod, newx = x, type =&#39;response&#39;, s=&#39;lambda.min&#39;) df_1 &lt;- data_frame(id = rownames(x), y=y, prob = probs[,1]) %&gt;% mutate(error = y - prob) %&gt;% arrange(desc(abs(error))) df_1 ## # A tibble: 425 x 4 ## id y prob error ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1508 1 0.0408 0.959 ## 2 1461 1 0.0490 0.951 ## 3 1490 1 0.0949 0.905 ## 4 1933 1 0.110 0.890 ## 5 222 0 0.889 -0.889 ## 6 25 0 0.859 -0.859 ## 7 1642 1 0.143 0.857 ## 8 728 0 0.851 -0.851 ## 9 1050 1 0.152 0.848 ## 10 415 0 0.844 -0.844 ## # ... with 415 more rows filter(df, id == 1461) %&gt;% pull(texto) [1] “Review deep rising is one of &quot; those &quot; movies . the kind of movie which serves no purpose except to entertain us . it does not ask us to think about important questions like life on other planets or the possibility that there is no god . . . screw that , it says boldly , let’s see some computer generated monsters rip into , decapitate and generally cause irreparable booboos to a bunch of little known actors . heh ! them wacky monsters , gotta love ’em . of course , since we can rent about a thousand b movies with the same kind of story , hollywood must give that little extra &quot; oumph &quot; to get people in theaters . that is where deep rising fails , which is a good thing . confused ? let me explain : despite all them flashy effects and big explosions , deep rising is still , at heart , a good ’ol b movie . luckily , it’s a very good b movie . the worst cliches in movie history are a b movie’s bread and butter . therefore , things that would destroy a serious movie actually help us have a good time while watching a movie of lower calibre . of course we know there’s a big slimy creature behind that door , that one person will wander off to be picked off by said monster and we always know which persons or person will make it out alive . we just don’t know when or how horrible it will be . i went to see deep rising with my expections low and my tolerance for bad dialogue high . imagine my surprise when i discover that deep rising is actually , well , pretty darn funny at times . a funny b movie ? well , that’s new . these flicks are not supposed to make us laugh . ( except for a few unintended laughs once a while . ) and before you know it , treat williams , wes studi and famke jansen appear on the big screen . hey ! i know them guys ( and gal ) from a couple of other movies . cool . familiar faces . so far so good . our man treat is the hero , he’ll live . wes is a staple of b movies , he is the token victim . we know he’ll buy the farm but he will take a few creeps with him on the way out . famke is the babe , ’nuff said . there is also a guy with glasses ( the guy with glasses always dies ) a black person ( b movie buffs know that the black guy always dies , never fails ) and a very funny , nerdy guy . ( ah ! comic relief . how can we possibly explain having to kill him . . . let him live . ) after the first fifteen minutes i felt right at home . i know who to root for and who i need to boo too and a gum to chew . ( please kill me . ) suffice it to say that for the next hour and a half i jumped out of my seat a few times , went &quot; ewwww &quot; about a dozen times and nearly had an orgasm over all the explosions and firepower our heroes were packing . i’m a man , we nottice these things . all in all , i’d recommend deep rising if you are looking for a good time and care to leave your brain at the door . . . but bring your sense of humor and excitement in with you . the acting is decent , the effects top rate . how to best describe it ? put together the jet ski scene from hard rain , the bug attacks from starship troopers , a couple of james bond like stunts and all those scenes from friday the thirteenth and freddy where you keep screaming &quot; don’t go there , he’s behind you &quot; and you end up with deep rising . for creepy crawly goodness , tight t-shirts , major firepower and the need to go to the bathroom every fifteen minutes from seing all that water .” filter(df, id == 1508) %&gt;% pull(texto) [1] “Review capsule : side-splitting comedy that follows its own merciless logic almost through to the end . . . but not without providing a good deal of genuine laughs . most comedies these days have one flaw . they’re not funny . they think they’re funny , but they are devoid of anything really penetrating or dastardly . occasionally a good funny movie sneaks past the deadening hollywood preconceptions of humor and we get a real gem : ruthless people , for instance , which established a microcosm of a setup and played it out to the bitter end . liar liar is built the same way and is just about as funny . this is one of the few movies i’ve seen where i was laughing consistently almost all the way through : instead of a couple of set-pieces that inspired a laugh ( think of the dismal fatal instinct ) , the whole movie works like clockwork . jim carrey playes a high-powered lawyer , to whom lying is as natural as breathing . there is one thing he takes seriously , though : his son , and we can sense the affection that they have for each other right away . but his wife is divorced and seeing another man , and now it looks like they may move away together . the son goes with them , of course . the movie sets up this early material with good timing and a remarkable balance of jim carrey’s over-the-top persona with reality . then the plot springs into action : after being snubbed ( not deliberately ) by his father at his birthday , the kid makes a wish as he blows out the birthday candles : that for just one day , dad can’t lie . he gets the wish . what happens next is sidesplitting . everything turns into a confrontation : when cornered by a bum for some change , he shouts , &quot; no ! i’m not giving you any money because i know you’ll spend it on booze ! all i want to do is to get to the office without having to step over the debris of our decaying society ! &quot; he can’t even get into an elevator without earning a black eye . and what’s worse , he’s now gotten himself into an expensive divorce settlement that requires him to twist the truth like abstract wire sculpture . carrey , who i used to find unfunny , has gotten better at his schtick , even if it’s a limited one . he uses it to great effect in this movie . there is a scene where he tries to test his ability to lie and nearly demolishes his office in the process ( there’s a grin breaking out across my face right now , just remembering the scene ) . he can’t even write the lie ; his fingers twitch , his body buckles like someone in the throes of cyanide poisoning , and when he tries to talk it’s like he’s speaking in tongues . equally funny is a scene where he beats himself to a pulp ( don’t ask why ) , tries to drink water to keep from having outbursts in the courtroom ( it fails , with semi-predictable results ) , and winds up biting the bullet when he gets called into the boardroom to have everyone ask what they think of them . this scene alone may force people to stop the tape for minutes on end . the movie sustains its laughs and also its flashes of insight until almost the end . a shame , too , because the movie insists on having a big , ridiculous climax that involves carrey’s character flagging down a plane using a set of motorized stairs , then breaking his leg , etc . a simple reconciliation would do the trick . why is this stupid pent-up climax always obligatory ? it’s not even part of the movie’s real agenda . thankfully , liar liar survives it , and so does carrey . maybe they were being merciful , on reflection . if i’d laughed any more , i might have needed an iron lung .” filter(df, id == 222) %&gt;% pull(texto) #negativa [1] “Review it’s probably inevitable that the popular virtual reality genre ( &quot; the matrix , &quot; &quot; existenz &quot; ) would collide with the even more popular serial-killer genre ( &quot; kiss the girls , &quot; &quot; se7en &quot; ) . the result should have been more interesting than &quot; the cell . &quot; as the movie opens , therapist catharine deane ( jennifer lopez ) treats a catatonic boy ( colton james ) by entering his mind through some sort of virtual reality technique that’s never fully explained . after months of therapy sessions in a surreal desert , catharine has no success to report . meanwhile , killer carl stargher ( vincent d’onofrio ) has claimed another victim . his particular hobby is to kidnap young women , keep them in a glass cell overnight , and drown them . he takes the corpse and soaks it in bleach , then suspends himself over the body and jerks off while watching a video tape of the drowning . although carl’s been doing this for awhile , he’s recently become sloppy , and fbi agent peter novak ( vince vaughn ) is closing in fast . not fast enough , though , to keep carl from sticking another woman ( tara subkoff ) in the cell or to catch him before he suffers a schizophrenic attack that leaves him in a coma . from the videos in carl’s house , peter can see that the drowning cell is automated and will fill with water forty hours after the abduction . to save the kidnapped girl , peter has to find the cell before the end of the day , and comatose carl’s not talking . so off they go to catharine in the hope that she can go inside carl’s mind and find out where the cell is in time . the focus of &quot; the cell &quot; in on the ornate interior of carl’s mind , but the universe director tarsem singh creates seems more an exercise in computer-generated spectacle than an exploration of the psychotic personality . for the most part , it’s style without substance . in his own mind , carl is a decadent emperor in flowing robes , ming the merciless , as well as a frightened boy ( jake thomas ) abused by his father . all in all , the mind of a psycho killer turns out to be a strangely dull place , and i kept wishing i could fast-forward to the next development . singh is best known for directing music videos , particularly rem’s &quot; losing my religion , &quot; and &quot; the cell &quot; seems very much like a really long , really slow mtv video with the sound deleted . singer lopez seems to think she’s in a video as well ; she devotes more time to posing in elaborate costumes than she does to acting . the premise had great promise . the computer-generated world within carl’s mind could have been a bizarre , surreal universe governed by insanity and symbolism rather than logic . the first room catharine enters in carl’s head shows this promise . she finds a horse standing in center of the room ; suddenly , sheets of sharp-edged glass fall into the horse , dividing it into segments . the panes of glass separate , pulling apart the pieces of the still-living horse . this scene is twisted , disturbing , and thought-provoking , because the psychological importance of the horse and its fate is left to the viewer to ponder . another element that should have been developed is the effect on catharine of merging with the mind of a psychopath . their minds begin to bleed together at one point in the movie , and this should have provided an opportunity to discover the dark corners of catharine’s own psyche . like sidney lumet’s &quot; the offence &quot; or michael mann’s &quot; manhunter , &quot; &quot; the cell &quot; could have explored how the madness of the killer brings out a repressed darkness in the investigator . however , catharine’s character is hardly developed at all , and lopez has no depth to offer the role . bottom line : don’t get trapped in this one .” filter(df, id == 25) %&gt;% pull(texto) #negativa [1] “Review forgive the fevered criticism but the fervor of the crucible infects . set in 1692 at salem , massachusetts , the crucible opens with a group of teenage girls passionately singing and dancing around a boiling cauldron in the middle of a forest under the glow of a full moon . they beckon the names of men as the targets of their love spells . then one of the girls lets her hair down and sheds her clothes . not to be outdone in her quest to regain the attention of john proctor ( daniel day lewis ) , abigail ( winona ryder ) suddenly seizes a chicken , beats it against the ground and smears her face and lips with the fresh blood . taking even adolescent hormone surges into account , surely this chicken-bashing bit is a bit excessive , especially for prim puritan sensibilities ? surely to the puritan eye this is as close to a coven of witches as it gets ? the crucible errs from the beginning and arthur miller’s name should be summoned for blame here for the addition of the above scene to his screen adaptation of his play . this is far from a harmless event , a bad start to an already shaky morality tale . the play describes the film’s opening scene during tense exchanges that makes one wonder about the veracity of both accusation and reply , and this adds to the play’s charged atmosphere . in the film , the opening scene becomes an unintentional pandora’s box . not only is credulity stretched but abigail’s obsession is unfortunately spotlighted . it positions the crucible more as a cautionary fable about obsessive and malevolent women than against witch hunts ; it will bring back the memory of a rabbit boiling away in a pot . not surprisingly , the nighttime forest frenzy does not go unnoticed and when two girls fail to wake the following morning , witches are invoked by those eager to blame . when the girls are questioned , their confession of guilt is accompanied with an announcement of their return to god and they are thereafter converted to immaculate witnesses , led lustfully by abigail . with alarming synchronicity our hormonally-advantaged girls zealously gesture and point accusing fingers at innocents , constant reminders that abigail’s passion sets all this into inexorable motion . abigail seizes on this opportunity to rid herself of her rival for john proctor’s love , his wife elizabeth ( joan allen ) , by including her among those accused of witchcraft . appropriately narrow-waisted and equipped with a distractingly white smile ( watch his teeth deteriorate much too quickly to a murky yellow ) , day lewis plays the dashing moral hero with an over-earnestness that longs to be watched . director nicholas hytner is guilty of encouraging day lewis’ foaming-mouth fervour with shots where we stare up at proctor as if he was mounted on a pedestal for our admiration . otherwise , hytner’s direction is unremarkable . ryder’s performance as abigail is as consistent as her mood swings . her fits of frenzy are energetic enough but the quieter moments are less successful . abigail supposedly revels in her newfound power , but ryder fails at being convincingly haughty although there is much haughtiness to spare here . paul scofield is fine as the overzealous judge danforth , but the incessant moral posturings of all the characters along with the recurrent histrionics of the young girls pricks at the nerves . probably because she is the only refuge of restraint amidst all the huffing and puffing , allen’s elizabeth comes out as the most sympathetic character . a scene near the end featuring a private conversation between the imprisoned elizabeth and john is undeniably powerful because for once we are given a reprieve from the moral bantering and the human consequences are revealed . unfortunately , when john’s audience again increases to more than one his urge to pontificate returns and the human urgency of his situation is lost . it is clear that miller meant well but i do wish he did it with more delicacy and fewer diversions . his screenplay is an imperfect creature with the distractions coming out as loud as the message . the result is a clumsy muddle - i felt like the chicken from the opening scene , head ceaselessly banged with piousness too heavy-handed to be wholly believable . when the gallows beckoned , it was sweet release indeed . far from bewitching , the crucible tests the patience .” filter(df, id == 728) %&gt;% pull(texto) #negativa [1] “Review girl 6 is , in a word , a mess . i was never able to determine what spike lee was trying to accomplish with this film . there was no sense of where the film was going , or any kind of coherent narrative . if there was a point to the film , i missed it . girl 6 , by the way , is the way theresa randle’s character is addressed in the phone sex workplace ; all the girls are known by their numbers . the plot , such as it is : theresa randle is a struggling n . y . actress , and eventually takes a job as a phone-sex operator . she begins to lose contact with reality , as her job consumes her . also , she must deal with the advances of her ex-husband ( isiah washington ) . he is an ex- con thief , and she tries to keep him away , while at the same time , it’s clear that she still harbors feelings for him . her neighbor , jimmy ( spike lee ) functions as the observer ; mediating between the ex- husband and girl 6 . he also functions as a point of stability , as he watches her become seduced by the lurid world of phone sex . the soundtrack , consisting of songs by prince , was jarring . it kept taking my attention from the film - not altogether a bad thing , i’ll grant you , as what was transpiring onscreen wasn’t that riveting . for parts of the middle of the film , the music stayed blissfully in the background . in the opening sequence and one scene later in the film , however , the music was particularly loud and distracting . of course , i’ve never really cared for prince’s ( or tafkap if you like ) music . prince fans might love the soundtrack , but it will probably be distracting , even to die-hard fans . of the performances , the only one that stood out was spike lee’s buddy character , jimmy . he was excellent as the always-broke neighbor of girl 6 . he should have stuck to acting in this film . there are several sequences that gave me the impression that he’d like to be oliver stone when he grows up . there are scenes shot with different types of film , which are purposely grainy , and reminiscent of some of the scenes in oliver stone’s natural born killers . in that film , they worked to propel the narrative . in this film , they just made me more confused . there are some amusing moments , and a few insights into the lives of the women who use their voices to make the phone-sex industry the multi-billion dollar industry that it has become . other than that , though , nothing much happens . there are a few intense moments , as when one caller becomes frightening , but even that is rather lackluster . i’m not the biggest fan of spike lee , though i’d agree that he has done some very good work in the past . in girl 6 , though , he seems to be floundering . he had an interesting idea , a fairly good setup , and seemed to wander aimlessly from there . girl 6 earns a grade of d .” Algunos de los errores son difíciles (por ejemplo, una reseña que dice que la película es tan mala que es buena). Otros quizá podemos hacer algo con nuestro método: en algunas partes vemos algunas problemas con nuestro método, por ejemplo, “no energy” - nuestro método no toma en cuenta el orden de las palabras. Podemos intentar capturar algo de esto usando bigramas (pares de palabras) en lugar de simplemente usar palabras. vocabulario &lt;- calc_vocabulario(df_ent_grande, 3800, remove_stop = FALSE) mod_x &lt;- correr_modelo_cv(df_ent_grande, df_pr, vocabulario, lambda = exp(seq(-5,2,0.1))) ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; describir_modelo_cv(mod_x) ## [1] &quot;Lambda min: 0.0907179532894125&quot; ## [1] &quot;Error entrenamiento: 0&quot; ## [1] &quot;Error prueba: 0.11&quot; ## [1] &quot;Devianza entrena:0.153&quot; ## [1] &quot;Devianza prueba:0.628&quot; vocabulario_bigramas &lt;- calc_vocabulario(df_ent_grande, 500, bigram = TRUE) vocabulario_bigramas %&gt;% arrange(desc(frec)) ## # A tibble: 509 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 of the 6984 ## 2 in the 4609 ## 3 the film 3167 ## 4 is a 2325 ## 5 to be 2218 ## 6 to the 2187 ## 7 and the 2019 ## 8 on the 1780 ## 9 in a 1756 ## 10 the movie 1580 ## # ... with 499 more rows vocabulario_bigramas %&gt;% arrange((frec)) ## # A tibble: 509 x 2 ## palabra frec ## &lt;chr&gt; &lt;int&gt; ## 1 and one 117 ## 2 are so 117 ## 3 decides to 117 ## 4 for some 117 ## 5 might have 117 ## 6 piece of 117 ## 7 sci fi 117 ## 8 science fiction 117 ## 9 that his 117 ## 10 the case 117 ## # ... with 499 more rows library(stringr) mod_bigramas &lt;- correr_modelo_cv(df_ent_grande, df_pr, vocabulario_bigramas, alpha=1, lambda = exp(seq(-7,2,0.1)), bigram = TRUE) ## Joining, by = &quot;palabra&quot; ## Joining, by = &quot;palabra&quot; describir_modelo_cv(mod_bigramas) ## [1] &quot;Lambda min: 0.0111089965382423&quot; ## [1] &quot;Error entrenamiento: 0.19&quot; ## [1] &quot;Error prueba: 0.28&quot; ## [1] &quot;Devianza entrena:0.892&quot; ## [1] &quot;Devianza prueba:1.078&quot; Este resultado no es tan malo. Podemos intentar construir un modelo juntando unigramas y bigramas: y &lt;- mod_x$entrena$y x_1 &lt;- mod_x$entrena$x x_2 &lt;- mod_bigramas$entrena$x mod_ub &lt;- cv.glmnet(x = cbind(x_1, x_2), y = y, alpha = 0.0, family =&#39;binomial&#39;, lambda = exp(seq(-5,1,0.1))) plot(mod_ub) x_1p &lt;- mod_x$prueba$x x_2p &lt;- mod_bigramas$prueba$x preds_ent &lt;- predict(mod_ub, newx = cbind(x_1,x_2), type=&#39;class&#39;, lambda =&#39;lambda.min&#39;) mean(preds_ent != mod_x$entrena$y) ## [1] 0.0006349206 preds_1 &lt;- predict(mod_ub, newx = cbind(x_1p,x_2p), type=&#39;class&#39;, lambda =&#39;lambda.min&#39;) mean(preds_1 != mod_x$prueba$y) ## [1] 0.1129412 10.8.0.1 Ejemplo (opcional) En este ejemplo no tenemos muchos datos, pero puedes intentar de todas formas ajustar una red neuronal adaptada al problema (word embeddings, que veremos más adelante, y convoluciones de una dimensión a lo largo de oraciones). Quizá es buena idea empezar con un conjunto de datos más grandes, como dataset_imdb() en el paquete keras. library(keras) vocabulario &lt;- calc_vocabulario(df_ent_grande, 2000, remove_stop = FALSE) dim(vocabulario) entrena &lt;- convertir_lista(df_ent_grande, vocabulario) prueba &lt;- convertir_lista(df_pr, vocabulario) quantile(sapply(entrena$x, length)) x_train &lt;- entrena$x %&gt;% pad_sequences(maxlen = 2000, truncating=&quot;post&quot;) x_test &lt;- prueba$x %&gt;% pad_sequences(maxlen = 2000, truncating=&#39;post&#39;) model &lt;- keras_model_sequential() model %&gt;% layer_embedding(input_dim = nrow(vocabulario)+1, output_dim = 30, input_length=2000, embeddings_regularizer = regularizer_l2(0.01)) %&gt;% #layer_dropout(0.5) %&gt;% layer_conv_1d( filters = 20, kernel_size=3, padding = &quot;valid&quot;, activation = &quot;relu&quot;, strides = 1, kernel_regularizer = regularizer_l2(0.01)) %&gt;% # layer_dropout(0.5) %&gt;% layer_global_max_pooling_1d() %&gt;% layer_dense(20, activation =&#39;relu&#39;, kernel_regularizer = regularizer_l2(0.001)) %&gt;% #layer_dropout(0.5) %&gt;% layer_dense(1, activation=&#39;sigmoid&#39;, kernel_regularizer = regularizer_l2(0.001)) # Compile model model %&gt;% compile( loss = &quot;binary_crossentropy&quot;, #optimizer = optimizer_sgd(lr=0.001, momentum=0.0), optimizer = optimizer_adam(), metrics = c(&quot;accuracy&quot;,&quot;binary_crossentropy&quot;) ) model %&gt;% fit( x_train, entrena$y, batch_size = 128, epochs = 200, # callback = callback_early_stopping(monitor=&#39;val_loss&#39;, patience=50), validation_data = list(x_test, prueba$y) ) print(&quot;Entrenamiento&quot;) evaluate(model, x_train, entrena$y) print(&quot;Prueba&quot;) evaluate(model, x_test, prueba$y ) "],
["validacion-de-modelos-problemas-comunes.html", "Clase 11 Validación de modelos: problemas comunes 11.1 Filtración de datos 11.2 Series de tiempo 11.3 Filtración en el preprocesamiento 11.4 Uso de variables fuera de rango temporal 11.5 Datos en conglomerados y muestreo complejo 11.6 Muestras de validación chicas 11.7 Otros ejemplos 11.8 Resumen", " Clase 11 Validación de modelos: problemas comunes En aprendizaje de máquina, el ajuste y afinación de parámetros es tan importante como la evaluación de desempeño o validación de los modelos resultantes. Ninguna funciona bien sin que la otra sea correctamente ejecutada. Hemos visto que ambas partes tienen dificultades algunas veces sutiles (tanto el ajuste y optimización como la evaluación de las predicciones) que pueden hacer fracasar nuestro ejercicio de modelación. En esta parte hablaremos de la evaluación de modelos. En aprendizaje máqina, considerando que utilizamos relativamente pocos supuestos teóricos, dependemos de esa evaluación para asegurarnos que estamos capturando patrones reales y útiles en los datos. Todo lo que veremos aplica tanto a separación de muestras de validación como a uso de algún tipo de validación cruzada (validación cruzada, estimación OOB en árboles, validación bootstrap, etc.) 11.1 Filtración de datos La filtración de datos ocurre cuando nuestro proceso de validación está contaminado por información que en la tarea real de predicción no tendremos disponible. En consecuencia, nuestras estimaciones de desempeño del modelo (validación) son optimistas en relación al desempeño verdadero. También podemos pensar en filtraciones tanto al conjunto de entrenamiento y validación, cuando ambos están contaminados con información que no estará disponible al momento de hacer las predicciones. Esto produce modelos que no es posible poner en producción. El primer tipo de filtraciones es más difícil de detectar antes de la puesta en producción de los modelos. El segundo tipo puede descubrirse cuando nos damos cuenta de que no es posible implementar en producción nuestro modelo porque no hay información disponible que usamos para construirlo (o peor, cuando cometemos un error en la implementación y el modelo se desempeña mal posterioremente). Veamos el primer caso: filtración de conjuntos de validación al conjunto de entrenamiento. La filtración de datos puede ocurrir de muchas maneras, muchas veces inesperadas. Quizá uno de los ejemplos más típicos es el validación de modelos de series de tiempo. 11.2 Series de tiempo Comenzamos con un ejemplo simulado. Haremos varias simulaciones para incorporar la variación producida en los modelos por la muestra de entrenamineto library(methods) library(randomForest) library(tidyverse) library(glmnet) simular_datos &lt;- function(n = 500,...){ datos &lt;- data_frame(t=1:n, x = rnorm(n,0,1)) y &lt;- numeric(n) #nivel &lt;- numeric(n) #nivel[1] &lt;- 10 y[1] &lt;- datos$x[1] #+ nivel[1] for(i in 2:n){ #nivel[i] &lt;- nivel[i-1] + rnorm(1, 0, 0.1) #y[i] &lt;- 0.01*i + datos$x[i] + nivel[i] + rnorm(1,0,0.05) y[i] &lt;- 0.01*i + datos$x[i] + 0.9*y[i-1] + rnorm(1,0,0.05) } datos$y &lt;- y datos } separar &lt;- function(df, prop){ df &lt;- df %&gt;% rowwise %&gt;% mutate(tipo = ifelse(t &gt; floor(nrow(df)*(prop[1]+prop[2])), &#39;prueba&#39;, sample(c(&#39;entrena&#39;,&#39;valida&#39;),1))) split(df, df$tipo) } ajustar_evaluar &lt;- function(df_split){ mod_1 &lt;- randomForest(y ~ x + t, data = df_split[[&#39;entrena&#39;]]) error_valida &lt;- sd(predict(mod_1, df_split[[&#39;valida&#39;]])-df_split[[&#39;valida&#39;]]$y) error_prueba &lt;- sd(predict(mod_1, df_split[[&#39;prueba&#39;]])-df_split[[&#39;prueba&#39;]]$y) c(error_valida = error_valida, error_prueba = error_prueba) } Por ejemplo: ggplot(simular_datos(), aes(x=t, y=y)) + geom_line() Separamos ingenuamente entrenamiento y prueba y ajustamos un modelo de regresión: errores &lt;- simular_datos(500) %&gt;% separar(prop= c(0.4,0.4,0.2)) %&gt;% ajustar_evaluar errores ## error_valida error_prueba ## 1.810514 2.989814 reps_1 &lt;- map(1:50, simular_datos, n = 500) %&gt;% map(separar, prop= c(0.6,0.2,0.2)) %&gt;% map(ajustar_evaluar) %&gt;% transpose %&gt;% map(unlist) %&gt;% as_data_frame gr_reps_1 &lt;- reps_1 %&gt;% mutate(rep = row_number()) %&gt;% gather(tipo, valor, -rep) ggplot(reps_1, aes(x=error_valida, y=error_prueba)) + geom_point() + geom_abline() + xlim(c(0,10)) + ylim(c(0,10)) Y vemos que los errores de validación son consistentemente menores, y por margen alto, que los errores de prueba. Podemos ver que hay un desacuerdo entre el proceso de validación y de prueba: Los valores de validación y de entrenamiento están intercalados, pues fueron seleccionados al azar. Pero el error de predicción se calcula para el futuro, y esos datos futuros no tienen traslape en tiempo con la muestra de entrenamiento. De esta manera, podríamos decir que cuando hacemos predicciones para el conjunto de validación, se nos filtran valores del futuro cercano, lo cual no tenemos disponible a la hora de probar el modelo. Podríamos cambiar nuestra manera de probar el modelo, escogendo la muestra de validación al final del periodo. separar_valid_futura &lt;- function(df, prop){ df &lt;- df %&gt;% rowwise %&gt;% mutate(tipo = ifelse(t &lt; nrow(df)*prop[1], &#39;entrena&#39;, ifelse(t&lt;nrow(df)*(prop[1]+prop[2]),&#39;valida&#39;,&#39;prueba&#39;))) split(df, df$tipo) } reps_2 &lt;- map(1:50, simular_datos, n = 500) %&gt;% map(separar_valid_futura, prop= c(0.6,0.2,0.2)) %&gt;% map(ajustar_evaluar) %&gt;% transpose %&gt;% map(unlist) %&gt;% as_data_frame gr_reps_2 &lt;- reps_2 %&gt;% mutate(rep = row_number()) %&gt;% gather(tipo, valor, -rep) ggplot(gr_reps_2, aes(x=valor, group=tipo, fill=tipo)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(reps_2, aes(x=error_valida, y=error_prueba)) + geom_point() + geom_abline() + xlim(c(0,10)) + ylim(c(0,10)) Observaciónes: Nótese que la fuente más grande de error no proviene de el hecho de que el sistema que queremos predecir es dinámico (el primer modelo, por ejemplo, usa valores más cercanos a los del futuro que queremos predecir). El problema es la filtración de datos del pasado cercano y futuro desde el conjunto de validación al de prueba. 11.3 Filtración en el preprocesamiento Cuando preprocesamos datos para incluir en el modelo, es importante asegurarnos de no filtrar información de los datos de validación hacia los datos de enrenamiento. Nos aseguramos de esto si nuestro procesamiento, por ejemplo, es caso por caso con parámetros preestablecidos (no calculamos agregados de todos los datos, por ejemplo), o para más seguridad, haciendo por separado el preprocesamiento de entrenamiento y validación y considerando qué valores pasamos de un conjunto de datos al otro. Un ejemplo clásico es el de selección de variables, como vimos en el examen. Repetiremos varias veces para confirmar más sólidamente la idea seleccion_ajuste &lt;- function(...){ y &lt;- rbinom(50, 1, 0.5) x &lt;- matrix(rnorm(50*500,0,1), 50, 500) correlaciones &lt;- cor(x, y) # Seleccionamos las 50 variables con mayor correlación vars_selec &lt;- order(correlaciones, decreasing=TRUE)[1:50] # Hacemos la validación cruzada usual - que en este caso es errónea est_val_cruzada &lt;- sapply(1:10, function(i){ x_vc &lt;- x[-((5*i -4):(5*i)),] y_vc &lt;- y[-((5*i -4):(5*i))] mod &lt;- glmnet(y=y_vc, x= x_vc[,vars_selec], alpha=0, family=&#39;binomial&#39;, lambda = 0.5) preds_p &lt;- predict(mod, newx = x[((5*i -4):(5*i)),vars_selec])[,1] mean((preds_p &gt; 0) != y[((5*i -4):(5*i))]) }) error_validacion &lt;- mean(est_val_cruzada) modelo &lt;- glmnet(y=y, x= x[,vars_selec], alpha=0, family=&#39;binomial&#39;, lambda = 0.5) y_p &lt;- rbinom(1000, 1, 0.5) x_p &lt;- matrix(rnorm(1000*500,0,1), 1000, 500) preds_p &lt;- predict(modelo, newx = x_p[, vars_selec])[,1] error_prueba &lt;- mean((preds_p &gt; 0) != y_p) c(&#39;error_valida&#39;=error_validacion, &#39;error_prueba&#39;=error_prueba) } seleccion_ajuste() ## error_valida error_prueba ## 0.140 0.484 El resultado es catastrófico otra vez: errores_selec &lt;- map(1:30, seleccion_ajuste) %&gt;% transpose %&gt;% map(unlist) %&gt;% as.data.frame ggplot(errores_selec, aes(x=error_prueba, y=error_valida)) + geom_point() + geom_abline(colour=&#39;red&#39;) + xlim(c(0,1)) + ylim(c(0,1)) Esto lo podemos arreglar haciendo la selección de variables dentro de cada corte de validación cruzada, y así no permitimos que los datos de validación se filtren al conjunto de entrenamiento seleccion_ajuste_correcto &lt;- function(...){ y &lt;- rbinom(50, 1, 0.5) x &lt;- matrix(rnorm(50*500,0,1), 50, 500) est_val_cruzada &lt;- sapply(1:10, function(i){ x_vc &lt;- x[-((5*i -4):(5*i)),] y_vc &lt;- y[-((5*i -4):(5*i))] correlaciones_vc &lt;- cor(x_vc, y_vc) vars_selec &lt;- order(correlaciones_vc, decreasing=TRUE)[1:50] mod &lt;- glmnet(y=y_vc, x= x_vc[,vars_selec], alpha=0, family=&#39;binomial&#39;, lambda = 0.5) preds_p &lt;- predict(mod, newx = x[((5*i -4):(5*i)),vars_selec])[,1] mean((preds_p &gt; 0) != y[((5*i -4):(5*i))]) }) error_validacion &lt;- mean(est_val_cruzada) y_p &lt;- rbinom(1000, 1, 0.5) x_p &lt;- matrix(rnorm(1000*500,0,1), 1000, 500) correlaciones &lt;- cor(x, y) vars_selec &lt;- order(correlaciones, decreasing=TRUE)[1:50] modelo &lt;- glmnet(y=y, x= x[,vars_selec], alpha=0, family=&#39;binomial&#39;, lambda = 0.5) preds_p &lt;- predict(modelo, newx = x_p[, vars_selec])[,1] error_prueba &lt;- mean((preds_p &gt; 0) != y_p) c(&#39;error_valida&#39;=error_validacion, &#39;error_prueba&#39;=error_prueba) } errores_selec &lt;- map(1:30, seleccion_ajuste_correcto) %&gt;% transpose %&gt;% map(unlist) %&gt;% as.data.frame ggplot(errores_selec, aes(x=error_prueba, y=error_valida)) + geom_point() + geom_abline(colour=&#39;red&#39;) + xlim(c(0,1)) + ylim(c(0,1)) 11.4 Uso de variables fuera de rango temporal Otra razón por la que nuestro proceso de validación puede estar contaminado es porque usamos agregados que no están disponibles al momento de la predicción, y están relacionados con la variable que queremos predecir. La contaminación puede ser del conjunto de validación al de entrenamiento, o puede incluir tanto entrenamiento como validación. Imaginemos que queremos predecir los clientes que se van a quedar y los que se van a ir en función de las visitas que hacen a un sitio. Vamos a simular el tiempo que se queda cada cliente independiente de otras variables, y construimos una variable de entrada, el número de visitas, que depende del tiempo que un cliente permanece. Por simplicidad, suponemos que todos los clientes empiezan en el tiempo 0. Vamos a suponer durante el tiempo 0.5 y 1.5, hubo una campaña de ventas para intentar recuperar a clientes abandonadores. Una fracción los clientes que abandonaron entre el tiempo 0.5 y 1.5 recibieron una llamada de servicio a cliente. Esto está registrado en la base de datos. simular_clientes &lt;- function(n,...){ tiempo_cliente &lt;- rexp(n, 0.5) llamada &lt;- ifelse(tiempo_cliente &gt; 0.5 &amp; tiempo_cliente &lt; 1.5, rbinom(1,1,0.9), 0) #cuántas visitas, dependen del tiempo (proceso de poisson) num_visitas &lt;- 1 + rpois(n, 5*tiempo_cliente) #calculamos los tiempos cuando ocurrieron esos eventos tiempos &lt;- lapply(1:n, function(i){ c(0, runif(num_visitas[i]-1, 0, tiempo_cliente[i]))}) df &lt;- data_frame(id_cliente=1:n, visitas = tiempos, tiempo_cliente = tiempo_cliente, llamada = llamada) df } set.seed(234) simular_clientes(1) %&gt;% unnest ## # A tibble: 2 x 4 ## id_cliente tiempo_cliente llamada visitas ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 0.982 1 0 ## 2 1 0.982 1 0.762 clientes_futura &lt;- simular_clientes(20000) %&gt;% unnest Ahora supongamos que hoy estamos en el tiempo t=2, así que los datos que tenemos son los siguientes (también calculamos cuántas visitas ha tendido cada cliente hoy: clientes_hoy &lt;- filter(clientes_futura, visitas &lt; 2) num_visitas_hoy &lt;- clientes_hoy %&gt;% group_by(id_cliente) %&gt;% summarise(num_visitas=n()) Queremos calificar a nuestros clientes actuales con probabilidad de que se vaya, y queremos también evaluar esta predicción. Para hacer esto, usamos los datos con tiempo &lt; 1. ¿Quienes no se han ido? Filtramos clientes activos al tiempo t=1 y vemos quiénes abandonaron al mes t=2 (próximo mes): clientes_1 &lt;- filter(clientes_hoy, tiempo_cliente &gt; 1) %&gt;% mutate(abandona = tiempo_cliente &lt; 2) Para hacer nuestro modelo, ahora usamos el número de visitas de hoy: datos_mod &lt;- clientes_1 %&gt;% left_join(num_visitas_hoy) ## Joining, by = &quot;id_cliente&quot; Y ahora dividimos entre entrenamiento y prueba: set.seed(72427) datos_mod &lt;- datos_mod %&gt;% group_by(id_cliente) %&gt;% summarise(u = runif(1,0,1), abandona = first(abandona), num_visitas=first(num_visitas), llamada = first(llamada)) entrena &lt;- filter(datos_mod, u &lt; 0.5) valida &lt;- filter(datos_mod, u &gt;= 0.5) Ajustamos nuestro modelo mod_1 &lt;- glm(abandona ~ num_visitas + llamada, entrena, family = &#39;binomial&#39;) summary(mod_1) ## ## Call: ## glm(formula = abandona ~ num_visitas + llamada, family = &quot;binomial&quot;, ## data = entrena) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.24755 -0.70896 -0.53240 0.00014 2.46293 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.32076 0.12668 2.532 0.0113 * ## num_visitas -0.15735 0.01229 -12.799 &lt;2e-16 *** ## llamada 19.44652 172.98954 0.112 0.9105 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 8186.9 on 6114 degrees of freedom ## Residual deviance: 4750.6 on 6112 degrees of freedom ## AIC: 4756.6 ## ## Number of Fisher Scoring iterations: 17 Esto parece tener sentido: cuantas más visitas, menor probabilidad de abandonar. Probamos (con devianza) preds &lt;- predict(mod_1, valida, type = &#39;response&#39;) -2*mean(valida$abandona*log(preds) + (1-valida$abandona)*log(1-preds)) ## [1] 0.7876797 Así que parece ser que nuestro modelo está haciendo una predicción razonablemente buena. Ahora calificamos a los clientes corrientes del día de hoy (t=2) prueba &lt;- clientes_hoy %&gt;% filter(tiempo_cliente&gt;=2) %&gt;% group_by(id_cliente) %&gt;% summarise(num_visitas = length(visitas), tiempo_cliente = first(tiempo_cliente), llamada = first(llamada)) prueba$abandona &lt;- prueba$tiempo_cliente &lt; 3 preds &lt;- predict(mod_1, prueba, type = &#39;response&#39;) -2*mean(prueba$abandona*log(preds) + (1-prueba$abandona)*log(1-preds)) ## [1] 1.571454 Y nuestro modelo se degrada considerablemente - no supimos predecir los abandonadores en el próximo mes. ¿Qué está mal? En primer lugar, tenemos filtración de datos porque la variable llamada contiene información futura del abandono de los clientes - aquellos clientes que abandonaron entre t=1 y t=1.5 usaron una llamada, y esto contamina nuestra muestra de entrenamiento con una variable que indica directamente abandono entre t=1 y t=2. No podemos usar esta variable, porque cuando queramos hacer predicciones no vamos a saber que ventas llamó en el futuro a una persona porque había abandonado. Ajustamos nuestro modelo sin llamada: mod_1 &lt;- glm(abandona ~ num_visitas , entrena, family = &#39;binomial&#39;) summary(mod_1) ## ## Call: ## glm(formula = abandona ~ num_visitas, family = &quot;binomial&quot;, data = entrena) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.1191 -0.9487 -0.5624 1.0391 2.7870 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.43313 0.09974 24.39 &lt;2e-16 *** ## num_visitas -0.29981 0.01028 -29.17 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 8186.9 on 6114 degrees of freedom ## Residual deviance: 7089.2 on 6113 degrees of freedom ## AIC: 7093.2 ## ## Number of Fisher Scoring iterations: 4 y probamos preds &lt;- predict(mod_1, valida, type = &#39;response&#39;) -2*mean(valida$abandona*log(preds) + (1-valida$abandona)*log(1-preds)) ## [1] 1.159981 Y como esperábamos, el error subió. Ahora calificamos a los clientes corrientes del día de hoy (t=2) prueba &lt;- clientes_hoy %&gt;% filter(tiempo_cliente&gt;=2) %&gt;% group_by(id_cliente) %&gt;% summarise(num_visitas = length(visitas), tiempo_cliente = first(tiempo_cliente), llamada = first(llamada)) prueba$abandona &lt;- prueba$tiempo_cliente &lt; 3 preds &lt;- predict(mod_1, prueba, type = &#39;response&#39;) -2*mean(prueba$abandona*log(preds) + (1-prueba$abandona)*log(1-preds)) ## [1] 1.548026 y vemos que todavía tenemos problemas, aunque menos graves. ¿Qué está pasando? Tenemos filtración adicional de datos porque usamos las visitas totales hasta hoy. Cuando este número es grande, quiere decir que un cliente no abandona en el futuro. Así en el modelo usamos el hecho de que no había abandonado para predecir que no abandonó (!!) Podemos corregir nuestro modelo haciendo: num_visitas_1 &lt;- clientes_hoy %&gt;% filter(visitas &lt; 1) %&gt;% group_by(id_cliente) %&gt;% summarise(num_visitas=n()) datos_mod_2 &lt;- clientes_1 %&gt;% left_join(num_visitas_1) ## Joining, by = &quot;id_cliente&quot; Y ahora dividimos entre entrenamiento y prueba: set.seed(72427) datos_mod_2 &lt;- datos_mod_2 %&gt;% group_by(id_cliente) %&gt;% summarise(u = runif(1,0,1), abandona = first(abandona), num_visitas=first(num_visitas), llamada=first(llamada)) entrena_2 &lt;- filter(datos_mod_2, u &lt; 0.5) valida_2 &lt;- filter(datos_mod_2, u &gt;= 0.5) Ajustamos nuestro modelo mod_2 &lt;- glm(abandona ~num_visitas, entrena_2, family = &#39;binomial&#39;) summary(mod_2) ## ## Call: ## glm(formula = abandona ~ num_visitas, family = &quot;binomial&quot;, data = entrena_2) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.0237 -1.0022 -0.9862 1.3634 1.4301 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.35920 0.07556 -4.754 2e-06 *** ## num_visitas -0.01360 0.01179 -1.153 0.249 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 8186.9 on 6114 degrees of freedom ## Residual deviance: 8185.6 on 6113 degrees of freedom ## AIC: 8189.6 ## ## Number of Fisher Scoring iterations: 4 Nótese que el coeficiente de num_visitas es mucho más chico esta vez. Esto tiene sentido: cuantas más visitas, menor proabilidad de abandonar. Probamos (tasa de correctos) Validamos: preds &lt;- predict(mod_2, valida, type = &#39;response&#39;) -2*mean(valida$abandona*log(preds) + (1-valida$abandona)*log(1-preds)) ## [1] 1.323245 Ahora calificamos a los clientes corrientes del día de hoy (t=2) y vemos qué pasa: prueba &lt;- clientes_hoy %&gt;% filter(tiempo_cliente&gt;=2) %&gt;% group_by(id_cliente) %&gt;% summarise(num_visitas = length(visitas), tiempo_cliente = first(tiempo_cliente), llamada = first(llamada)) prueba$abandona &lt;- prueba$tiempo_cliente &lt; 3 preds &lt;- predict(mod_2, prueba, type = &#39;response&#39;) -2*mean(prueba$abandona*log(preds) + (1-prueba$abandona)*log(1-preds)) ## [1] 1.336908 Y vemos que nuestra validación y desempeño real coinciden, pues nuestro ejercicio de validación ya coincide con la tarea de predicción que nos interesa. En este caso, incluso nuestro proceso de entrenamiento está contaminado con datos que no tendremos cuando hacemos predicciones. Desgraciadamente, en este ejemplo simulado no pudimos hacer nada para predecir abandono (por construcción). Pero una validación incorrecta parecía indicar que nuestro modelo podría aportar algo. 11.5 Datos en conglomerados y muestreo complejo En muestras complejas, con el fin de reducir costos, muchas veces se muestrean casos dentro de lo que se llama comunmente unidades primarias de muestreo. Por ejemplo, las unidades primarias de muestreo pueden ser manzanas, y se muestrean varios hogares dentro de cada manzana. Es más simple técnicamente y mejor desde punto de vista del error tomar hogares al azar (no agrupados), pero los costos generalmente aumentan mucho si no usamos alguna agrupación - en este ejemplo, el encuestador tendría que transportarse continuamente para levantar encuestas que fueran seleccionadas sin agrupaciones. Como casos dentro de unidades primarias de muestreo son similares, y la mayor parte de las unidades primarias de muestreo no son muestreadas, tenemos un riesgo en nuestra validación: si hacemos conjuntos de validación al azar, podemos incluir casos de las mismas unidades primarias dentro de entremiento y validación. La homogeneidad de casos dentro de unidades primarias hace fácil predecir casos de validación, o dicho de otra manera: se nos está filtrando información desde el conjunto de validación al de entrenamiento (a través del comportamiento común dentro de unidades primarias de muestreo). En la realidad, observaremos probablemente casos para los que no tenemos ejemplos de unidades primarias. Así que tenemos que construir nuestra validación para que refleje esta tarea. set.seed(12) upms &lt;- seq(1,100,1) simular_upms &lt;- function(n){ map(seq(1, n, 1), function(upm){ num_upm &lt;- runif(1, 10, 100) a &lt;- runif(1, 0, 100) b &lt;- runif(1, 0, 1) x &lt;- rnorm(num_upm, 0, 0.2) z &lt;- rnorm(1, 0, 1) data_frame(upm = upm, x = x, z= z, y = a + b*x + rnorm(num_upm, 0, 1)) }) %&gt;% bind_rows } dat &lt;- simular_upms(n=100) prueba &lt;- simular_upms(1000) dat &lt;- dat %&gt;% mutate(u=runif(nrow(dat), 0,1)) entrena &lt;- dat %&gt;% filter(u &lt; 0.5) valida &lt;- dat %&gt;% filter(u &gt; 0.5) mod_1 &lt;- randomForest(y~x+z, data=entrena) sd(predict(mod_1, valida)-valida$y) ## [1] 13.64769 sd(predict(mod_1, prueba)- prueba$y) ## [1] 33.66098 La diferencia es considerable. Podemos arreglar haciendo la validación separando distintos upms. dat &lt;- dat %&gt;% mutate(u=runif(nrow(dat), 0,1)) entrena &lt;- dat %&gt;% filter(upm &lt; 50) valida &lt;- dat %&gt;% filter(upm &gt;= 50) mod_1 &lt;- randomForest(y~x+z, data=entrena) sd(predict(mod_1, valida)-valida$y) ## [1] 39.08368 sd(predict(mod_1, prueba)- prueba$y) ## [1] 36.99774 En encuestas reales, este efecto puede variar dependiendo de la capacidad del modelo, el diseño de la encuesta (por ejemplo, si las unidades primarias de muestreo son más homogéneas o menos homogéneas, etc), y puede ir desde un efecto prácticamente ignorable hasta uno muy grande. Ejemplo Otro ejemplo de datos en conglomerados está en nuestro ejemplo de reconocimiento de dígitos. Considera por qué es importante separar a las personas que escribieron los dígitos en entrenamiento y validación, y no los dígitos particulares. 11.5.1 Censura y evaluación incompleta Algunas veces, no todos los datos que quisiéramos tener están disponibles para construir nuestros modelos: algunos clientes o casos, por ejemplo, no están en nuestros datos (son datos censurados). Sin embargo, al poner los modelos en producción, hacemos predicciones para todos los datos, y nuestras predicciones malas para aquellos casos antes censurados pueden dañar severamente el desempeño de nuestros modelos. Este es un ejemplo de datos faltantes, pero más serio: todos las variables de algunos casos están faltantes, y algunas veces ni siquiera sabemos esto. 11.5.2 Ejemplo: tiendas cerradas Supongamos que queremos predecir las ventas de tiendas según las características del un local potencial después de un año de ser abiertas. Este modelo tiene el propósito de dedicir si abrir o uno una tienda en un local posible. Vamos a hacer este ejemplo con datos simulados. h &lt;- function(z) 1/(1+exp(-z)) simular_tiendas &lt;- function(n){ #Variables de entrada x &lt;- rnorm(n, 0, 1) a &lt;- rnorm(n, 0, 1) w &lt;- rbinom(n, 1, 0.5) # respuesta en ventas después de un año z &lt;- 2*x + a+ w + rnorm(n, 0, 0.1) ventas &lt;- exp(z)*1e5 # prob de cerrar es alta cuando las ventas son más bajas p_cerrar &lt;- h(-3 - 2*z) # Algunas tiendas quebraron (dependiendo del nivel de ventas) cerrada &lt;- rbinom(n, 1, prob = p_cerrar) data_frame(id_tienda=1:n, x=x, w=w, a=a, ventas=ventas, cerrada = cerrada) } simular_tiendas(10) ## # A tibble: 10 x 6 ## id_tienda x w a ventas cerrada ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 -0.295 0 0.693 117121. 0 ## 2 2 -1.15 0 1.08 28253. 0 ## 3 3 0.369 0 -0.843 113515. 0 ## 4 4 -1.19 1 -0.886 9871. 1 ## 5 5 -2.08 0 1.78 9607. 0 ## 6 6 -1.97 1 -0.822 2160. 1 ## 7 7 0.533 0 -0.126 257014. 0 ## 8 8 -1.09 1 0.699 56708. 0 ## 9 9 0.120 1 0.848 779766. 0 ## 10 10 -1.25 0 2.72 122474. 0 set.seed(923) tiendas_entrena_valida &lt;- simular_tiendas(2000) tiendas_prueba &lt;- simular_tiendas(2000) table(tiendas_entrena_valida$cerrada) ## ## 0 1 ## 1571 429 Ahora supongamos que el sistema borró los datos históricos de las tiendas que cerraron. Nuestros datos para trabajar son entrena_valida &lt;- filter(tiendas_entrena_valida, cerrada == 0) nrow(entrena_valida) ## [1] 1571 set.seed(72427) datos &lt;- entrena_valida %&gt;% ungroup %&gt;% mutate(u = runif(nrow(entrena_valida),0,1)) entrena &lt;- filter(datos, u &lt; 0.5) %&gt;% select(-u) valida &lt;- filter(datos, u &gt;= 0.5) %&gt;% select(-u) nrow(entrena) ## [1] 805 nrow(valida) ## [1] 766 mod_log &lt;- randomForest(log(ventas)~x+w+a, data=entrena, mtry=3) #mod_log &lt;- lm(log(ventas)~x+w+a, data=entrena) preds_log &lt;- predict(mod_log, valida) valida$preds_valida &lt;- preds_log sd(preds_log-log(valida$ventas)) ## [1] 0.3004177 ggplot(valida, aes(y=log(ventas), x= preds_valida))+ geom_point() + geom_abline(colour=&#39;red&#39;) Cuando lo aplicamos a nuevas tiendas, desgraciadamente, observamos preds_log &lt;- predict(mod_log, tiendas_prueba) sd(preds_log-log(tiendas_prueba$ventas)) ## [1] 0.5729648 El error es más alto de lo que esperábamos, y nuestra predicción para las tiendas malas es especialmente malo: tiendas_prueba$pred_prueba &lt;- preds_log ggplot(tiendas_prueba, aes(y=log(ventas), x= pred_prueba,colour=cerrada))+ geom_point() + geom_abline(colour=&#39;red&#39;) Veamos la cadena que produjo este error: La variable cerrar está naturalmente relacionada con ventas: cuanto más bajas son las ventas al año, mayor la probabilidad de cerrar. En los datos de entrenamiento no tenemos las tiendas que cerraron (que tienen ventas más bajas) - estos datos están censurados Nuestro modelo se desempeña bien para tiendas que tienen ventas relativamente altas. Pero falla cuando intentamos predecir tiendas con ventas relativamente bajas. Soluciones para este problema son analizar cuidadosamente que datos han sido censurados de las bases de datos. En caso de que haya ocurrido, rara vez todos los datos fueron borrados: por ejemplo, quizá la variable respuesta se puede conseguir, y existen algunas de las variables explicativas - en este caso podríamos intentar imputación de datos. 11.6 Muestras de validación chicas Una muestra de validación chica es casi tan malo como una muestra de entrenamiento chica. Una muestra de entrenamiento grande nos permite intentar modelos más complejos y flexible. Pero con una muestra de validación demasiado chica, no es posible discriminar entre los que se desempeñan bien y mal, desaprovechando las ganancias que podríamos tener por tener una buena muestra de entrenamiento. Podemos ver la situación con el ejemplo de spam spam &lt;- read_csv(&#39;datos/spam-entrena.csv&#39;) spam_prueba &lt;- read_csv(&#39;datos/spam-prueba.csv&#39;) nrow(spam) ## [1] 3067 nrow(spam_prueba) ## [1] 1534 spam &lt;- bind_cols(spam, data.frame(matrix(rnorm(nrow(spam)*100,0,1), nrow(spam), 100))) spam_prueba &lt;- bind_cols(spam_prueba, data.frame(matrix(rnorm(nrow(spam_prueba)*100,0,1), nrow(spam_prueba), 100))) Haremos cortes de distinto tamaño entrenamiento/validación y veremos qué desempeño resulta de escoger nuestro modelo final (lasso) usando una muestra de validación. library(glmnet) separar &lt;- function(datos, prop_entrena){ n &lt;- nrow(datos) datos &lt;- datos %&gt;% mutate(u = runif(n, 0, 1)) %&gt;% mutate(tipo = ifelse(u &lt; prop_entrena, &#39;entrena&#39;, &#39;validación&#39;)) %&gt;% select(-u) print(table(datos$tipo)) datos } devianza &lt;- function(z, y){ apply(-2*(y*z - log(1+exp(z))),2,mean) } ajusta_valida &lt;- function(datos, spam_prueba){ entrena &lt;- datos %&gt;% filter(tipo ==&#39;entrena&#39;) %&gt;% select(-tipo) validación &lt;- datos %&gt;% filter(tipo==&#39;validación&#39;) %&gt;% select(-tipo) x &lt;- as.matrix(entrena %&gt;% select(-spam)) y &lt;- entrena$spam mod &lt;- glmnet(x = x, y = y, alpha = 0.0, family =&#39;binomial&#39;, lambda = exp(seq(-20, -2, 0.25) )) x_val &lt;- as.matrix(validación %&gt;% select(-spam)) y_val &lt;- validación$spam x_prueba &lt;- as.matrix(spam_prueba %&gt;% select(-spam)) y_prueba &lt;- spam_prueba$spam val_error &lt;- devianza(predict(mod, x_val, type=&#39;response&#39;), y_val) prueba_error &lt;- devianza(predict(mod, x_prueba, type=&#39;response&#39;), y_prueba) #val_error &lt;- apply((predict(mod, x_val) &gt; 0) != (y_val==1), 2, mean) #prueba_error &lt;- apply((predict(mod, x_prueba) &gt; 0) != (y_prueba==1), 2, mean) data_frame(lambda = mod$lambda, val_error=val_error, prueba_error = prueba_error) } Si la muestra de validación es chica, podemos escoger un modelo subóptimo, además que la estimación del error es mala library(tidyr) set.seed(923) dat &lt;- separar(spam, 0.98) ## ## entrena validación ## 3011 56 df_1 &lt;- ajusta_valida(dat, spam_prueba) %&gt;% gather(tipo, valor, -lambda) ggplot(df_1, aes(x=lambda, y=valor, group=tipo, colour=tipo))+ geom_line() + geom_point() + scale_x_log10() En este caso escogemos un modelo bueno, pero la estimación es mala set.seed(91123) dat &lt;- separar(spam, 0.98) ## ## entrena validación ## 3004 63 df_1 &lt;- ajusta_valida(dat, spam_prueba) %&gt;% gather(tipo, valor, -lambda) ggplot(df_1, aes(x=lambda, y=valor, group=tipo, colour=tipo))+ geom_line() + geom_point()+ scale_x_log10() Por otro lado, más datos de validación nos dan una mejor estimación el error y nos permite elegir el modelo óptimo. Pero el modelo no es tan bueno porque usamos menos datos de entrenamiento. set.seed(9113) dat &lt;- separar(spam, 0.2) ## ## entrena validación ## 609 2458 df_1 &lt;- ajusta_valida(dat, spam_prueba) %&gt;% gather(tipo, valor, -lambda) ggplot(df_1, aes(x=lambda, y=valor, group=tipo, colour=tipo))+ geom_line() + geom_point()+ scale_x_log10() Cuando tenemos una muestra de validación chica, es posible obtener rangos de error para el error. El error de validación es un promedio sobre una muestra (\\(\\overline{x}\\)), así que podemos estimar su desviación estándar mediante el error estándar \\(\\frac{s}{\\sqrt{n}}\\), donde \\(s\\) es la desviación estándar de los errores individuales de la muestra de entrenamiento. 11.6.0.1 Ejemplo set.seed(91123) dat &lt;- separar(spam, 0.98) ## ## entrena validación ## 3004 63 devianza_valor &lt;- function(z, y){ -2*(y*z - log(1+exp(z))) } entrena &lt;- dat %&gt;% filter(tipo ==&#39;entrena&#39;) %&gt;% select(-tipo) validación &lt;- dat %&gt;% filter(tipo==&#39;validación&#39;) %&gt;% select(-tipo) x &lt;- as.matrix(entrena %&gt;% select(-spam)) y &lt;- entrena$spam mod &lt;- glmnet(x = x, y = y, alpha = 0.0, family =&#39;binomial&#39;, lambda = exp(-10 )) x_val &lt;- as.matrix(validación %&gt;% select(-spam)) y_val &lt;- validación$spam validacion &lt;- devianza_valor(predict(mod, x_val, type=&#39;response&#39;), y_val) Y ahora podemos calcular el estimador puntual y el error estándar: media &lt;- mean(validacion) ee &lt;- sd(validacion)/sqrt(length(validacion)) media ## [1] 1.122394 ee ## [1] 0.05137938 Un intervalo del 95% para esta estimación es entonces c(media-2*ee, media+2*ee) ## [1] 1.019635 1.225153 Si hacemos más grande la muestra de validación dat &lt;- separar(spam, 0.5) ## ## entrena validación ## 1555 1512 entrena &lt;- dat %&gt;% filter(tipo ==&#39;entrena&#39;) %&gt;% select(-tipo) validación &lt;- dat %&gt;% filter(tipo==&#39;validación&#39;) %&gt;% select(-tipo) x &lt;- as.matrix(entrena %&gt;% select(-spam)) y &lt;- entrena$spam mod &lt;- glmnet(x = x, y = y, alpha = 0.0, family =&#39;binomial&#39;, lambda = exp(-10 )) x_val &lt;- as.matrix(validación %&gt;% select(-spam)) y_val &lt;- validación$spam validacion &lt;- devianza_valor(predict(mod, x_val, type=&#39;response&#39;), y_val) media &lt;- mean(validacion) ee &lt;- sd(validacion)/sqrt(length(validacion)) media ## [1] 1.215183 ee ## [1] 0.01197234 c(media-2*ee, media+2*ee) ## [1] 1.191238 1.239127 Ejercicio Repite el ejercicio anterior para la tasa de clasificación incorrecta (ajusta un modelo y calcula el estimador de validación del error junto a su error estándar) Repite el ejercicio anterior para un problema de regresión: en este caso, considera que el error cuadrático medio es el promedio de los errores cuadráticos de cada caso de validación. ¿Cómo harías un intervalo para la raíz del error cuadrático medio? ¿Para el error absoluto promedio? 11.7 Otros ejemplos En kaggle: un concurso para detectar cáncer de próstata contenía una variable que indicaba si el paciente había tenido una operación de próstata o no. Claramente esta variable contiene información acerca de la respuesta, pero un modelo que contiene esta variable no es útil (ve al futuro para la mayoría de los pacientes). En este caso es una filtración de la respuesta a conjunto de entrenamiento y validación. E-commerce: si intentamos predecir quién va a hacer grandes compras, variables como iva (impuesto) incurrido o uso de envío gratis (que solo aplica a compras grandes) son variables que filtran información de lo que queremos predecir y no son útiles en el modelo final. Estas variables también ven al futuro. En kaggle: en el proceso de recolección de los datos, el tamaño de archivos de grabaciones que contenían llamadas de ballenas era diferente de los que no contenían llamadas. Esta es una filtración, pues en la tarea real de predicción no tendremos a alguien que prepare estos archivos de la misma manera. Recientemente se publicó un artículo donde se argumentaba que era posible distinguir (usando redes neuronales convolucionales) caras de criminales y no criminales. Las fotos se obtuvieron de fotos de la policía (criminales) y fotos de idetificaciones (no criminales). ¿Qué crees que podría fallar aquí en términos de filtración de datos? 11.8 Resumen El procesamiento de datos para modelo predictivos es difícil. Cuando hay una dimensión temporal, es bueno usarla a lo largo de todo el proceso para poner una barrera entre entrenamiento y validación. Cuando los datos están organizados en grupos dentro de los que hacemos predicciones, preguntarnos si queremos predecir para nuevos grupos o los mismo grupos existentes (ejemplo de las unidades primarias de muestreo). Investigar cuando hay casos faltantes, y evaluar qué tan peligroso es construir un modelo para hacer predicciones Muchas filtraciones son muy sutiles y dificiles de detectar. Puede tener que ver con cómo funcionan los sistemas que registran los datos, decisiones de diseños de base de datos, decisiones de limpieza de datos. Siempre es bueno proponer un piloto para verificar que nuestros modelos funcionan como se espera - y considerar que una degradación del desempeño puede deberse a una filtración. Finalmente, recordamos que la mejor división es entrenamiento-validación-prueba, con separaciones claras entre ellos. Usamos validación para ajustar hiperparámetros, y con prueba sólo evaluamos unos cuantos modelos. "],
["metodos-basados-en-arboles.html", "Clase 12 Métodos basados en árboles 12.1 Árboles para regresión y clasificación. 12.2 Bagging de árboles 12.3 Bosques aleatorios", " Clase 12 Métodos basados en árboles 12.1 Árboles para regresión y clasificación. La idea básica de los árboles es buscar puntos de cortes en las variables de entrada para hacer predicciones, ir dividiendo la muestra, y encontrar cortes sucesivos para refinar las predicciones. Ejemplo Buscamos clasificar hogares según su ingreso, usando como entradas características de los hogares. Podríamos tener, por ejemplo: knitr::include_graphics(&#39;./figuras/arboles_1.png&#39;) Con este árbol podemos clasificar nuevos hogares. Nótese que los árboles pueden capturar interacciones entre las variables de entradas. En nuestro ejemplo ficticio, “automóvil” nos da información acerca del ingreso, pero solo caundo el nivel de educación del jefe de familia es bajo. (Ejercicio: si el ingreso fuera una cantidad numérica, ¿cómo escribirías este modelo con una suma de términos que involucren las variables mostradas en el diagrama?) Los árboles también pueden aproximar relaciones no lineales entre entradas y variable de salida (es similar a los ejemplos donde haciamos categorización de variables de entrada). Igual que en redes neuronales, en lugar de buscar puntos de corte o interacciones a mano, con los árboles intentamos encontrarlos de manera automática. 12.1.1 Árboles para clasificación Un árbol particiona el espacio de entradas en rectángulos paralelos a los ejes, y hace predicciones basadas en un modelo simple dentro de cada una de esas particiones. Por ejemplo: knitr::include_graphics(&#39;./figuras/arboles_2.png&#39;) El proceso de partición binaria recursiva (con una entrada a la vez) puede representarse mediante árboles binarios. Los nodos terminales representan a la partición obtenida. Para definir el proceso de construcción de los árboles, debemos definir: ¿Cómo escoger las particiones? Idea: buscar hacer los nodos sucesivamente más puros (que una sola clase domine). ¿Cuándo declarar a un nodo como terminal? ¿Cuándo particionar más profundamente? Idea: dependiendo de la aplicación, buscamos hacer árboles chicos, o en otras árboles grandes que después podamos para no sobreajustar. ¿Cómo hacer predicciones en nodos terminales? Idea: escoger la clase más común en cada nodo terminal (la de máxima probabilidad). 12.1.2 Tipos de partición Supongamos que tenemos variables de entrada \\((X_1,\\ldots, X_p)\\). Recursivamente particionamos cada nodo escogiendo entre particiones tales que: Dependen de una sola variable de entrada \\(X_i\\) Si \\(X_i\\) es continua, la partición es de la forma \\(\\{X_i\\leq c\\},\\{X_i&gt; c\\}\\), para alguna \\(c\\) (punto de corte) Si \\(X_i\\) es categórica, la partición es de la forma \\(\\{X_i\\in S\\},\\{X_i\\notin S\\}\\), para algún subconjunto \\(S\\) de categorías de \\(X_i\\). En cada nodo candidato, escogemos uno de estos cortes para particionar. ¿Cómo escogemos la partición en cada nodo? En cada nodo, la partición se escoge de una manera miope o local, intentando separar las clases lo mejor que se pueda (sin considerar qué pasa en cortes hechos más adelante). En un nodo dado, escogemos la partición que reduce lo más posible su impureza. 12.1.3 Medidas de impureza Consideramos un nodo \\(t\\) de un árbol \\(T\\), y sean \\(p_1(t),\\ldots, p_K(t)\\) las proporciones de casos de \\(t\\) que caen en cada categoría. La impureza de un nodo \\(t\\) está dada por \\[i(t) = -\\sum_{j=1}^K p_j(t)\\log p_j(t)\\] Este medida se llama entropía. Hay otras posibilidades como medida de impureza (por ejemplo, coeficiente de Gini). 12.1.3.1 Ejemplo Graficamos la medida de impureza para dos clases: impureza &lt;- function(p){ -(p*log(p) + (1-p)*log(1-p)) } curve(impureza, 0,1) Donde vemos que la máxima impureza se alcanza cuando las proporciones de clase en un nodo son 50-50, y la mínima impureza (máxima pureza) se alcanza cuando en el nodo solo hay casos de una clase. Nótese que esta cantidad es proporcional a la devianza del nodo, donde tenemos porbabilidad constante de clase 1 igual a \\(p\\). 12.1.4 Reglas de partición y tamaño del árobl Podemos escribir la regla de partición, que se aplica a cada nodo de un árbol Regla de partición En cada nodo, buscamos entre todas las variables \\(X_i\\) y todos los puntos de corte \\(c\\) la que da la mayor reducción de impureza posible (donde la impureza de un corte es el promedio ponderado por casos de las impurezas de los nodos resultantes). Ejemplo Consideremos un nodo \\(t\\), cuyos casos de entrenamiento son: n_t &lt;- c(200,100, 150) impureza &lt;- function(p){ -sum(p*log(p)) } impureza(n_t/sum(n_t)) ## [1] 1.060857 Y comparamos con n_t &lt;- c(300,10, 140) impureza &lt;- function(p){ p &lt;- p[p&gt;0] -sum(p*log(p)) } impureza(n_t/sum(n_t)) ## [1] 0.7181575 Ahora supongamos que tenemos un posible corte, el primero resulta en n_t &lt;- c(300,10, 140) n_1 = c(300,0,0) n_2 = c(0,10,140) (sum(n_1)/sum(n_t))*impureza(n_1/sum(n_1)) + (sum(n_2)/sum(n_t))*impureza(n_2/sum(n_2)) ## [1] 0.08164334 Un peor corte es: n_t &lt;- c(300,10, 140) n_1 = c(200,0,40) n_2 = c(100,10,100) (sum(n_1)/sum(n_t))*impureza(n_1/sum(n_1)) + (sum(n_2)/sum(n_t))*impureza(n_2/sum(n_2)) ## [1] 0.6377053 Lo que resta explicar es qué criterio de paro utilizamos para dejar de particionar. Regla de paro Cuando usemos árboles en ótros métodos, generalmente hay dos opciones: Particionar hasta cierta profundidad fija (por ejemplo, máximo 8 nodos terminales). Este enfoque generalmente usa árboles relativamente chicos (se usa en boosting de árboles). Dejar de particionar cuando encontramos un número mínimo de casos en un nodo (por ejemplo, 5 o 10 casos). Este enfoque resulta en árboles grandes, probablemente sobreajustados (se usa en bosques aleatorios). Y cuando utilizamos los árboles por sí solos para hacer predicciones: Podemos probar distintos valores de tamaño de árbol, y escogemos por validación (muestra o cruzada) el tamaño final. Podemos usar el método CART de Breiman, que consiste en construir un árbol grande y luego podar al tamaño correcto. Ejemplo Construímos algunos árboles con los datos de spam: library(rpart) library(rpart.plot) library(ggplot2) library(dplyr) library(tidyr) spam_entrena &lt;- read.csv(&#39;./datos/spam-entrena.csv&#39;) spam_prueba &lt;- read.csv(&#39;./datos/spam-prueba.csv&#39;) head(spam_entrena) ## X wfmake wfaddress wfall wf3d wfour wfover wfremove wfinternet wforder ## 1 1 0.00 0.57 0.00 0 0.00 0 0 0 0.00 ## 2 2 1.24 0.41 1.24 0 0.00 0 0 0 0.00 ## 3 3 0.00 0.00 0.00 0 0.00 0 0 0 0.00 ## 4 4 0.00 0.00 0.48 0 0.96 0 0 0 0.48 ## 5 5 0.54 0.00 0.54 0 1.63 0 0 0 0.00 ## 6 6 0.00 0.00 0.00 0 0.00 0 0 0 0.00 ## wfmail wfreceive wfwill wfpeople wfreport wfaddresses wffree wfbusiness ## 1 0 0.57 0.57 1.15 0 0 0.00 0.00 ## 2 0 0.00 0.41 0.00 0 0 0.41 0.00 ## 3 0 0.00 0.00 0.00 0 0 0.00 0.00 ## 4 0 0.00 0.00 0.00 0 0 0.96 0.96 ## 5 0 0.00 0.54 0.00 0 0 0.54 0.54 ## 6 0 0.00 0.00 0.00 0 0 0.00 0.00 ## wfemail wfyou wfcredit wfyour wffont wf000 wfmoney wfhp wfhpl wfgeorge ## 1 1.73 3.46 0 1.15 0 0.00 0.00 0 0 0.0 ## 2 0.82 3.73 0 1.24 0 0.00 0.41 0 0 0.0 ## 3 0.00 12.19 0 4.87 0 0.00 9.75 0 0 0.0 ## 4 0.00 1.44 0 0.48 0 0.96 0.00 0 0 0.0 ## 5 0.00 2.17 0 5.97 0 0.54 0.00 0 0 0.0 ## 6 0.00 5.00 0 0.00 0 0.00 0.00 0 0 2.5 ## wf650 wflab wflabs wftelnet wf857 wfdata wf415 wf85 wftechnology wf1999 ## 1 0 0 0 0 0 0 0 0 0 0 ## 2 0 0 0 0 0 0 0 0 0 0 ## 3 0 0 0 0 0 0 0 0 0 0 ## 4 0 0 0 0 0 0 0 0 0 0 ## 5 0 0 0 0 0 0 0 0 0 0 ## 6 0 0 0 0 0 0 0 0 0 0 ## wfparts wfpm wfdirect wfcs wfmeeting wforiginal wfproject wfre wfedu ## 1 0 0 0 0 0 0 0 0.00 0 ## 2 0 0 0 0 0 0 0 0.41 0 ## 3 0 0 0 0 0 0 0 0.00 0 ## 4 0 0 0 0 0 0 0 0.48 0 ## 5 0 0 0 0 0 0 0 0.00 0 ## 6 0 0 0 0 0 0 0 0.00 0 ## wftable wfconference cfsc cfpar cfbrack cfexc cfdollar cfpound ## 1 0 0 0 0.000 0.000 0.107 0.000 0.000 ## 2 0 0 0 0.065 0.000 0.461 0.527 0.000 ## 3 0 0 0 0.000 0.000 0.000 0.000 0.000 ## 4 0 0 0 0.133 0.066 0.468 0.267 0.000 ## 5 0 0 0 0.000 0.000 0.715 0.318 0.000 ## 6 0 0 0 0.000 0.000 0.833 0.000 0.416 ## crlaverage crllongest crltotal spam ## 1 1.421 7 54 1 ## 2 3.166 19 114 1 ## 3 1.000 1 7 0 ## 4 3.315 61 242 1 ## 5 2.345 22 129 1 ## 6 1.937 8 31 0 Podemos construir un árbol grande. En este caso, buscamos que los nodos resultantes tengan al menos un caso y para particionar pedimos que el nodo tenga al menos 10 casos: set.seed(22) control_completo &lt;- rpart.control(cp=0, minsplit=10, minbucket=1, xval=10, maxdepth=30) spam_tree_completo&lt;-rpart(spam ~ ., data = spam_entrena, method = &quot;class&quot;, control = control_completo) prp(spam_tree_completo, type=4, extra=4) ## Warning: labs do not fit even at cex 0.15, there may be some overplotting Podemos examinar la parte de arriba del árbol: arbol.chico.1 &lt;- prune(spam_tree_completo, cp=0.07) prp(arbol.chico.1, type = 4, extra = 4) Podemos hacer predicciones con este árbol grande. Por ejemplo, en entrenamiento tenemos: prop &lt;- predict(spam_tree_completo, newdata = spam_entrena) table(prop[,2]&gt;0.5, spam_entrena$spam ) ## ## 0 1 ## FALSE 1835 34 ## TRUE 26 1172 y en prueba: prop_arbol_grande &lt;- predict(spam_tree_completo, newdata = spam_prueba) tab_confusion &lt;- table(prop_arbol_grande[,2]&gt;0.5, spam_prueba$spam ) prop.table(tab_confusion, 2) ## ## 0 1 ## FALSE 0.90507012 0.11202636 ## TRUE 0.09492988 0.88797364 Y notamos la brecha grande entre prueba y entrenamiento, lo que sugiere sobreajuste. Este árbol es demasiado grande. 12.1.5 Costo - Complejidad (Breiman) Una manera de escoger árboles del tamaño correcto es utilizando una medida inventada por Breiman para medir la calidad de un árbol. La complejidad de un árbol \\(T\\) está dada por (para \\(\\alpha\\) fija): \\[C_\\alpha (T) = \\overline{err}(T) + \\alpha \\vert T\\vert\\] donde \\(\\overline{err}(T)\\) es el error de clasificación de \\(T\\) \\(\\vert T\\vert\\) es el número de nodos terminales del árbol \\(\\alpha&gt;0\\) es un parámetro de penalización del tamaño del árbol. Esta medida de complejidad incluye qué tan bien clasifica el árbol en la muestra de entrenamiento, pero penaliza por el tamaño del árbol. Para escoger el tamaño del árbol correcto, definimos \\(T_\\alpha \\subset T\\) como el subárbol de \\(T\\) que minimiza la medida \\(C_\\alpha (T_\\alpha)\\). Para entender esta decisión, obsérvese que: Un subárbol grande de \\(T\\) tiene menor valor de \\(\\overline{err}(T)\\) (pues usa más cortes) Pero un subárbol grande de \\(T\\) tiene más penalización por complejidad \\(\\alpha\\vert T\\vert\\). De modo que para \\(\\alpha\\) fija, el árbol \\(T_\\alpha\\) hace un balance entre error de entrenamiento y penalización por complejidad. 12.1.5.1 Ejemplo Podemos ver subárboles más chicos creados durante el procedimiento de división de nodos (prp está el paquete rpart.plot). En este caso pondemos \\(\\alpha = 0.2\\) (cp = \\(\\alpha\\) = complexity parameter): arbol.chico.1 &lt;- prune(spam_tree_completo, cp=0.2) prp(arbol.chico.1, type = 4, extra = 4) Si disminuimos el coeficiente \\(\\alpha\\). arbol.chico.1 &lt;- prune(spam_tree_completo, cp=0.07) prp(arbol.chico.1, type = 4, extra = 4) y vemos que en efecto el árbol \\(T_{0.07}\\) contiene al árbol \\(T_{0.2}\\), y ambos son subárboles del árbol gigante que construimos al principio. Para podar un árbol con costo-complejidad, encontramos para cada \\(\\alpha&gt;0\\) (coeficiente de complejidad) un árbol \\(T_\\alpha\\subset T\\) que minimiza el costo-complejidad. Esto resulta en una sucesión de árboles \\(T_0\\subset T_1\\subset T_2\\subset \\cdots T_m\\subset T\\), de donde podemos escoger con validación el árbol óptimo. Nota: Esto es un teorema que hace falta demostrar: el resultado principal es que conforme aumentamos \\(\\alpha\\), vamos eliminiando ramas del árbol, de manera que los arbol.chico.1 &lt;- prune(spam_tree_completo, cp=0.05) prp(arbol.chico.1, type = 4, extra = 4) arbol.chico.1 &lt;- prune(spam_tree_completo, cp=0.02) prp(arbol.chico.1, type = 4, extra = 4) source(&#39;./scripts/fancyRpartPlot.R&#39;) fancyRpartPlot(arbol.chico.1, sub=&#39;&#39;) ## Loading required package: RColorBrewer Nota: Enfoques de predicción basados en un solo árbol para clasificación y regresión son típicamente superados en predicción por otros métodos. ¿Cuál crees que sea la razón? ¿Es un problema de varianza o sesgo? 12.1.6 (Opcional) Predicciones con CART Podemos hacer predicciones con un sólo árbol. En el caso de spam, haríamos set.seed(9293) # para hacer reproducible la validación cruzada spam_tree &lt;-rpart(spam ~ ., data = spam_entrena, method = &quot;class&quot;, control=list(cp=0, minsplit=5,minbucket=1)) Ahora mostramos los resultados de cada árbol para cada valor de \\(\\alpha\\). La siguiente función nos da una estimación de validación cruzada del error: printcp(spam_tree) ## ## Classification tree: ## rpart(formula = spam ~ ., data = spam_entrena, method = &quot;class&quot;, ## control = list(cp = 0, minsplit = 5, minbucket = 1)) ## ## Variables actually used in tree construction: ## [1] cfbrack cfdollar cfexc cfpar cfsc ## [6] crlaverage crllongest crltotal wf1999 wf3d ## [11] wf650 wfaddress wfall wfbusiness wfconference ## [16] wfcredit wfdata wfdirect wfedu wfemail ## [21] wffont wffree wfgeorge wfhp wfhpl ## [26] wfinternet wflabs wfmail wfmake wfmeeting ## [31] wfmoney wforder wforiginal wfour wfover ## [36] wfpeople wfpm wfproject wfre wfreceive ## [41] wfremove wfreport wftechnology wfwill wfyou ## [46] wfyour X ## ## Root node error: 1206/3067 = 0.39322 ## ## n= 3067 ## ## CP nsplit rel error xerror xstd ## 1 0.49087894 0 1.000000 1.00000 0.022431 ## 2 0.13681592 1 0.509121 0.54975 0.018903 ## 3 0.05223881 2 0.372305 0.44942 0.017516 ## 4 0.03980100 3 0.320066 0.34163 0.015659 ## 5 0.03150912 4 0.280265 0.30514 0.014922 ## 6 0.01160862 5 0.248756 0.28275 0.014436 ## 7 0.01077944 6 0.237148 0.27612 0.014286 ## 8 0.00663350 7 0.226368 0.25954 0.013901 ## 9 0.00497512 9 0.213101 0.24046 0.013436 ## 10 0.00414594 18 0.166667 0.21227 0.012701 ## 11 0.00331675 20 0.158375 0.21144 0.012679 ## 12 0.00276396 24 0.145108 0.20481 0.012496 ## 13 0.00248756 27 0.136816 0.19320 0.012167 ## 14 0.00165837 31 0.126036 0.18740 0.011997 ## 15 0.00130301 44 0.104478 0.18408 0.011899 ## 16 0.00124378 52 0.092869 0.18657 0.011973 ## 17 0.00118455 54 0.090381 0.18740 0.011997 ## 18 0.00110558 61 0.082090 0.18740 0.011997 ## 19 0.00082919 67 0.075456 0.18823 0.012022 ## 20 0.00066335 100 0.048093 0.19569 0.012238 ## 21 0.00041459 107 0.043118 0.19652 0.012262 ## 22 0.00033167 121 0.037313 0.20896 0.012611 ## 23 0.00031095 126 0.035655 0.21144 0.012679 ## 24 0.00027640 140 0.029851 0.21393 0.012746 ## 25 0.00020730 146 0.028192 0.21393 0.012746 ## 26 0.00010365 150 0.027363 0.21725 0.012836 ## 27 0.00000000 158 0.026534 0.21725 0.012836 Y usamos la regla de mínimo error o a una desviación estándar del error mínimo: arbol_podado &lt;- prune(spam_tree, cp = 0.00130301) prp(arbol_podado) Cuyo error de predicción es: prop_arbol_podado &lt;- predict(arbol_podado, newdata=spam_prueba) head(prop_arbol_podado) ## 0 1 ## 1 0.02578797 0.974212 ## 2 0.02578797 0.974212 ## 3 0.03703704 0.962963 ## 4 0.12500000 0.875000 ## 5 0.02578797 0.974212 ## 6 0.02578797 0.974212 prop.table(table((prop_arbol_podado[,2]&gt;0.5),spam_prueba$spam),2) ## ## 0 1 ## FALSE 0.94282632 0.12191104 ## TRUE 0.05717368 0.87808896 12.1.7 Árboles para regresión Para problemas de regresión, el criterio de pureza y la predicción en cada nodo terminal es diferente: En los nodos terminales usamos el promedio los casos de entrenamiento que caen en tal nodo (en lugar de la clase más común) La impureza de define como varianza: si \\(t\\) es un nodo, su impureza está dada por \\(\\frac{1}{n(t)}\\sum (y - m)^2\\), donde la suma es sobre los casos que están en el nodo y \\(m\\) es la media de las \\(y\\)’s del nodo. 12.1.8 Variabilidad en el proceso de construcción Existe variabilidad considerable en el proceso de división, lo cual es una debilidad de los árboles. Por ejemplo: set.seed(9923) muestra.1 &lt;- spam_entrena[sample(1:nrow(spam_entrena), nrow(spam_entrena), replace=T), ] spam.tree.completo.1 &lt;-rpart(spam ~ ., data = muestra.1, method = &quot;class&quot;, control = control_completo) arbol.chico.1 &lt;- prune(spam.tree.completo.1, cp=0.03) prp(arbol.chico.1, type = 4, extra = 4) muestra.1 &lt;- spam_entrena[sample(1:nrow(spam_entrena), nrow(spam_entrena), replace=T), ] spam.tree.completo.1 &lt;-rpart(spam ~ ., data = muestra.1, method = &quot;class&quot;, control = control_completo) arbol.chico.1 &lt;- prune(spam.tree.completo.1, cp=0.03) prp(arbol.chico.1, type = 4, extra = 4) Pequeñas diferencias en la muestra de entrenamiento produce distintas selecciones de variables y puntos de corte, y estructuras de árboles muchas veces distintas. Esto introduce varianza considerable en las predicciones. 12.1.9 Relaciones lineales Los árboles pueden requerir ser muy grandes para estimar apropiadamente relaciones lineales. x &lt;- runif(200,0,1) y &lt;- 2*x + rnorm(200,0,0.1) arbol &lt;- rpart(y~x, data=data_frame(x=x, y=y), method = &#39;anova&#39;) x_pred &lt;- seq(0,1,0.05) y_pred &lt;- predict(arbol, newdata = data_frame(x=x_pred)) y_verdadera &lt;- 2*x_pred dat &lt;- data_frame(x_pred=x_pred, y_pred=y_pred, y_verdadera=y_verdadera) %&gt;% gather(y, valor, y_pred:y_verdadera) ggplot(dat, aes(x=x_pred, y=valor, colour=y)) + geom_line() 12.1.10 Ventajas y desventajas de árboles Ventajas: Árboles chicos son relativamente fáciles de explicar Capturan interacciones entre las variables de entrada Son robustos en el sentido de que valores numéricos atípicos no hacen fallar al método no es necesario transformar (monótonamente) variables de entrada hay formas fáciles de lidiar con datos faltantes (cortes sucedáneos) Se ajustan rápidamente y son relativamente fáciles de interpretar (por ejemplo, son útiles para clasificar en campo) Árboles grandes generalmente no sufren de sesgo. Desventajas: Tienen dificultades en capturar estructuras lineales. En la interpretación, tienen la dificultad de que muchas veces algunas variables de entrada “enmascaran” a otras. Que una variable de entrada no esté en el árbol no quiere decir que no sea “importante” para predecir (regresión ridge lidia mejor con esto). Son inestables (varianza alta) por construcción: es local/miope, basada en cortes duros si/no. Esto produce desempeño predictivo relativamente malo. (p ej: una pequeña diferencia en cortes iniciales puede resultar en estructuras de árbol totalmente distintas). Adicoinalmente, no son apropiados cuando hay variables categóricas con muchas niveles: en estos casos, el árbol sobreajusta desde los primeros cortes, y las predicciones son malas. 12.2 Bagging de árboles Bosques aleatorios es un método de predicción que utiliza familias de árboles para hacer predicciones. Los árboles grandes tienen la ventaja de tener sesgo bajo, pero sufren de varianza alta. Podemos explotar el sesgo bajo si logramos controlar la varianza. Una idea primera para lograr esto es es hacer bagging de árboles: Perturbar la muestra de entrenamiento de distintas maneras y producir árboles distintos (grandes). La perturbación más usada es tomar muestras bootstrap de los datos y ajustar un árbol a cada muestra bootstrap Promediar el resultado de todos estos árboles para hacer predicciones. El proceso de promediar reduce la varianza, sin tener pérdidas en sesgo. La idea básica de bagging (bootstrap aggregation) es la siguiente: Consideramos el proceso \\({\\mathcal L} \\to T_{\\mathcal L}\\), que representa el proceso de ajuste de un árbol \\(T_{\\mathcal L}\\) a partir de la muestra de entrenamiento \\({\\mathcal L}\\). Si pudiéramos obtener distintas muestras de entrenamiento \\[{\\mathcal L}_1, {\\mathcal L}_2, \\ldots, {\\mathcal L}_B,\\] y supongamos que construimos los árboles (que suponemos de regresión) \\[T_1, T_2, \\ldots, T_B,\\] Podríamos mejorar nuestras predicciones construyendo el árbol promedio \\[T(x) = \\frac{1}{B}\\sum_{i=b}^B T_b (x)\\] ¿Por qué es mejor este árbol promedio que cualquiera de sus componentes? Veamos primero el sesgo. El valor esperado del árbol promedio es \\[E[T(x)] = \\frac{1}{B}\\sum_{i=b}^B E[T_b (x)]\\] y como cada \\(T_b(x)\\) se construye de la misma manera a partir de \\({\\mathcal L}_b\\), y todas las muestras \\({\\mathcal L}_b\\) se extraen de la misma forma, todos los términos de la suma de la derecha son iguales: \\[E[T(x)] = E[T_1 (x)],\\] lo que implica que el sesgo del promedio es igual al sesgo de un solo árbol (que es bajo, pues suponemos que los árboles son grandes). Ahora veamos la varianza. Como las muestras \\({\\mathcal L}_b\\) se extraen de manera independiente, entonces \\[Var[T(x)] = Var\\left( \\frac{1}{B}\\sum_{i=b}^B T_b (x)\\right) = \\frac{1}{B^2}\\sum_{i=b}^B Var[T_b (x)],\\] pues los distintos \\(T_b(x)\\) no están correlacionados (en ese caso, varianza de la suma es la suma de las varianzas), y las constantes salen de la varianza al cuadrado. Por las mismas razones que arriba, todos los términos de la derecha son iguales, y \\[Var[T(x)] = \\frac{1}{B}\\ Var[T_1 (x)]\\] de modo que la varianza del árbol promedio es mucho más chica que la varianza de un árbol dado (si \\(B\\) es grande). Sin embargo, no podemos tomar muestras de entrenamiento repetidamente para ajustar estos árboles. ¿Cómo podemos simular extraer distintas muestras de entrenamiento? Sabemos que si tenemos una muestra de entrenamiento fija \\({\\mathcal L}\\), podemos evaluar la variación de esta muestra tomando muestras bootstrap de \\({\\mathcal L}\\), que denotamos por \\[{\\mathcal L}_1^*, {\\mathcal L}_2^*, \\ldots, {\\mathcal L}_B^*,\\] Recordatorio: una muestra bootstrap de \\(\\mathcal L\\) es una muestra con con reemplazo de \\({\\mathcal L}\\) del mismo tamaño que \\({\\mathcal L}\\). Entonces la idea es que construimos los árboles (que suponemos de regresión) \\[T_1^*, T_2^*, \\ldots, T_B^*,\\] podríamos mejorar nuestras predicciones construyendo el árbol promedio \\[T^*(x) = \\frac{1}{B}\\sum_{i=b}^B T_b^* (x)\\] para suavizar la variación de cada árbol individual. El argumento del sesgo aplica en este caso, pero el de la varianza no exactamente, pues las muestras bootstrap no son independientes (están correlacionadas a través de la muestra de entrenamiento de donde se obtuvieron),a pesar de que las muestras bootstrap se extraen de manera independiente de \\({\\mathcal L}\\). De esta forma, no esperamos una reducción de varianza tan grande como en el caso de muestras independientes. Bagging Sea \\({\\mathcal L} =\\{(x^{(i)}, y^{(i)})\\}_{i=1}^n\\) una muestra de entrenamiento, y sean \\[{\\mathcal L}_1^*, {\\mathcal L}_2^*, \\ldots, {\\mathcal L}_B^*,\\] muestras bootstrap de \\({\\mathcal L}\\) (muestreamos con reemplazo los pares \\((x^{(i)}, y^{(i)})\\), para obtener una muestra de tamaño \\(n\\)). Para cada muestra bootstrap construimos un árbol \\[{\\mathcal L}_b^* \\to T_b^*\\]. (Regresión) Promediamos árboles para reducir varianza \\[T^*(x) = \\frac{1}{B}\\sum_{i=b}^B T_b^*(x)\\] (Clasificación) Tomamos votos sobre todos los árboles: \\[T^*(x) = argmax_g \\{ \\# \\{i|T_b^*(x)=g\\}\\}.\\] Podemos también calcular probabilidades promedio sobre todos los árboles. Bagging muchas veces reduce el error de predicción gracias a una reducción modesta de varianza. Nota: No hay garantía de bagging reduzca el error de entrenamiento, especialmente si los árboles base son muy malos clasificadores ¿Puedes pensar en un ejemplo donde empeora? 12.2.1 Ejemplo Probemos con el ejemplo de spam. Construimos árboles con muestras bootstrap de los datos originales de entrenamiento: muestra_bootstrap &lt;- function(df){ df %&gt;% sample_n(nrow(df), replace = TRUE) } arboles_bagged &lt;- lapply(1:30, function(i){ muestra &lt;- muestra_bootstrap(spam_entrena) arbol &lt;- rpart(spam ~ ., data = muestra, method = &quot;class&quot;, control=list(cp=0, minsplit=5,minbucket=1)) arbol }) Examinemos la parte de arriba de algunos de estos árboles: prp(prune(arboles_bagged[[1]], cp =0.01)) ## Warning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables). ## To silence this warning: ## Call prp with roundint=FALSE, ## or rebuild the rpart model with model=TRUE. prp(prune(arboles_bagged[[2]], cp =0.01)) ## Warning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables). ## To silence this warning: ## Call prp with roundint=FALSE, ## or rebuild the rpart model with model=TRUE. prp(prune(arboles_bagged[[3]], cp =0.01)) ## Warning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables). ## To silence this warning: ## Call prp with roundint=FALSE, ## or rebuild the rpart model with model=TRUE. Ahora probemos hacer predicciones con los 30 árboles: library(purrr) preds_clase &lt;- lapply(arboles_bagged, function(arbol){ preds &lt;- predict(arbol, newdata = spam_prueba)[,2] }) preds &lt;- preds_clase %&gt;% reduce(cbind) dim(preds) ## [1] 1534 30 prop_bagging &lt;- apply(preds, 1, mean) prop.table(table(prop_bagging &gt; 0.5, spam_prueba$spam),2) ## ## 0 1 ## FALSE 0.96224380 0.09555189 ## TRUE 0.03775620 0.90444811 Y vemos que tenemos una mejora inmediata con respecto un sólo árbol grande (tanto un árbol grande como uno podado con costo-complejidad). El único costo es el cómputo adicional para procesar las muestras bootstrap ¿Cuántas muestras bootstrap? Bagging generalmente funciona mejor cuando tomamos tantas muestras como sea posible - aunque también es un parámetro que se puede afinar. Bagging por sí solo se usa rara vez. El método más poderoso es bosques aleatorios, donde el proceso básico es bagging de árboles, pero añadimos ruido adicional en la construcción de árboles. 12.2.2 Mejorando bagging El factor que limita la mejora de desempeño de bagging es que los árboles están correlacionados a través de la muestra de entrenamiento. Como vimos, si los árboles fueran independientes, entonces mejoramos por un factor de \\(B\\) (número de muestras independientes). Veamos un argumento para entender cómo esa correlación limita las mejoras: Quiséramos calcular (para una \\(x\\) fija) \\[Var(T(x)) = Var\\left(\\frac{1}{B}\\sum_{i=1}^B T^*_i\\right)\\] donde cada \\(T^*_i\\) se construye a partir de una muestra bootstrap de \\({\\mathcal L}\\). Nótese que esta varianza es sobre la muestra de entrenamiento \\({\\mathcal L}\\). Usando la fórmula de la varianza para sumas generales: \\[\\begin{equation} Var(T(x)) = Var\\left(\\frac{1}{B}\\sum_{i=1}^B T^*_i\\right) = \\sum_{i=1}^B \\frac{1}{B^2} Var(T^*_i(x)) + \\frac{2}{B^2}\\sum_{i &lt; j} Cov(T_i^* (x), T_j^* (x)) \\tag{12.1} \\end{equation}\\] Ponemos ahora \\[\\sigma^2(x) = Var(T_i^* (x))\\] que son todas iguales porque los árboles bootstrap se extraen de la misma manera (\\({\\mathcal L}\\to {\\mathcal L}^*\\to T^*\\)). Escribimos ahora \\[\\rho(x) = corr(T_i^* (x), T_j^* (x))\\] que es una correlación sobre \\({\\mathcal L}\\) (asegúrate que entiendes este término). Todas estas correlaciones son iguales pues cada par de árboles se construye de la misma forma. Así que la fórmula (12.1) queda \\[\\begin{equation} Var(T(x)) = \\frac{1}{B} \\sigma^2(x) + \\frac{B-1}{B} \\rho(x)\\sigma^2(x) = \\sigma^2(x)\\left(\\frac{1}{B} + \\left(1-\\frac{1}{B}\\right )\\rho(x) \\right) \\tag{12.2} \\end{equation}\\] En el límite (cuando B es muy grande, es decir, promediamos muchos árboles): \\[\\begin{equation} Var(T(x)) = Var\\left(\\frac{1}{B}\\sum_{i=1}^B T^*_i\\right) \\approx \\sigma^2(x)\\rho(x) \\tag{12.3} \\end{equation}\\] Si \\(\\rho(x)=0\\) (árboles no correlacionados), la varianza del ensemble es la fracción \\(1/B\\) de la varianza de un solo árbol, y obtenemos una mejora considerable en varianza. En el otro extremo, si la correlación es alta \\(\\rho(x)\\approx 1\\), entonces no obtenemos ganancias por promediar árboles y la varianza del ensamble es similar a la de un solo árbol. Cuando hacemos bagging de árboles, la limitación de mejora cuando promediamos muchos árboles está dada por la correlación entre ellos: cuanto más grande es la correlación, menor beneficio en reducción de varianza obtenemos. Si alteramos el proceso para producir árboles menos correlacionados (menor \\(\\rho(x)\\)), podemos mejorar el desempeño de bagging. Sin embargo, estas alteraciones generalmente están acompañadas de incrementos en la varianza (\\(\\sigma^x(x)\\)). 12.3 Bosques aleatorios Los bosques aleatorios son una versión de árboles de bagging decorrelacionados. Esto se logra introduciendo variabilidad en la construcción de los árboles (esto es paradójico - pero la explicación está arriba: aunque la varianza empeora (de cada árbol), la decorrelación de árboles puede valer la pena). 12.3.1 Sabiduría de las masas Una explicación simple de este proceso que se cita frecuentemente es el fenómeno de la sabiduría de las masas: cuando promediamos estimaciones pobres de un gran número de personas (digamos ignorantes), obtenemos mejores estimaciones que cualquiera de las componentes individuales, o incluso mejores que estimaciones de expertos. Supongamos por ejemplo que \\(G_1,G_2,\\ldots, G_M\\) son clasificadores débiles, por ejemplo \\[P(correcto) = P(G_i=G)=0.6\\] para un problema con probabilidad base \\(P(G=1)=0.5\\). Supongamos que los predictores son independientes, y sea \\(G^*\\) el clasificador que se construye por mayoría de votos a partir de \\(G_1,G_2,\\ldots, G_M\\), es decir \\(G^*=1\\) si y sólo si \\(\\#\\{ G_i = 1\\} &gt; M/2\\). Podemos ver que el número de aciertos (X) de \\(G_1,G_2,\\ldots, G_M\\), por independencia, es binomial \\(Bin(M, 0.6)\\). Si \\(M\\) es grande, podemos aproximar esta distribución con una normal con media \\(M*0.6\\) y varianza \\(0.6*0.4*M\\). Esto implica que \\[P(G^* correcto)=P(X &gt; 0.5M) \\approx P\\left( Z &gt; \\frac{0.5M-0.6M}{\\sqrt(0.24M)}\\right) = P\\left(Z &gt; -2.041 \\sqrt{M}\\right)\\] Y ahora observamos que cuando \\(M\\) es grande, la cantidad de la derecha tiende a 1: la masa, en promedio, tiene la razón! Nótese, sin embargo, que baja dependencia entre las “opiniones” es parte crucial del argumento, es decir, las opiniones deben estar decorrelacionadas. El proceso de decorrelación de bosques aleatorios consiste en que cada vez que tengamos que hacer un corte en un árbol de bagging, escoger al azar un número de variables y usar estas para buscar la mejor variable y el mejor punto de corte, como hicimos en la construcción de árboles. Bosques aleatorios Sea \\(m\\) fija. Sea \\({\\mathcal L} =\\{(x^{(i)}, y^{(i)})\\}_{i=1}^n\\) una muestra de entrenamiento, y sean \\[{\\mathcal L}_1^*, {\\mathcal L}_2^*, \\ldots, {\\mathcal L}_B^*,\\] muestras bootstrap de \\({\\mathcal L}\\) (muestreamos con reemplazo los pares \\((x^{(i)}, y^{(i)})\\), para obtener una muestra de tamaño \\(n\\)). Para cada muestra bootstrap construimos un árbol \\[{\\mathcal L}_b^* \\to T_b^*\\] de la siguiente forma: En cada nodo candidato a particionar, escogemos al azar \\(m\\) variables de las disponibles Buscamos la mejor variable y punto de corte (como en un árbol normal) pero solo entre las variables que seleccionamos al azar. Seguimos hasta construir un árbol grande. (Regresión) Promediamos árboles para reducir varianza \\[T^*(x) = \\frac{1}{B}\\sum_{i=b}^B T_b^*(x)\\] (Clasificación) Tomamos votos sobre todos los árboles: \\[T^*(x) = argmax_g \\{ \\# \\{i|T_b^*(x)=g\\}\\}.\\] Podemos también calcular probabilidades promedio sobre todos los árboles. Bosques aleatorios muchas veces reduce el error de predicción gracias a una reducción a veces considerable de varianza. El objetivo final es reducir la varianza alta que producen árboles normales debido a la forma tan agresiva de construir sus cortes. Observaciones: El número de variables \\(m\\) que se seleccionan en cada nodo es un parámetro que hay que escoger (usando validación, validación cruzada). Ojo: no se selecciona un conjunto de \\(m\\) variables para cada árbol. En la construcción de cada árbol, en cada nodo se seleccionan \\(m\\) variables como candidatas para cortes. Como inducimos aleatoriedad en la construcción de árboles, este proceso reduce la correlación entre árboles del bosque, aunque también incrementa su varianza. Los bosques aleatorios funcionan bien cuando la mejora en correlación es más grande que la pérdida en varianza. Reducir \\(m\\), a grandes rasgos: Aumenta el sesgo del bosque (pues es más restringido el proceso de construcción) Disminuye la correlación entre árboles y aumenta la varianza de cada árbol Intrementar \\(m\\) Disminuye el sesgo del bosque (menos restricción) Aumenta la correlacción entre árobles y disminuye la varianza de cada árbol 12.3.2 Ejemplo Regresamos a nuestro ejemplo de spam. Intentemos con 500 árboles, y 6 variables (de 58 variables) para escoger como candidatos en cada corte: library(randomForest) bosque_spam &lt;-randomForest(factor(spam) ~ ., data = spam_entrena, ntree = 1500, mtry = 6, importance=TRUE) Evaluamos desempeño, donde vemos que obtenemos una mejora inmediata con respecto a bagging: probas &lt;- predict(bosque_spam, newdata = spam_prueba, type=&#39;prob&#39;) head(probas) ## 0 1 ## 1 0.009333333 0.9906667 ## 2 0.016666667 0.9833333 ## 3 0.070000000 0.9300000 ## 4 0.398666667 0.6013333 ## 5 0.045333333 0.9546667 ## 6 0.028666667 0.9713333 prop_bosque &lt;- probas[,2] table(prop_bosque&gt; 0.5, spam_prueba$spam) %&gt;% prop.table(2) %&gt;% round(3) ## ## 0 1 ## FALSE 0.971 0.092 ## TRUE 0.029 0.908 Comparemos las curvas ROC para: árbol grande sin podar árbol podado con costo-complejidad bagging de árboles bosque aleatorio Las curvas de precision-recall library(ROCR) pred_arbol &lt;- prediction(prop_arbol_grande[,2], spam_prueba$spam) pred_podado &lt;- prediction(prop_arbol_podado[,2], spam_prueba$spam) pred_bagging &lt;- prediction(prop_bagging, spam_prueba$spam) pred_bosque &lt;- prediction(prop_bosque, spam_prueba$spam) preds_roc &lt;- list(pred_arbol, pred_podado, pred_bagging, pred_bosque) perfs &lt;- lapply(preds_roc, function(pred){ performance(pred, x.measure = &#39;prec&#39;, measure = &#39;rec&#39;) }) plot(perfs[[1]], lwd=2, xlim=c(0,1)) plot(perfs[[2]], add=TRUE, col=&#39;orange&#39;, lwd=2) plot(perfs[[3]], add=TRUE, col=&#39;gray&#39;, lwd=2) plot(perfs[[4]], add=TRUE, col=&#39;purple&#39;, lwd=2) O las curvas ROC perfs &lt;- lapply(preds_roc, function(pred){ performance(pred, x.measure = &#39;fpr&#39;, measure = &#39;sens&#39;) }) plot(perfs[[1]], lwd=2) plot(perfs[[2]], add=TRUE, col=&#39;orange&#39;, lwd=2) plot(perfs[[3]], add=TRUE, col=&#39;gray&#39;, lwd=2) plot(perfs[[4]], add=TRUE, col=&#39;purple&#39;, lwd=2) 12.3.3 Más detalles de bosques aleatorios. Los bosques aleatorios, por su proceso de construcción, tienen aspectos interesantes. En primer lugar, tenemos la estimación de error de prueba Out-of-Bag (OOB), que es una estimación honesta del error de predicción basada en el proceso de bagging. Obsérvese en primer lugar, que cuando tomamos muestras con reemplazo para construir cada árbol, algunos casos de entrenamiento aparecen más de una vez, y otros casos no se usan en la construcción del árbol. La idea es entonces es usar esos casos excluidos para hacer una estimación honesta del error. Ejemplo Si tenemos una muestra de entrenamiento entrena &lt;- data_frame(x=1:10, y=rnorm(10, 1:10, 5)) entrena ## # A tibble: 10 x 2 ## x y ## &lt;int&gt; &lt;dbl&gt; ## 1 1 0.936 ## 2 2 -2.84 ## 3 3 -5.63 ## 4 4 -2.21 ## 5 5 7.04 ## 6 6 7.09 ## 7 7 13.0 ## 8 8 -0.423 ## 9 9 10.4 ## 10 10 5.03 Tomamos una muestra bootstrap: entrena_boot &lt;- sample_n(entrena, 10, replace = TRUE) entrena_boot ## # A tibble: 10 x 2 ## x y ## &lt;int&gt; &lt;dbl&gt; ## 1 7 13.0 ## 2 10 5.03 ## 3 2 -2.84 ## 4 8 -0.423 ## 5 2 -2.84 ## 6 1 0.936 ## 7 4 -2.21 ## 8 10 5.03 ## 9 8 -0.423 ## 10 8 -0.423 Construimos un predictor mod_boot &lt;- lm(y~x, data = entrena_boot) y ahora obtenemos los datos que no se usaron: prueba_boot &lt;- anti_join(entrena, entrena_boot) ## Joining, by = c(&quot;x&quot;, &quot;y&quot;) prueba_boot ## # A tibble: 4 x 2 ## x y ## &lt;int&gt; &lt;dbl&gt; ## 1 3 -5.63 ## 2 5 7.04 ## 3 6 7.09 ## 4 9 10.4 y usamos estos tres casos para estimar el error de predicción: mean(abs(predict(mod_boot, prueba_boot)-prueba_boot$y)) ## [1] 5.936181 Esta es la estimación OOB (out-of-bag) para este modelo particular. En un principio podemos pensar que quizá por mala suerte obtenemos pocos elementos OOB para evaluar el error, pero en realidad para muestras no tan chicas obtenemos una fracción considerable. Cuando el tamaño de muestra \\(n\\) es grande, el porcentaje esperado de casos que no están en la muestra bootstrap es alrededor del 37% Demuestra usando probabilidad y teoría de muestras con reemplazo. Estimación OOB del error Consideramos un bosque aleatorio \\(T_{ba}\\)con árboles \\(T_1^*, T_2^*, \\ldots, T_B^*\\), y conjunto de entrenamiento original \\({\\mathcal L} =\\{(x^{(i)}, y^{(i)}\\}_{i=1}^n\\). Para cada caso de entrenamiento \\((x^{(i)}, y^{(i)})\\) consideramos todos los árboles que no usaron este caso para construirse, y construimos un bosque \\(T_{ba}^{(i)}\\) basado solamente en esos árboles. La predicción OOB de \\(T_{ba}^{(i)}\\) para \\((x^{(i)}, y^{(i)})\\) es \\[y_{oob}^{(i)} = T_{ba}^{(i)}(x^{(i)})\\] El error OOB del árbol \\(T_{ba}\\) está dado por 1. Regresión (error cuadrático medio) \\[\\hat{Err}_{oob} = \\frac{1}{n} \\sum_{i=1}^n (y^{(i)} - y_{oob}^{(i)})^2\\] 2. Clasificación (error de clasificación) \\[\\hat{Err}_{oob} = \\frac{1}{n}\\sum_{i=1}^n I(y^{(i)} = y_{oob}^{(i)})\\] Para cada dato de entrenamiento, hacemos predicciones usando solamente los árboles que no consideraron ese dato en su construcción. Estas predicciones son las que evaluamos Es una especie de validación cruzada (se puede demostrar que es similar a validacion cruzada leave-one-out), pero es barata en términos computacionales. Como discutimos en validación cruzada, esto hace de OOB una buena medida de error para afinar los parámetros del modelo (principalmente el número \\(m\\) de variables que se escogen en cada corte). Ejempo Para el ejemplo de spam, podemos ver el error OOB ( y matriz de confusión también OOB): bosque_spam ## ## Call: ## randomForest(formula = factor(spam) ~ ., data = spam_entrena, ntree = 1500, mtry = 6, importance = TRUE) ## Type of random forest: classification ## Number of trees: 1500 ## No. of variables tried at each split: 6 ## ## OOB estimate of error rate: 4.96% ## Confusion matrix: ## 0 1 class.error ## 0 1807 54 0.02901666 ## 1 98 1108 0.08126036 Que comparamos con probas &lt;- predict(bosque_spam, newdata = spam_prueba, type=&#39;prob&#39;) prop_bosque &lt;- probas[,2] tab &lt;- table(prop_bosque&gt; 0.5, spam_prueba$spam) %&gt;% prop.table(2) %&gt;% round(3) 1-diag(tab) ## [1] 0.029 0.092 Podemos comparar con el cálculo de entrenamiento, que como sabemos típicamente es una mala estimación del error de predicción: probas &lt;- predict(bosque_spam, newdata = spam_entrena, type=&#39;prob&#39;) prop_bosque &lt;- probas[,2] table(prop_bosque&gt; 0.5, spam_entrena$spam) ## ## 0 1 ## FALSE 1861 11 ## TRUE 0 1195 tab &lt;- table(prop_bosque&gt; 0.5, spam_entrena$spam) %&gt;% prop.table(2) %&gt;% round(3) 1-diag(tab) ## [1] 0.000 0.009 Podemos también monitorear el error OOB conforme agregamos más árboles. Esta gráfica es útil para entender qué tanto esta mejorando el bosque dependiendo del número de árboles: err_spam &lt;- bosque_spam$err.rate %&gt;% as_data_frame %&gt;% mutate(ntrees = row_number()) head(err_spam) ## # A tibble: 6 x 4 ## OOB `0` `1` ntrees ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0.113 0.0851 0.159 1 ## 2 0.113 0.0853 0.160 2 ## 3 0.109 0.0786 0.158 3 ## 4 0.101 0.0744 0.143 4 ## 5 0.102 0.0715 0.149 5 ## 6 0.0972 0.0712 0.137 6 err_spam &lt;- err_spam %&gt;% gather(métrica, valor, -ntrees) ggplot(err_spam, aes(x=ntrees, y=valor, colour=métrica)) + geom_line() Además de la estimación OOB del error de clasificación, en la gráfica están las estimaciones OOB dada cada una de las clases (probabilidad de clasificar correctamente dada la clase: en problemas binarios son tasa de falsos positivos y tasa de falsos negativos). 12.3.4 Importancia de variables Usando muestras bootstrap y error OOB, es posible tener mediciones útiles de la importancia de una variable en el modelo en un bosque aleatorio (todo esto también fue inventado por Breiman). En primer lugar, consideremos qué significa que una variable sea importante desde el punto predictivo en un modelo. Podemos considerar, por ejemplo: Si quitamos una variable, y el error de predicción se degrada, la variable es importante. Este no es un muy buen enfoque, porque muchas veces tenemos conjuntos de variables correlacionadas. Aún cuando una variable influya en la predicción, si la quitamos, otras variable pueden hacer su trabajo, y el modelo no se degrada mucho (piensa en regresión, en donde incluso esta variable eliminada puede tener un coeficiente grande e influir mucho en la predicción). También requiere ajustar modelos adicionales. Si las predicciones cambian mucho cuando una variable cambia, entonces la variable es importante. Este concepto funciona mejor, al menos desde el punto de vista predictivo. Su defecto es que debemos decidir qué cambios queremos medir. Si el modelo es simple (por ejemplo, lineal), entonces es relativamente fácil usar cambios marginales. Pero en modelos no lineales cambios marginales no necesariamente evalúan correctamente el efecto de la variable sobre las predicciones. La situación se complica adicionalmente si hay interacciones con otras variables, lo que típicamente sucede en métodos basados en árbles. La idea de Breiman, que intenta atender estas observaciones, es como sigue: Consideramos un árbol \\(T^*_j\\) del bosque, con muestra bootstrap \\({\\mathcal L}^*_i\\). Calculamos un tipo de error out-of-bag para el árbol, promediando sobre todos los elementos de \\({\\mathcal L}\\) que no están en \\({\\mathcal L}^*_i\\) \\[\\widehat{Err}_{oob}(T^*_j) = \\frac{1}{A_j}\\sum_{(x^{(i)}, y^{(i)}) \\in {\\mathcal L} -{\\mathcal L}^*_i} L(y^{(i)}, T^*_j(x^{(i)}))\\] donde \\(A_j\\) es el tamaño de \\({\\mathcal L} -{\\mathcal L}^*_i\\). Ahora permutamos al azar la variable \\(X_k\\) en la muestra OOB \\({\\mathcal L} -{\\mathcal L}^*_i\\). Describimos esta operación como \\(x^{(i)} \\to x^{(i)}_k\\). Calculamos el error nuevamente: \\[\\widehat{Err}_{k}(T^*_j) = \\frac{1}{A_j}\\sum_{(x^{(i)}, y^{(i)}) \\in {\\mathcal L} -{\\mathcal L}^*_i} L(y^{(i)}, T^*_j(x_k^{(i)}))\\] Ahora calculamos la degradación del error out-of-bag debido a la permutación: \\[ D_k(T_j^*) = \\widehat{Err}_{k}(T^*_j) - \\widehat{Err}_{oob}(T^*_j) \\] Y promediamos sobre el bosque entero \\[I_k =\\frac{1}{B} \\sum_{j=1}^B D_k(T^*_j)\\] y a esta cantidad le llamamos la importancia (basada en permutaciones) de la variable \\(k\\) en el bosque aleatorio. Es el decremento promedio de capacidad predictiva cuando “quitamos” la variable \\(X_k\\). Nótese que: No podemos “quitar” la variable durante el entrenamiento de los árboles, pues entonces otras variables pueden hacer su trabajo, subestimando su importancia. No podemos “quitar” la variable al medir el error OOB, pues se necesitan todas las variables para poder clasificar con cada árbol (pues cada árbol usa esa variable, o tiene probabilidad de usarla). Pero podemos permutar a la hora calcular el error OOB (y no durante el entrenamiento), rompiendo la relación que hay entre \\(X_k\\) y la variable respuesta. Aunque podríamos usar esta medida para árboles, no es muy buena idea por el problema de “enmascaramiento”. Este problema se aminora en los bosques aleatorios pues todas las variables tienen oportunidad de aportar cortes en ausencia de otras variables. Otra manera de medir importancia para árboles de regresión y clasificación es mediante el decremento de impureza promedio sobre el bosque, para cada variable. Cada vez que una variable aporta un corte en un árbol, la impureza del árbol disminuye. Sumamos, en cada árbol, todos estos decrementos de impureza (cada vez que aparece la variable en un corte) Finalmente, promediamos esta medida de importancia dentro de cada árbol sobre el bosque completo. Repetimos para cada variable. Para árboles de clasificación, usualmente se toma la importancia de Gini, que está basada in la impureza de Gini en lugar de la entropía. La impureza de Gini está dada por \\[I_G(p_1, \\ldots, p_K) = \\sum_{k=1}^K p_k(1-p_k),\\] que es similar a la impureza de entropía que discutimos en la construcción de árboles: \\[I_G(p_1, \\ldots, p_K) = \\sum__{k=1}^K -p_k\\log (p_k),\\] Nótese por ejemplo que ambas toman su valor máximo en \\(p_k=1/K\\) (distribución más uniforme posible sobre las clases), y que son iguales a cero cuando \\(p_k=1\\) para alguna \\(k\\). #### Ejemplo{-} En nuestro ejemplo de spam imp &lt;- importance(bosque_spam, type=1) importancia_df &lt;- data_frame(variable = rownames(imp), MeanDecreaseAccuracy = imp[,1]) %&gt;% arrange(desc(MeanDecreaseAccuracy)) importancia_df ## # A tibble: 58 x 2 ## variable MeanDecreaseAccuracy ## &lt;chr&gt; &lt;dbl&gt; ## 1 cfexc 73.2 ## 2 wfremove 63.1 ## 3 crlaverage 63.0 ## 4 cfdollar 60.3 ## 5 wfhp 55.2 ## 6 crllongest 54.7 ## 7 wffree 54.3 ## 8 crltotal 52.0 ## 9 wfedu 47.8 ## 10 wfyour 45.3 ## # ... with 48 more rows importancia_df &lt;- importancia_df %&gt;% mutate(variable = reorder(variable, MeanDecreaseAccuracy)) ggplot(importancia_df , aes(x=variable, y= MeanDecreaseAccuracy)) + geom_point() + coord_flip() Observación: en el paquete randomForest, las importancias están escaladas por su la desviación estándar sobre los árboles - la idea es que puedan ser interpretados como valores-\\(z\\) (estandarizados). En este caso, nos podríamos fijar en importancias que están por arriba de \\(2\\), por ejemplo. Para obtener los valores no estandarizados (y ver la degradación en desempeño directamente) podemos calcular importance(bosque_spam, type = 1, scale = FALSE) ## MeanDecreaseAccuracy ## X -3.398063e-04 ## wfmake 7.820918e-04 ## wfaddress 1.509922e-03 ## wfall 3.607607e-03 ## wf3d 6.865265e-05 ## wfour 1.415974e-02 ## wfover 2.559785e-03 ## wfremove 3.466735e-02 ## wfinternet 5.113536e-03 ## wforder 1.229169e-03 ## wfmail 2.388153e-03 ## wfreceive 4.081920e-03 ## wfwill 3.701128e-03 ## wfpeople 6.623610e-04 ## wfreport 6.582026e-04 ## wfaddresses 8.486423e-04 ## wffree 2.377365e-02 ## wfbusiness 5.742176e-03 ## wfemail 2.207889e-03 ## wfyou 1.151620e-02 ## wfcredit 3.088054e-03 ## wfyour 1.909754e-02 ## wffont 1.687250e-03 ## wf000 1.358799e-02 ## wfmoney 1.171880e-02 ## wfhp 3.220300e-02 ## wfhpl 1.321378e-02 ## wfgeorge 1.677690e-02 ## wf650 3.714641e-03 ## wflab 1.205268e-03 ## wflabs 2.968365e-03 ## wftelnet 1.252834e-03 ## wf857 5.362343e-04 ## wfdata 8.375305e-04 ## wf415 4.832454e-04 ## wf85 2.268768e-03 ## wftechnology 1.603492e-03 ## wf1999 6.902904e-03 ## wfparts 7.131246e-05 ## wfpm 1.255157e-03 ## wfdirect 6.650049e-04 ## wfcs 5.034624e-04 ## wfmeeting 3.209452e-03 ## wforiginal 8.825843e-04 ## wfproject 6.864723e-04 ## wfre 4.000573e-03 ## wfedu 1.049319e-02 ## wftable 2.721772e-05 ## wfconference 4.790163e-04 ## cfsc 1.527800e-03 ## cfpar 4.051610e-03 ## cfbrack 9.434229e-04 ## cfexc 3.979771e-02 ## cfdollar 3.244195e-02 ## cfpound 9.215076e-04 ## crlaverage 2.784469e-02 ## crllongest 3.617719e-02 ## crltotal 3.151068e-02 12.3.5 Ajustando árboles aleatorios. El parámetro más importante de afinar es usualmente \\(m\\), el número de variables que se escogen al azar en cada nodo. A veces podemos obtener algunas ventajas de afinar el número mínimo de observaciones por nodo terminal y/o el número mínimo de observaciones por nodo para considerar hacer cortes adicionales Usualmente corremos tantos árboles como podamos (cientos, miles), o hasta que se estabiliza el error. Aumentar más arboles rara vez producen sobreajuste adicional (aunque esto no quiere decir que los bosques aleatorios no puedan sobreajustar!) Ejemplo Consideremos datos de (casas en venta en Ames, Iowa)[https://ww2.amstat.org/publications/jse/v19n3/decock.pdf]. Queremos predecir el precio listado de una casa en función de las características de las casa. El análisis completo (desde limpieza y exploración) está en scripts/bosque-housing.Rmd 12.3.6 Ventajas y desventajas de bosques aleatorios Ventajas: Entre los métodos estándar, es en general uno de los métodos más competitivos: usualmente tienen excelentes tasas muy buenas de error de predicción. Los bosques aleatorios son relativamente fáciles de entrenar (ajustar usualmente 1 o 2 parámetros) y rápidos de ajustar. Heredan las ventajas de los árboles: no hay necesidad de transformar variables o construir interacciones (pues los árboles pueden descubrirlas), son robustos a valores atípicos. Igual que con los árboles, las predicciones de los bosques siempre están en el rango de las variables de predicción (no extrapolan) Desventajas: - Pueden ser lentos en la predicción, pues muchas veces requieren evaluar grandes cantidades de árboles. - No es tan simple adaptarlos a distintos tipos de problemas (por ejemplo, como redes neuronales, que combinando capas podemos construir modelos ad-hoc a problemas particulares). - La falta de extrapolación puede ser también un defecto (por ejemplo, cuando hay una estructura lineal aproximada). "],
["metodos-basados-en-arboles-boosting.html", "Clase 13 Métodos basados en árboles: boosting 13.1 Forward stagewise additive modeling (FSAM) 13.2 Discusión 13.3 Algoritmo FSAM 13.4 FSAM para clasificación binaria. 13.5 Gradient boosting 13.6 Algoritmo de gradient boosting 13.7 Funciones de pérdida 13.8 Modificaciones de Gradient Boosting 13.9 Gráficas de dependencia parcial 13.10 xgboost y gbm", " Clase 13 Métodos basados en árboles: boosting Boosting también utiliza la idea de un “ensamble” de árboles. La diferencia grande con bagging y bosques aleatorios en que la sucesión de árboles de boosting se ‘adapta’ al comportamiento del predictor a lo largo de las iteraciones, haciendo reponderaciones de los datos de entrenamiento para que el algoritmo se concentre en las predicciones más pobres. Boosting generalmente funciona bien con árboles chicos (cada uno con sesgo alto), mientras que bosques aleatorios funciona con árboles grandes (sesgo bajo). En boosting usamos muchos árboles chicos adaptados secuencialmente. La disminución del sesgo proviene de usar distintos árboles que se encargan de adaptar el predictor a distintas partes del conjunto de entrenamiento. El control de varianza se logra con tasas de aprendizaje y tamaño de árboles, como veremos más adelante. En bosques aleatorios usamos muchos árboles grandes, cada uno con una muestra de entrenamiento perturbada (bootstrap). El control de varianza se logra promediando sobre esas muestras bootstrap de entrenamiento. Igual que bosques aleatorios, boosting es también un método que generalmente tiene alto poder predictivo. 13.1 Forward stagewise additive modeling (FSAM) Aunque existen versiones de boosting (Adaboost) desde los 90s, una buena manera de entender los algoritmos es mediante un proceso general de modelado por estapas (FSAM). 13.2 Discusión Consideramos primero un problema de regresión, que queremos atacar con un predictor de la forma \\[f(x) = \\sum_{k=1}^m \\beta_k b_k(x),\\] donde los \\(b_k\\) son árboles. Podemos absorber el coeficiente \\(\\beta_k\\) dentro del árbol \\(b_k(x)\\), y escribimos \\[f(x) = \\sum_{k=1}^m T_k(x),\\] Para ajustar este tipo de modelos, buscamos minimizar la pérdida de entrenamiento: \\[\\begin{equation} \\min \\sum_{i=1}^N L(y^{(i)}, \\sum_{k=1}^M T_k(x^{(i)})) \\end{equation}\\] Este puede ser un problema difícil, dependiendo de la familia que usemos para los árboles \\(T_k\\), y sería difícil resolver por fuerza bruta. Para resolver este problema, podemos intentar una heurística secuencial o por etapas: Si tenemos \\[f_{m-1}(x) = \\sum_{k=1}^{m-1} T_k(x),\\] intentamos resolver el problema (añadir un término adicional) \\[\\begin{equation} \\min_{T} \\sum_{i=1}^N L(y^{(i)}, f_{m-1}(x^{(i)}) + T(x^{(i)})) \\end{equation}\\] Por ejemplo, para pérdida cuadrática (en regresión), buscamos resolver \\[\\begin{equation} \\min_{T} \\sum_{i=1}^N (y^{(i)} - f_{m-1}(x^{(i)}) - T(x^{(i)}))^2 \\end{equation}\\] Si ponemos \\[ r_{m-1}^{(i)} = y^{(i)} - f_{m-1}(x^{(i)}),\\] que es el error para el caso \\(i\\) bajo el modelo \\(f_{m-1}\\), entonces reescribimos el problema anterior como \\[\\begin{equation} \\min_{T} \\sum_{i=1}^N ( r_{m-1}^{(i)} - T(x^{(i)}))^2 \\end{equation}\\] Este problema consiste en ajustar un árbol a los residuales o errores del paso anterior. Otra manera de decir esto es que añadimos un término adicional que intenta corregir los que el modelo anterior no pudo predecir bien. La idea es repetir este proceso para ir reduciendo los residuales, agregando un árbol a la vez. La primera idea central de boosting es concentrarnos, en el siguiente paso, en los datos donde tengamos errores, e intentar corregir añadiendo un término adicional al modelo. 13.3 Algoritmo FSAM Esta idea es la base del siguiente algoritmo: Algoritmo FSAM (forward stagewise additive modeling) Tomamos \\(f_0(x)=0\\) Para \\(m=1\\) hasta \\(M\\), Resolvemos \\[T_m = argmin_{T} \\sum_{i=1}^N L(y^{(i)}, f_{m-1}(x^{(i)}) + T(x^{(i)}))\\] Ponemos \\[f_m(x) = f_{m-1}(x) + T_m(x)\\] Nuestro predictor final es \\(f(x) = \\sum_{m=1}^M T_(x)\\). Observaciones: Generalmente los árboles sobre los que optimizamos están restringidos a una familia relativamente chica: por ejemplo, árboles de profundidad no mayor a \\(2,3,\\ldots, 8\\). Este algoritmo se puede aplicar directamente para problemas de regresión, como vimos en la discusión anterior: simplemente hay que ajustar árboles a los residuales del modelo del paso anterior. Sin embargo, no está claro cómo aplicarlo cuando la función de pérdida no es mínimos cuadrados (por ejemplo, regresión logística). Ejemplo (regresión) Podemos hacer FSAM directamente sobre un problema de regresión. set.seed(227818) library(rpart) library(tidyverse) x &lt;- rnorm(200, 0, 30) y &lt;- 2*ifelse(x &lt; 0, 0, sqrt(x)) + rnorm(200, 0, 0.5) dat &lt;- data.frame(x=x, y=y) Pondremos los árboles de cada paso en una lista. Podemos comenzar con una constante en lugar de 0. arboles_fsam &lt;- list() arboles_fsam[[1]] &lt;- rpart(y~x, data = dat, control = list(maxdepth=0)) arboles_fsam[[1]] ## n= 200 ## ## node), split, n, deviance, yval ## * denotes terminal node ## ## 1) root 200 5370.398 4.675925 * Ahora construirmos nuestra función de predicción y el paso que agrega un árbol predecir_arboles &lt;- function(arboles_fsam, x){ preds &lt;- lapply(arboles_fsam, function(arbol){ predict(arbol, data.frame(x=x)) }) reduce(preds, `+`) } agregar_arbol &lt;- function(arboles_fsam, dat, plot=TRUE){ n &lt;- length(arboles_fsam) preds &lt;- predecir_arboles(arboles_fsam, x=dat$x) dat$res &lt;- y - preds arboles_fsam[[n+1]] &lt;- rpart(res ~ x, data = dat, control = list(maxdepth = 1)) dat$preds_nuevo &lt;- predict(arboles_fsam[[n+1]]) dat$preds &lt;- predecir_arboles(arboles_fsam, x=dat$x) g_res &lt;- ggplot(dat, aes(x = x)) + geom_line(aes(y=preds_nuevo)) + geom_point(aes(y=res)) + labs(title = &#39;Residuales&#39;) + ylim(c(-10,10)) g_agregado &lt;- ggplot(dat, aes(x=x)) + geom_line(aes(y=preds), col = &#39;red&#39;, size=1.1) + geom_point(aes(y=y)) + labs(title =&#39;Ajuste&#39;) if(plot){ print(g_res) print(g_agregado) } arboles_fsam } Ahora construiremos el primer árbol. Usaremos ‘troncos’ (stumps), árboles con un solo corte: Los primeros residuales son simplemente las \\(y\\)’s observadas arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat) ## Warning: Removed 8 rows containing missing values (geom_point). Ajustamos un árbol de regresión a los residuales: arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat) arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat) arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat) arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat) arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat) Después de 20 iteraciones obtenemos: for(j in 1:19){ arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat, plot = FALSE) } arboles_fsam &lt;- agregar_arbol(arboles_fsam, dat) 13.4 FSAM para clasificación binaria. Para problemas de clasificación, no tiene mucho sentido trabajar con un modelo aditivo sobre las probabilidades: \\[p(x) = \\sum_{k=1}^m T_k(x),\\] Así que hacemos lo mismo que en regresión logística. Ponemos \\[f(x) = \\sum_{k=1}^m T_k(x),\\] y entonces las probabilidades son \\[p(x) = h(f(x)),\\] donde \\(h(z)=1/(1+e^{-z})\\) es la función logística. La optimización de la etapa \\(m\\) según fsam es \\[\\begin{equation} T = argmin_{T} \\sum_{i=1}^N L(y^{(i)}, f_{m-1}(x^{(i)}) + T(x^{(i)})) \\tag{13.1} \\end{equation}\\] y queremos usar la devianza como función de pérdida. Por razones de comparación (con nuestro libro de texto y con el algoritmo Adaboost que mencionaremos más adelante), escogemos usar \\[y \\in \\{1,-1\\}\\] en lugar de nuestro tradicional \\(y \\in \\{1,0\\}\\). En ese caso, la devianza binomial se ve como \\[L(y, z) = -\\left [ (y+1)\\log h(z) - (y-1)\\log(1-h(z))\\right ],\\] que a su vez se puede escribir como (demostrar): \\[L(y,z) = 2\\log(1+e^{-yz})\\] Ahora consideremos cómo se ve nuestro problema de optimización: \\[T = argmin_{T} 2\\sum_{i=1}^N \\log (1+ e^{-y^{(i)}(f_{m-1}(x^{(i)}) + T(x^{(i)})})\\] Nótese que sólo optimizamos con respecto a \\(T\\), así que podemos escribir \\[T = argmin_{T} 2\\sum_{i=1}^N \\log (1+ d_{m,i}e^{- y^{(i)}T(x^{(i)})})\\] Y vemos que el problema es más difícil que en regresión. No podemos usar un ajuste de árbol usual de regresión o clasificación, como hicimos en regresión. No está claro, por ejemplo, cuál debería ser el residual que tenemos que ajustar (aunque parece un problema donde los casos de entrenamiento están ponderados por \\(d_{m,i}\\)). Una solución para resolver aproximadamente este problema de minimización, es gradient boosting. 13.5 Gradient boosting La idea de gradient boosting es replicar la idea del residual en regresión, y usar árboles de regresión para resolver (13.1). Gradient boosting es una técnica general para funciones de pérdida generales.Regresamos entonces a nuestro problema original \\[(\\beta_m, b_m) = argmin_{T} \\sum_{i=1}^N L(y^{(i)}, f_{m-1}(x^{(i)}) + T(x^{(i)}))\\] La pregunta es: ¿hacia dónde tenemos qué mover la predicción de \\(f_{m-1}(x^{(i)})\\) sumando el término \\(T(x^{(i)})\\)? Consideremos un solo término de esta suma, y denotemos \\(z_i = T(x^{(i)})\\). Queremos agregar una cantidad \\(z_i\\) tal que el valor de la pérdida \\[L(y, f_{m-1}(x^{(i)})+z_i)\\] se reduzca. Entonces sabemos que podemos mover la z en la dirección opuesta al gradiente \\[z_i = -\\gamma \\frac{\\partial L}{\\partial z}(y^{(i)}, f_{m-1}(x^{(i)}))\\] Sin embargo, necesitamos que las \\(z_i\\) estén generadas por una función \\(T(x)\\) que se pueda evaluar en toda \\(x\\). Quisiéramos que \\[T(x^{(i)})\\approx -\\gamma \\frac{\\partial L}{\\partial z}(y^{(i)}, f_{m-1}(x^{(i)}))\\] Para tener esta aproximación, podemos poner \\[g_{i,m} = -\\frac{\\partial L}{\\partial z}(y^{(i)}, f_{m-1}(x^{(i)}))\\] e intentar resolver \\[\\begin{equation} \\min_T \\sum_{i=1}^n (g_{i,m} - T(x^{(i)}))^2, \\tag{13.2} \\end{equation}\\] es decir, intentamos replicar los gradientes lo más que sea posible. Este problema lo podemos resolver con un árbol usual de regresión. Finalmente, podríamos escoger \\(\\nu\\) (tamaño de paso) suficientemente chica y ponemos \\[f_m(x) = f_{m-1}(x)+\\nu T(x).\\] Podemos hacer un refinamiento adicional que consiste en encontrar los cortes del árbol \\(T\\) según (13.2), pero optimizando por separado los valores que T(x) toma en cada una de las regiones encontradas. 13.6 Algoritmo de gradient boosting Gradient boosting (versión simple) Inicializar con \\(f_0(x) =\\gamma\\) Para \\(m=0,1,\\ldots, M\\), Para \\(i=1,\\ldots, n\\), calculamos el residual \\[r_{i,m}=-\\frac{\\partial L}{\\partial z}(y^{(i)}, f_{m-1}(x^{(i)}))\\] Ajustamos un árbol de regresión a la respuesta \\(r_{1,m},r_{2,m},\\ldots, r_{n,m}\\). Supongamos que tiene regiones \\(R_{j,m}\\). Resolvemos (optimizamos directamente el valor que toma el árbol en cada región - este es un problema univariado, más fácil de resolver) \\[\\gamma_{j,m} = argmin_\\gamma \\sum_{x^{(i)}\\in R_{j,m}} L(y^{(i)},f_{m-1}(x^{i})+\\gamma )\\] para cada región \\(R_{j,m}\\) del árbol del inciso anterior. Actualizamos \\[f_m (x) = f_{m-1}(x) + \\sum_j \\gamma_{j,m} I(x\\in R_{j,m})\\] El predictor final es \\(f_M(x)\\). 13.7 Funciones de pérdida Para aplicar gradient boosting, tenemos primero que poder calcular el gradiente de la función de pérdida. Algunos ejemplos populares son: Pérdida cuadrática: \\(L(y,f(x))=(y-f(x))^2\\), \\(\\frac{\\partial L}{\\partial z} = -2(y-f(x))\\). Pérdida absoluta (más robusta a atípicos que la cuadrática) \\(L(y,f(x))=|y-f(x)|\\), \\(\\frac{\\partial L}{\\partial z} = signo(y-f(x))\\). Devianza binomial \\(L(y, f(x))\\) = -(1+e^{-yf(x)}), \\(y\\in\\{-1,1\\}\\), \\(\\frac{\\partial L}{\\partial z} = I(y=1) - h(f(x))\\). Adaboost, pérdida exponencial (para clasificación) \\(L(y,z) = e^{-yf(x)}\\), \\(y\\in\\{-1,1\\}\\), \\(\\frac{\\partial L}{\\partial z} = -ye^{-yf(x)}\\). 13.7.1 Discusión: adaboost (opcional) Adaboost es uno de los algoritmos originales para boosting, y no es necesario usar gradient boosting para aplicarlo. La razón es que los árboles de clasificación \\(T(x)\\) toman valores \\(T(x)\\in \\{-1,1\\}\\), y el paso de optimización (13.1) de cada árbol queda \\[T = argmin_{T} \\sum_{i=1}^N e^{-y^{(i)}f_{m-1}(x^{(i)})} e^{-y^{(i)}T(x^{(i)})} \\] \\[T = argmin_{T} \\sum_{i=1}^N d_{m,i} e^{-y^{(i)}T(x^{(i)})} \\] De modo que la función objetivo toma dos valores: Si \\(T(x^{i})\\) clasifica correctamente, entonces \\(e^{-y^{(i)}T(x^{(i)})}=e^{-1}\\), y si clasifica incorrectamente \\(e^{-y^{(i)}T(x^{(i)})}=e^{1}\\). Podemos entonces encontrar el árbol \\(T\\) construyendo un árbol usual pero con datos ponderados por \\(d_{m,i}\\), donde buscamos maximizar la tasa de clasificación correcta (puedes ver más en nuestro libro de texto, o en (Hastie, Tibshirani, and Friedman 2017). ¿Cuáles son las consecuencias de usar la pérdida exponencial? Una es que perdemos la conexión con los modelos logísticos e interpretación de probabilidad que tenemos cuando usamos la devianza. Sin embargo, son similares: compara cómo se ve la devianza (como la formulamos arriba, con \\(y\\in\\{-1,1\\}\\)) con la pérdida exponencial. Ejemplo Podemos usar el paquete de R gbm para hacer gradient boosting. Para el caso de precios de casas de la sección anterior (un problema de regresión). Para ver un ejemplo distinto, utilizaremos la pérdida absoluta en lugar de pérdida cuadrática: Fijaremos el número de árboles en 200, de profundidad 3, usando 75% de la muestra para entrenar y el restante para validación: library(gbm) entrena &lt;- read_rds(&#39;datos/ameshousing-entrena-procesado.rds&#39;) set.seed(23411) ajustar_boost &lt;- function(entrena, ...){ mod_boosting &lt;- gbm(log(vSalePrice) ~., data = entrena, distribution = &#39;laplace&#39;, n.trees = 200, interaction.depth = 3, shrinkage = 1, # tasa de aprendizaje bag.fraction = 1, train.fraction = 0.75) mod_boosting } house_boosting &lt;- ajustar_boost(entrena) dat_entrenamiento &lt;- data_frame(entrena = house_boosting$train.error, valida = house_boosting$valid.error, n_arbol = 1:length(house_boosting$train.error)) %&gt;% gather(tipo, valor, -n_arbol) print(house_boosting) ## gbm(formula = log(vSalePrice) ~ ., distribution = &quot;laplace&quot;, ## data = entrena, n.trees = 200, interaction.depth = 3, shrinkage = 1, ## bag.fraction = 1, train.fraction = 0.75) ## A gradient boosted model with laplace loss function. ## 200 iterations were performed. ## The best test-set iteration was 161. ## There were 79 predictors of which 63 had non-zero influence. ggplot(dat_entrenamiento, aes(x=n_arbol, y=valor, colour=tipo, group=tipo)) + geom_line() Que se puede graficar también así: gbm.perf(house_boosting) ## [1] 161 Como vemos, tenemos que afinar los parámetros del algoritmo. 13.8 Modificaciones de Gradient Boosting Hay algunas adiciones al algoritmo de gradient boosting que podemos usar para mejorar el desempeño. Los dos métodos que comunmente se usan son encogimiento (shrinkage), que es una especie de tasa de aprendizaje, y submuestreo, donde construimos cada árbol adicional usando una submuestra de la muestra de entrenamiento. Ambas podemos verlas como técnicas de regularización, que limitan sobreajuste producido por el algoritmo agresivo de boosting. 13.8.1 Tasa de aprendizaje (shrinkage) Funciona bien modificar el algoritmo usando una tasa de aprendizae \\(0&lt;\\nu&lt;1\\): \\[f_m(x) = f_{m-1}(x) + \\nu \\sum_j \\gamma_{j,m} I(x\\in R_{j,m})\\] Este parámetro sirve como una manera de evitar sobreajuste rápido cuando construimos los predictores. Si este número es muy alto, podemos sobreajustar rápidamente con pocos árboles, y terminar con predictor de varianza alta. Si este número es muy bajo, puede ser que necesitemos demasiadas iteraciones para llegar a buen desempeño. Igualmente se prueba con varios valores de \\(0&lt;\\nu&lt;1\\) (típicamente \\(\\nu&lt;0.1\\)) para mejorar el desempeño en validación. Nota: cuando hacemos \\(\\nu\\) más chica, es necesario hacer \\(M\\) más grande (correr más árboles) para obtener desempeño óptimo. Veamos que efecto tiene en nuestro ejemplo: modelos_dat &lt;- data_frame(n_modelo = 1:4, shrinkage = c(0.02, 0.05, 0.25, 0.5)) modelos_dat &lt;- modelos_dat %&gt;% mutate(modelo = map(shrinkage, boost)) %&gt;% mutate(eval = map(modelo, eval_modelo)) modelos_dat ## # A tibble: 4 x 4 ## n_modelo shrinkage modelo eval ## &lt;int&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 1 0.02 &lt;S3: gbm&gt; &lt;tibble [1,000 × 3]&gt; ## 2 2 0.05 &lt;S3: gbm&gt; &lt;tibble [1,000 × 3]&gt; ## 3 3 0.25 &lt;S3: gbm&gt; &lt;tibble [1,000 × 3]&gt; ## 4 4 0.5 &lt;S3: gbm&gt; &lt;tibble [1,000 × 3]&gt; graf_eval &lt;- modelos_dat %&gt;% select(shrinkage, eval) %&gt;% unnest graf_eval ## # A tibble: 4,000 x 4 ## shrinkage n_arbol tipo valor ## &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 0.02 1 entrena 0.309 ## 2 0.02 2 entrena 0.305 ## 3 0.02 3 entrena 0.301 ## 4 0.02 4 entrena 0.297 ## 5 0.02 5 entrena 0.294 ## 6 0.02 6 entrena 0.290 ## 7 0.02 7 entrena 0.287 ## 8 0.02 8 entrena 0.283 ## 9 0.02 9 entrena 0.280 ## 10 0.02 10 entrena 0.277 ## # ... with 3,990 more rows ggplot(filter(graf_eval), aes(x = n_arbol, y= valor, colour=factor(shrinkage), group = shrinkage)) + geom_line() + facet_wrap(~tipo) Obsérvese que podemos obtener un mejor resultado de validación afinando la tasa de aprendizaje. Cuando es muy grande, el modelo rápidamente sobreajusta cuando agregamos árboles. Si la tasa es demasiado chica, podos tardar mucho en llegar a un predictor de buen desempeño. 13.8.2 Submuestreo (bag.fraction) Funciona bien construir cada uno de los árboles con submuestras de la muestra de entrenamiento, como una manera adicional de reducir varianza al construir nuestro predictor (esta idea es parecida a la de los bosques aleatorios, aquí igualmente perturbamos la muestra de entrenamiento en cada paso para evitar sobreajuste). Adicionalmente, este proceso acelera considerablemente las iteraciones de boosting, y en algunos casos sin penalización en desempeño. En boosting generalmente se toman submuestras (una fracción de alrededor de 0.5 de la muestra de entrenamiento, pero puede ser más chica para conjuntos grandes de entrenamiento) sin reemplazo. Este parámetro también puede ser afinado con muestra de validación o validación cruzada. boost &lt;- ajustar_boost(entrena) modelos_dat &lt;- data_frame(n_modelo = 1:3, bag.fraction = c(0.25, 0.5, 1), shrinkage = 0.25) modelos_dat &lt;- modelos_dat %&gt;% mutate(modelo = pmap(., boost)) %&gt;% mutate(eval = map(modelo, eval_modelo)) modelos_dat ## # A tibble: 3 x 5 ## n_modelo bag.fraction shrinkage modelo eval ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 1 0.25 0.25 &lt;S3: gbm&gt; &lt;tibble [1,000 × 3]&gt; ## 2 2 0.5 0.25 &lt;S3: gbm&gt; &lt;tibble [1,000 × 3]&gt; ## 3 3 1 0.25 &lt;S3: gbm&gt; &lt;tibble [1,000 × 3]&gt; graf_eval &lt;- modelos_dat %&gt;% select(bag.fraction, eval) %&gt;% unnest graf_eval ## # A tibble: 3,000 x 4 ## bag.fraction n_arbol tipo valor ## &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 0.25 1 entrena 0.269 ## 2 0.25 2 entrena 0.232 ## 3 0.25 3 entrena 0.211 ## 4 0.25 4 entrena 0.194 ## 5 0.25 5 entrena 0.179 ## 6 0.25 6 entrena 0.170 ## 7 0.25 7 entrena 0.162 ## 8 0.25 8 entrena 0.152 ## 9 0.25 9 entrena 0.147 ## 10 0.25 10 entrena 0.142 ## # ... with 2,990 more rows ggplot((graf_eval), aes(x = n_arbol, y= valor, colour=factor(bag.fraction), group = bag.fraction)) + geom_line() + facet_wrap(~tipo, ncol = 1) En este ejemplo, podemos reducir el tiempo de ajuste usando una fracción de submuestro de 0.5, con quizá algunas mejoras en desempeño. Ahora veamos los dos parámetros actuando en conjunto: modelos_dat &lt;- list(bag.fraction = c(0.1, 0.25, 0.5, 1), shrinkage = c(0.01, 0.1, 0.25, 0.5)) %&gt;% expand.grid modelos_dat &lt;- modelos_dat %&gt;% mutate(modelo = pmap(., boost)) %&gt;% mutate(eval = map(modelo, eval_modelo)) graf_eval &lt;- modelos_dat %&gt;% select(shrinkage, bag.fraction, eval) %&gt;% unnest head(graf_eval) ## shrinkage bag.fraction n_arbol tipo valor ## 1 0.01 0.1 1 entrena 0.3108616 ## 2 0.01 0.1 2 entrena 0.3087372 ## 3 0.01 0.1 3 entrena 0.3065518 ## 4 0.01 0.1 4 entrena 0.3047564 ## 5 0.01 0.1 5 entrena 0.3027629 ## 6 0.01 0.1 6 entrena 0.3010770 ggplot(filter(graf_eval, tipo ==&#39;valida&#39;), aes(x = n_arbol, y= valor, colour=factor(bag.fraction), group = bag.fraction)) + geom_line() + facet_wrap(~shrinkage) Bag fraction demasiado chico no funciona bien, especialmente si la tasa de aprendizaje es alta (¿Por qué?). Filtremos para ver con detalle el resto de los datos: ggplot(filter(graf_eval, tipo ==&#39;valida&#39;, bag.fraction&gt;0.1), aes(x = n_arbol, y= valor, colour=factor(bag.fraction), group = bag.fraction)) + geom_line() + facet_wrap(~shrinkage) + scale_y_log10() Y parece ser que para este número de iteraciones, una tasa de aprendizaje de 0.1 junto con un bag fraction de 0.5 funciona bien: graf_eval %&gt;% filter(tipo==&#39;valida&#39;) %&gt;% group_by(shrinkage, bag.fraction) %&gt;% summarise(valor = min(valor)) %&gt;% arrange(valor) %&gt;% head(10) ## # A tibble: 10 x 3 ## # Groups: shrinkage [4] ## shrinkage bag.fraction valor ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.1 0.25 0.0830 ## 2 0.1 0.5 0.0837 ## 3 0.1 1 0.0864 ## 4 0.25 0.5 0.0865 ## 5 0.25 1 0.0903 ## 6 0.1 0.1 0.0964 ## 7 0.25 0.25 0.0979 ## 8 0.01 1 0.100 ## 9 0.01 0.5 0.100 ## 10 0.5 0.5 0.101 13.8.3 Número de árboles M Se monitorea el error sobre una muestra de validación cuando agregamos cada árboles. Escogemos el número de árboles de manera que minimize el error de validación. Demasiados árboles pueden producir sobreajuste. Ver el ejemplo de arriba. 13.8.4 Tamaño de árboles Los árboles se construyen de tamaño fijo \\(J\\), donde \\(J\\) es el número de cortes. Usualmente \\(J=1,2,\\ldots, 10\\), y es un parámetro que hay que elegir. \\(J\\) más grande permite interacciones de orden más alto entre las variables de entrada. Se intenta con varias \\(J\\) y \\(M\\) para minimizar el error de validación. 13.8.5 Controlar número de casos para cortes Igual que en bosques aleatorios, podemos establecer mínimos de muestra en nodos terminales, o mínimo de casos necesarios para hacer un corte. Ejemplo modelos_dat &lt;- list(bag.fraction = c( 0.25, 0.5, 1), shrinkage = c(0.01, 0.1, 0.25, 0.5), depth = c(1,5,10,12)) %&gt;% expand.grid modelos_dat &lt;- modelos_dat %&gt;% mutate(modelo = pmap(., boost)) %&gt;% mutate(eval = map(modelo, eval_modelo)) graf_eval &lt;- modelos_dat %&gt;% select(shrinkage, bag.fraction, depth, eval) %&gt;% unnest ggplot(filter(graf_eval, tipo ==&#39;valida&#39;), aes(x = n_arbol, y= valor, colour=factor(bag.fraction), group = bag.fraction)) + geom_line() + facet_grid(depth~shrinkage) + scale_y_log10() Podemos ver con más detalle donde ocurre el mejor desempeño: ggplot( filter(graf_eval, tipo ==&#39;valida&#39;, shrinkage == 0.1, n_arbol &gt; 100), aes(x = n_arbol, y= valor, colour=factor(bag.fraction), group = bag.fraction)) + geom_line() + facet_grid(depth~shrinkage) head(arrange(filter(graf_eval,tipo==&#39;valida&#39;), valor)) ## shrinkage bag.fraction depth n_arbol tipo valor ## 1 0.1 0.5 10 348 valida 0.08126603 ## 2 0.1 0.5 10 342 valida 0.08128108 ## 3 0.1 0.5 10 346 valida 0.08128677 ## 4 0.1 0.5 10 343 valida 0.08129096 ## 5 0.1 0.5 10 347 valida 0.08129531 ## 6 0.1 0.5 10 341 valida 0.08129727 13.8.6 Evaluación con validación cruzada. Para datos no muy grandes, conviene escoger modelos usando validación cruzada. Por ejemplo, set.seed(9983) rm(&#39;modelos_dat&#39;) mod_boosting &lt;- gbm(log(vSalePrice) ~., data = entrena, distribution = &#39;laplace&#39;, n.trees = 200, interaction.depth = 10, shrinkage = 0.1, # tasa de aprendizaje bag.fraction = 0.5, cv.folds = 10) gbm.perf(mod_boosting) eval_modelo_2 &lt;- function(modelo){ dat_eval &lt;- data_frame(entrena = modelo$train.error, valida = modelo$cv.error, n_arbol = 1:length(modelo$train.error)) %&gt;% gather(tipo, valor, -n_arbol) dat_eval } dat &lt;- eval_modelo_2(mod_boosting) (min(mod_boosting$cv.error)) ggplot(dat, aes(x = n_arbol, y=valor, colour=tipo, group=tipo)) + geom_line() 13.9 Gráficas de dependencia parcial La idea de dependencia parcial que veremos a continuación se puede aplicar a cualquier método de aprendizaje, y en boosting ayuda a entender el funcionamiento del predictor complejo que resulta del algoritmo. Aunque podemos evaluar el predictor en distintos valores y observar cómo se comporta, cuando tenemos varias variables de entrada este proceso no siempre tiene resultados muy claros o completos. Dependencia parcial es un intento por entender de manera más sistemática parte del funcionamiento de un modelo complejo. 13.9.1 Dependencia parcial Supongamos que tenemos un predictor \\(f(x_1,x_2)\\) que depende de dos variables de entrada. Podemos considerar la función \\[{f}_{1}(x_1) = E_{x_2}[f(x_1,x_2)],\\] que es el promedio de \\(f(x)\\) fijando \\(x_1\\) sobre la marginal de \\(x_2\\). Si tenemos una muestra de entrenamiento, podríamos estimarla promediando sobre la muestra de entrenamiento \\[\\bar{f}_1(x_1) = \\frac{1}{n}\\sum_{i=1}^n f(x_1, x_2^{(i)}),\\] que consiste en fijar el valor de \\(x_1\\) y promediar sobre todos los valores de la muestra de entrenamiento para \\(x_2\\). Ejemplo Construimos un modelo con solamente tres variables para nuestro ejemplo anterior mod_2 &lt;- gbm(log(vSalePrice) ~ vGrLivArea +vNeighborhood + vOverallQual + vBsmtFinSF1, data = entrena, distribution = &#39;laplace&#39;, n.trees = 500, interaction.depth = 4, shrinkage = 0.1, bag.fraction = 0.5, train.fraction = 0.75) Podemos calcular a mano la gráfica de dependencia parcial para el tamaño de la “General Living Area”. Seleccionamos las variables: dat_dp &lt;- entrena %&gt;% select(vGrLivArea, vNeighborhood, vOverallQual, vBsmtFinSF1) Ahora consideramos el rango de la variable para establecer en dónde vamos evaluar las función de dependiencia parcial: cuantiles &lt;- quantile(entrena$vGrLivArea, probs= seq(0, 1, 0.1)) cuantiles ## 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% ## 334.0 912.0 1066.6 1208.0 1339.0 1464.0 1578.0 1709.3 1869.0 2158.3 ## 100% ## 5642.0 Por ejemplo, vamos evaluar el efecto parcial cuando vGrLivArea = 912. Hacemos dat_dp_1 &lt;- dat_dp %&gt;% mutate(vGrLivArea = 912) %&gt;% mutate(pred = predict(mod_2, .)) %&gt;% summarise(mean_pred = mean(pred)) ## Using 105 trees... dat_dp_1 ## mean_pred ## 1 11.84386 Evaluamos en vGrLivArea = 1208 dat_dp_1 &lt;- dat_dp %&gt;% mutate(vGrLivArea = 1208) %&gt;% mutate(pred = predict(mod_2, .)) %&gt;% summarise(mean_pred = mean(pred)) ## Using 105 trees... dat_dp_1 ## mean_pred ## 1 11.96169 (un incremento de alrededor del 10% en el precio de venta). Hacemos todos los percentiles como sigue: cuantiles &lt;- quantile(entrena$vGrLivArea, probs= seq(0, 1, 0.01)) prom_parcial &lt;- function(x, variable, df, mod){ variable &lt;- enquo(variable) variable_nom &lt;- quo_name(variable) salida &lt;- df %&gt;% mutate(!!variable_nom := x) %&gt;% mutate(pred = predict(mod, ., n.trees = 500)) %&gt;% group_by(!!variable) %&gt;% summarise(f_1 = mean(pred)) salida } dep_parcial &lt;- map_dfr(cuantiles, ~prom_parcial(.x, vGrLivArea, entrena, mod_2)) ggplot(dep_parcial, aes(x=vGrLivArea, y = f_1)) + geom_line() + geom_line() + geom_rug(sides=&#39;b&#39;) Y transformando a las unidades originales ggplot(dep_parcial, aes(x=vGrLivArea, y= exp(f_1))) + geom_line() + geom_line() + geom_rug(sides=&#39;b&#39;) Y vemos que cuando aumenta el area de habitación, aumenta el precio. Podemos hacer esta gráfica más simple haciendo plot(mod_2, 1) # 1 pues es vGrLivArea la primer variable Discusión En primer lugar, veamos qué obtenemos de la dependencia parcial cuando aplicamos al modelo lineal sin interacciones. En el caso de dos variables, \\[f_1(x_1) = E_{x_2}[f(x_1,x_2)] =E_{x_2}[a + bx_1 + cx_2)] = \\mu + bx_1,\\] que es equivalente al análisis marginal que hacemos en regresión lineal ( incrementos en la variable \\(x_1\\) con todo lo demás fijo, donde el incremento marginal de la respuesta es el coeficiente \\(b\\)). Desde este punto de vista, dependencia parcial da una interpretación similar a la del análisis usual de coeficientes en regresión lineal, donde pensamos en “todo lo demás constante”. Igualmente, si el modelo fuera aditivo de la forma \\(f(x_1,x_2) = h_1(x_1) + h_2(x_2)\\) obtendríamos \\[f_1(x_1) = E_{x_2}[h_1(x_1) + h_2(x_2)] = \\mu + h_1(x_1),\\] y recuperaríamos otra vez la interpetación de “todo lo demás constante”. Para una variable categórica las gráficas de dependencia parcial se ven como sigue. Escribimos las cantidades logarítmicas en la escala original: dep_parcial &lt;- plot(mod_2, 2, return.grid = TRUE) %&gt;% arrange(y) dep_parcial$vNeighborhood &lt;- reorder(dep_parcial$vNeighborhood, dep_parcial$y) ggplot(dep_parcial, aes(x = vNeighborhood, y = exp(y))) + geom_point() + coord_flip() En general, si nuestro predictor depende de más variables \\(f(x_1,x_2, \\ldots, x_p)\\) entrada. Podemos considerar las funciones \\[{f}_{j}(x_j) = E_{(x_1,x_2, \\ldots x_p) - x_j}[f(x_1,x_2, \\ldots, x_p)],\\] que es el valor esperado de \\(f(x)\\) fijando \\(x_j\\), y promediando sobre el resto de las variables. Si tenemos una muestra de entrenamiento, podríamos estimarla promediando sobre la muestra de entrenamiento \\[\\bar{f}_j(x_j) = \\frac{1}{n}\\sum_{i=1}^n f(x_1^{(i)}, x_2^{(i)}, \\ldots, x_{j-1}^{(i)},\\, x_j,\\, x_{j+1}^{(i)},\\ldots, x_p^{(i)}).\\] Podemos hacer también gráficas de dependencia parcial para más de una variable, si fijamos un subconjunto de variables y promediamos sobre el resto. plot(mod_2, c(1,3)) Que también podemos graficar como grid_dp &lt;- plot(mod_2, c(1,3), level.plot = FALSE, return.grid = TRUE) ggplot(grid_dp, aes(x = vGrLivArea, y = y, colour = vOverallQual, group = vOverallQual)) + geom_line() + xlim(c(0, 3000)) ## Warning: Removed 5000 rows containing missing values (geom_path). En este caso, no vemos interacciones grandes (GrLivArea y OverallQual) en nuestro modelo. Más de interpretación Es importante evitar la interpretación incorrecta de que la función de dependencia parcial da el valor esperado del predictor condicionado a valores de la variable cuya dependencia examinamos. Es decir, \\[f_1(x_1) = E_{x_2}(f(x_1,x_2)) \\neq E(f(x_1,x_2)|x_1).\\] La última cantidad es un valor esperado diferente (calculado sobre la condicional de \\(x_2\\) dada \\(x_1\\)), de manera que utiliza información acerca de la relación que hay entre \\(x_1\\) y \\(x_2\\), y se puede interpretar como el valor esperado del predictor ingorando \\(x_2\\). La función de dependencia parcial da el efecto de \\(x_1\\) tomando en cuenta los efectos promedio de las otras variables. Ejemplos Considramos \\(f(x_1,x_2) = h_1(x_1)h_2(x_2) = x_1x_2\\), donde x_1 y x_2 tienen medias \\(a_1\\) y \\(a_2\\). La función de dependiencia parcial de \\(x_1\\) es (demuéstralo): \\(\\bar{f}_1(x_1) = a_2 x_1,\\) que nos muestra el efecto de \\(x_1\\) promediando sobre \\(x_2\\). Sin embargo, la condicional de la predicción dada \\(x_1\\) es diferente: \\[f_1(x_1) = E(x_1x_2 | x_1) = x_1 E(x_2 | x_1)\\] y el valor esperado condicional puede ser una función complicada. Por ejemplo, si hay correlación lineal entre \\(x_1\\) y \\(x_2\\) podríamos tener \\(E(x_2 | x_1) = ax_1 + b\\), etc. Esta cantidad tiene sus usos (por ejemplo, hacer predicciones cuando no tenemos \\(x_2\\)), pero para entender el efecto univariado de \\(x_1\\) generalmente es más fácil considerar la función de dependiencia parcial. Finalmente, nótese que cuando hay interacciones fuertes entre las variables, ningún análisis marginal (dependencia parcial o examen de coeficientes) da un resultado tan fácilmente interpretabl. La única solución es considerar el efecto conjunto de las variables que interactúan. De modo que este tipo de análisis funciona mejor cuando no hay interacciones grandes entre las variables (es cercano a un modelo aditivo con efectos no lineales). 13.9.2 Gráficas de dependencia parcial para otros modelos Como dijimos en la introducción, las gráficas de dependiencia parcial pueden utilizarse para cualquier tipo de modelo. 13.9.2.1 Ejemplo: regresión lineal ¿Qué esperamos si aplicamos a un modelo de regresión lineal? library(pdp) ## ## Attaching package: &#39;pdp&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## partial mod_lm &lt;- lm(log(vSalePrice) ~ vGrLivArea +vNeighborhood + vOverallQual + vBsmtFinSF1, entrena) mod_lm ## ## Call: ## lm(formula = log(vSalePrice) ~ vGrLivArea + vNeighborhood + vOverallQual + ## vBsmtFinSF1, data = entrena) ## ## Coefficients: ## (Intercept) vGrLivArea vNeighborhoodBrDale ## 10.9781318 0.0002519 -0.3876381 ## vNeighborhoodBrkSide vNeighborhoodClearCr vNeighborhoodCollgCr ## -0.1931159 0.0784516 0.0131924 ## vNeighborhoodCrawfor vNeighborhoodEdwards vNeighborhoodGilbert ## 0.0180111 -0.2231209 0.0006351 ## vNeighborhoodIDOTRR vNeighborhoodMeadowV vNeighborhoodMitchel ## -0.3716332 -0.3176807 -0.0713348 ## vNeighborhoodNAmes vNeighborhoodNoRidge vNeighborhoodNridgHt ## -0.0981734 0.0806283 0.1502544 ## vNeighborhoodNWAmes vNeighborhoodOldTown vNeighborhoodOtros ## -0.0528433 -0.2732835 -0.1615437 ## vNeighborhoodSawyer vNeighborhoodSawyerW vNeighborhoodSomerst ## -0.0956738 -0.0621679 0.0521564 ## vNeighborhoodStoneBr vNeighborhoodSWISU vNeighborhoodTimber ## 0.1231436 -0.2302935 0.0593881 ## vNeighborhoodVeenker vOverallQual vBsmtFinSF1 ## 0.1294244 0.1129118 0.0001089 mod_lm %&gt;% partial(pred.var = &quot;vGrLivArea&quot;) %&gt;% autoplot(rug = TRUE, train = entrena) 13.9.2.2 Ejemplo: bosque aleatorio library(randomForest) mod_bosque &lt;- randomForest(log(vSalePrice) ~ vGrLivArea +vNeighborhood + vOverallQual + vBsmtFinSF1, data = entrena) mod_bosque ## ## Call: ## randomForest(formula = log(vSalePrice) ~ vGrLivArea + vNeighborhood + vOverallQual + vBsmtFinSF1, data = entrena) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 1 ## ## Mean of squared residuals: 0.02367802 ## % Var explained: 85.15 mod_bosque %&gt;% partial(pred.var = &quot;vGrLivArea&quot;) %&gt;% autoplot(rug = TRUE, train = entrena) mod_bosque %&gt;% partial(pred.var = c(&quot;vGrLivArea&quot;, &quot;vOverallQual&quot;)) %&gt;% autoplot(rug = TRUE, train = entrena) Puedes ver más técnicas en Interpretable Machine Learning, por ejemplo. 13.10 xgboost y gbm Los paquetes xgboost y gbm parecen ser los más populares para hacer gradient boosting. xgboost, adicionalmente, parece ser más rápido y más flexible que gbm (paralelización, uso de GPU integrado). Existe una lista considerable de competencias de predicción donde el algoritmo/implementación ganadora es xgboost. library(xgboost) ## ## Attaching package: &#39;xgboost&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## slice x &lt;- entrena %&gt;% select(-vSalePrice) %&gt;% model.matrix(~., .) x_entrena &lt;- x[1:1100, ] x_valida &lt;- x[1101:1460, ] set.seed(1293) d_entrena &lt;- xgb.DMatrix(x_entrena, label = log(entrena$vSalePrice[1:1100])) d_valida &lt;- xgb.DMatrix(x_valida, label = log(entrena$vSalePrice[1101:1460])) watchlist &lt;- list(eval = d_valida, train = d_entrena) params &lt;- list(booster = &quot;gbtree&quot;, max_depth = 3, eta = 0.03, nthread = 1, subsample = 0.75, lambda = 0.001, objective = &quot;reg:linear&quot;, eval_metric = &quot;mae&quot;) # error absoluto bst &lt;- xgb.train(params, d_entrena, nrounds = 1000, watchlist = watchlist, verbose=1) ## [1] eval-mae:11.176984 train-mae:11.178999 ## [2] eval-mae:10.841721 train-mae:10.843556 ## [3] eval-mae:10.516091 train-mae:10.518085 ## [4] eval-mae:10.200583 train-mae:10.202491 ## [5] eval-mae:9.894920 train-mae:9.896530 ## [6] eval-mae:9.598317 train-mae:9.599773 ## [7] eval-mae:9.310502 train-mae:9.311866 ## [8] eval-mae:9.031566 train-mae:9.032389 ## [9] eval-mae:8.760724 train-mae:8.761462 ## [10] eval-mae:8.498172 train-mae:8.498637 ## [11] eval-mae:8.243278 train-mae:8.243702 ## [12] eval-mae:7.996028 train-mae:7.996329 ## [13] eval-mae:7.756287 train-mae:7.756411 ## [14] eval-mae:7.523738 train-mae:7.523695 ## [15] eval-mae:7.298147 train-mae:7.298057 ## [16] eval-mae:7.079457 train-mae:7.079143 ## [17] eval-mae:6.867540 train-mae:6.866744 ## [18] eval-mae:6.661871 train-mae:6.660701 ## [19] eval-mae:6.462197 train-mae:6.460776 ## [20] eval-mae:6.268476 train-mae:6.266927 ## [21] eval-mae:6.080146 train-mae:6.078687 ## [22] eval-mae:5.897626 train-mae:5.896358 ## [23] eval-mae:5.720685 train-mae:5.719357 ## [24] eval-mae:5.549398 train-mae:5.547802 ## [25] eval-mae:5.382868 train-mae:5.381410 ## [26] eval-mae:5.221207 train-mae:5.219763 ## [27] eval-mae:5.064470 train-mae:5.063203 ## [28] eval-mae:4.912503 train-mae:4.911200 ## [29] eval-mae:4.764926 train-mae:4.763807 ## [30] eval-mae:4.622063 train-mae:4.620884 ## [31] eval-mae:4.483413 train-mae:4.482223 ## [32] eval-mae:4.348776 train-mae:4.347674 ## [33] eval-mae:4.218169 train-mae:4.217224 ## [34] eval-mae:4.091733 train-mae:4.090778 ## [35] eval-mae:3.968975 train-mae:3.968010 ## [36] eval-mae:3.849841 train-mae:3.848888 ## [37] eval-mae:3.734298 train-mae:3.733345 ## [38] eval-mae:3.622312 train-mae:3.621352 ## [39] eval-mae:3.513997 train-mae:3.512828 ## [40] eval-mae:3.408348 train-mae:3.407215 ## [41] eval-mae:3.306162 train-mae:3.304984 ## [42] eval-mae:3.206973 train-mae:3.205757 ## [43] eval-mae:3.110841 train-mae:3.109580 ## [44] eval-mae:3.017576 train-mae:3.016211 ## [45] eval-mae:2.926954 train-mae:2.925621 ## [46] eval-mae:2.839241 train-mae:2.837812 ## [47] eval-mae:2.754123 train-mae:2.752701 ## [48] eval-mae:2.671518 train-mae:2.670100 ## [49] eval-mae:2.591545 train-mae:2.590034 ## [50] eval-mae:2.513927 train-mae:2.512405 ## [51] eval-mae:2.438531 train-mae:2.437090 ## [52] eval-mae:2.365263 train-mae:2.363928 ## [53] eval-mae:2.294239 train-mae:2.292855 ## [54] eval-mae:2.225363 train-mae:2.224102 ## [55] eval-mae:2.158767 train-mae:2.157321 ## [56] eval-mae:2.093980 train-mae:2.092589 ## [57] eval-mae:2.031284 train-mae:2.029821 ## [58] eval-mae:1.970396 train-mae:1.969090 ## [59] eval-mae:1.911263 train-mae:1.910023 ## [60] eval-mae:1.854034 train-mae:1.852790 ## [61] eval-mae:1.798455 train-mae:1.797090 ## [62] eval-mae:1.744618 train-mae:1.743325 ## [63] eval-mae:1.692358 train-mae:1.691019 ## [64] eval-mae:1.641327 train-mae:1.640058 ## [65] eval-mae:1.592239 train-mae:1.590907 ## [66] eval-mae:1.544698 train-mae:1.543235 ## [67] eval-mae:1.498477 train-mae:1.496958 ## [68] eval-mae:1.453635 train-mae:1.452130 ## [69] eval-mae:1.409772 train-mae:1.408428 ## [70] eval-mae:1.367715 train-mae:1.366239 ## [71] eval-mae:1.326800 train-mae:1.325253 ## [72] eval-mae:1.287248 train-mae:1.285523 ## [73] eval-mae:1.248763 train-mae:1.246932 ## [74] eval-mae:1.211261 train-mae:1.209524 ## [75] eval-mae:1.174987 train-mae:1.173262 ## [76] eval-mae:1.139906 train-mae:1.138175 ## [77] eval-mae:1.105752 train-mae:1.104045 ## [78] eval-mae:1.072770 train-mae:1.070972 ## [79] eval-mae:1.040598 train-mae:1.038826 ## [80] eval-mae:1.009650 train-mae:1.007721 ## [81] eval-mae:0.979265 train-mae:0.977407 ## [82] eval-mae:0.950001 train-mae:0.948159 ## [83] eval-mae:0.921491 train-mae:0.919640 ## [84] eval-mae:0.894094 train-mae:0.892078 ## [85] eval-mae:0.867323 train-mae:0.865286 ## [86] eval-mae:0.841607 train-mae:0.839350 ## [87] eval-mae:0.816515 train-mae:0.814126 ## [88] eval-mae:0.792066 train-mae:0.789763 ## [89] eval-mae:0.768292 train-mae:0.766059 ## [90] eval-mae:0.745335 train-mae:0.743182 ## [91] eval-mae:0.723135 train-mae:0.720921 ## [92] eval-mae:0.701431 train-mae:0.699273 ## [93] eval-mae:0.680305 train-mae:0.678268 ## [94] eval-mae:0.659951 train-mae:0.657979 ## [95] eval-mae:0.640289 train-mae:0.638384 ## [96] eval-mae:0.621096 train-mae:0.619237 ## [97] eval-mae:0.602619 train-mae:0.600687 ## [98] eval-mae:0.584839 train-mae:0.582761 ## [99] eval-mae:0.567640 train-mae:0.565343 ## [100] eval-mae:0.550959 train-mae:0.548542 ## [101] eval-mae:0.534757 train-mae:0.532259 ## [102] eval-mae:0.519005 train-mae:0.516405 ## [103] eval-mae:0.503871 train-mae:0.501128 ## [104] eval-mae:0.489255 train-mae:0.486071 ## [105] eval-mae:0.475083 train-mae:0.471560 ## [106] eval-mae:0.461362 train-mae:0.457412 ## [107] eval-mae:0.448123 train-mae:0.443822 ## [108] eval-mae:0.435431 train-mae:0.430689 ## [109] eval-mae:0.422947 train-mae:0.418007 ## [110] eval-mae:0.410675 train-mae:0.405594 ## [111] eval-mae:0.399015 train-mae:0.393689 ## [112] eval-mae:0.387629 train-mae:0.382120 ## [113] eval-mae:0.376682 train-mae:0.370912 ## [114] eval-mae:0.366002 train-mae:0.359868 ## [115] eval-mae:0.355613 train-mae:0.349159 ## [116] eval-mae:0.345714 train-mae:0.338928 ## [117] eval-mae:0.336081 train-mae:0.328886 ## [118] eval-mae:0.326819 train-mae:0.319230 ## [119] eval-mae:0.317691 train-mae:0.309853 ## [120] eval-mae:0.308935 train-mae:0.300856 ## [121] eval-mae:0.300444 train-mae:0.292126 ## [122] eval-mae:0.292296 train-mae:0.283533 ## [123] eval-mae:0.284549 train-mae:0.275342 ## [124] eval-mae:0.277110 train-mae:0.267480 ## [125] eval-mae:0.269827 train-mae:0.259787 ## [126] eval-mae:0.262780 train-mae:0.252439 ## [127] eval-mae:0.255950 train-mae:0.245250 ## [128] eval-mae:0.249369 train-mae:0.238362 ## [129] eval-mae:0.242996 train-mae:0.231782 ## [130] eval-mae:0.236763 train-mae:0.225267 ## [131] eval-mae:0.230745 train-mae:0.219100 ## [132] eval-mae:0.225008 train-mae:0.213131 ## [133] eval-mae:0.219477 train-mae:0.207348 ## [134] eval-mae:0.214161 train-mae:0.201821 ## [135] eval-mae:0.208863 train-mae:0.196452 ## [136] eval-mae:0.203891 train-mae:0.191283 ## [137] eval-mae:0.198914 train-mae:0.186304 ## [138] eval-mae:0.194195 train-mae:0.181375 ## [139] eval-mae:0.189724 train-mae:0.176576 ## [140] eval-mae:0.185307 train-mae:0.171958 ## [141] eval-mae:0.181102 train-mae:0.167600 ## [142] eval-mae:0.177018 train-mae:0.163403 ## [143] eval-mae:0.173138 train-mae:0.159351 ## [144] eval-mae:0.169522 train-mae:0.155450 ## [145] eval-mae:0.165944 train-mae:0.151665 ## [146] eval-mae:0.162522 train-mae:0.148044 ## [147] eval-mae:0.159126 train-mae:0.144454 ## [148] eval-mae:0.155916 train-mae:0.140983 ## [149] eval-mae:0.152798 train-mae:0.137733 ## [150] eval-mae:0.149890 train-mae:0.134611 ## [151] eval-mae:0.147011 train-mae:0.131581 ## [152] eval-mae:0.144343 train-mae:0.128727 ## [153] eval-mae:0.141851 train-mae:0.126030 ## [154] eval-mae:0.139432 train-mae:0.123388 ## [155] eval-mae:0.137020 train-mae:0.120825 ## [156] eval-mae:0.134766 train-mae:0.118328 ## [157] eval-mae:0.132575 train-mae:0.115898 ## [158] eval-mae:0.130664 train-mae:0.113702 ## [159] eval-mae:0.128784 train-mae:0.111465 ## [160] eval-mae:0.126796 train-mae:0.109349 ## [161] eval-mae:0.125017 train-mae:0.107313 ## [162] eval-mae:0.123313 train-mae:0.105365 ## [163] eval-mae:0.121812 train-mae:0.103522 ## [164] eval-mae:0.120360 train-mae:0.101748 ## [165] eval-mae:0.118789 train-mae:0.100075 ## [166] eval-mae:0.117342 train-mae:0.098434 ## [167] eval-mae:0.116027 train-mae:0.096974 ## [168] eval-mae:0.114808 train-mae:0.095542 ## [169] eval-mae:0.113652 train-mae:0.094151 ## [170] eval-mae:0.112540 train-mae:0.092748 ## [171] eval-mae:0.111490 train-mae:0.091464 ## [172] eval-mae:0.110391 train-mae:0.090240 ## [173] eval-mae:0.109336 train-mae:0.089060 ## [174] eval-mae:0.108291 train-mae:0.087905 ## [175] eval-mae:0.107341 train-mae:0.086859 ## [176] eval-mae:0.106423 train-mae:0.085829 ## [177] eval-mae:0.105520 train-mae:0.084811 ## [178] eval-mae:0.104731 train-mae:0.083838 ## [179] eval-mae:0.104073 train-mae:0.083000 ## [180] eval-mae:0.103307 train-mae:0.082091 ## [181] eval-mae:0.102615 train-mae:0.081298 ## [182] eval-mae:0.102002 train-mae:0.080498 ## [183] eval-mae:0.101427 train-mae:0.079755 ## [184] eval-mae:0.100969 train-mae:0.079049 ## [185] eval-mae:0.100446 train-mae:0.078360 ## [186] eval-mae:0.100050 train-mae:0.077707 ## [187] eval-mae:0.099440 train-mae:0.077120 ## [188] eval-mae:0.098967 train-mae:0.076555 ## [189] eval-mae:0.098478 train-mae:0.075945 ## [190] eval-mae:0.098064 train-mae:0.075435 ## [191] eval-mae:0.097584 train-mae:0.074891 ## [192] eval-mae:0.097268 train-mae:0.074412 ## [193] eval-mae:0.096946 train-mae:0.073957 ## [194] eval-mae:0.096569 train-mae:0.073517 ## [195] eval-mae:0.096221 train-mae:0.073024 ## [196] eval-mae:0.095884 train-mae:0.072631 ## [197] eval-mae:0.095583 train-mae:0.072257 ## [198] eval-mae:0.095326 train-mae:0.071892 ## [199] eval-mae:0.095087 train-mae:0.071487 ## [200] eval-mae:0.094727 train-mae:0.071093 ## [201] eval-mae:0.094426 train-mae:0.070704 ## [202] eval-mae:0.094213 train-mae:0.070354 ## [203] eval-mae:0.093980 train-mae:0.070053 ## [204] eval-mae:0.093653 train-mae:0.069705 ## [205] eval-mae:0.093427 train-mae:0.069476 ## [206] eval-mae:0.093285 train-mae:0.069242 ## [207] eval-mae:0.093102 train-mae:0.068947 ## [208] eval-mae:0.092898 train-mae:0.068708 ## [209] eval-mae:0.092622 train-mae:0.068512 ## [210] eval-mae:0.092443 train-mae:0.068279 ## [211] eval-mae:0.092221 train-mae:0.068082 ## [212] eval-mae:0.092098 train-mae:0.067902 ## [213] eval-mae:0.091922 train-mae:0.067684 ## [214] eval-mae:0.091705 train-mae:0.067478 ## [215] eval-mae:0.091618 train-mae:0.067311 ## [216] eval-mae:0.091529 train-mae:0.067056 ## [217] eval-mae:0.091330 train-mae:0.066887 ## [218] eval-mae:0.091146 train-mae:0.066725 ## [219] eval-mae:0.091042 train-mae:0.066575 ## [220] eval-mae:0.090911 train-mae:0.066396 ## [221] eval-mae:0.090879 train-mae:0.066248 ## [222] eval-mae:0.090784 train-mae:0.066083 ## [223] eval-mae:0.090649 train-mae:0.065939 ## [224] eval-mae:0.090566 train-mae:0.065818 ## [225] eval-mae:0.090553 train-mae:0.065679 ## [226] eval-mae:0.090387 train-mae:0.065510 ## [227] eval-mae:0.090297 train-mae:0.065415 ## [228] eval-mae:0.090133 train-mae:0.065294 ## [229] eval-mae:0.090028 train-mae:0.065166 ## [230] eval-mae:0.089975 train-mae:0.065034 ## [231] eval-mae:0.089858 train-mae:0.064864 ## [232] eval-mae:0.089758 train-mae:0.064732 ## [233] eval-mae:0.089635 train-mae:0.064615 ## [234] eval-mae:0.089514 train-mae:0.064502 ## [235] eval-mae:0.089433 train-mae:0.064429 ## [236] eval-mae:0.089307 train-mae:0.064289 ## [237] eval-mae:0.089243 train-mae:0.064163 ## [238] eval-mae:0.089158 train-mae:0.064053 ## [239] eval-mae:0.089103 train-mae:0.063912 ## [240] eval-mae:0.088984 train-mae:0.063769 ## [241] eval-mae:0.088899 train-mae:0.063658 ## [242] eval-mae:0.088844 train-mae:0.063538 ## [243] eval-mae:0.088773 train-mae:0.063402 ## [244] eval-mae:0.088694 train-mae:0.063309 ## [245] eval-mae:0.088552 train-mae:0.063216 ## [246] eval-mae:0.088483 train-mae:0.063079 ## [247] eval-mae:0.088426 train-mae:0.062929 ## [248] eval-mae:0.088428 train-mae:0.062880 ## [249] eval-mae:0.088324 train-mae:0.062803 ## [250] eval-mae:0.088255 train-mae:0.062691 ## [251] eval-mae:0.088286 train-mae:0.062589 ## [252] eval-mae:0.088173 train-mae:0.062481 ## [253] eval-mae:0.088107 train-mae:0.062389 ## [254] eval-mae:0.088114 train-mae:0.062245 ## [255] eval-mae:0.087986 train-mae:0.062171 ## [256] eval-mae:0.087940 train-mae:0.062072 ## [257] eval-mae:0.087850 train-mae:0.061937 ## [258] eval-mae:0.087858 train-mae:0.061872 ## [259] eval-mae:0.087836 train-mae:0.061784 ## [260] eval-mae:0.087886 train-mae:0.061682 ## [261] eval-mae:0.087875 train-mae:0.061586 ## [262] eval-mae:0.087792 train-mae:0.061518 ## [263] eval-mae:0.087855 train-mae:0.061449 ## [264] eval-mae:0.087852 train-mae:0.061385 ## [265] eval-mae:0.087874 train-mae:0.061345 ## [266] eval-mae:0.087845 train-mae:0.061241 ## [267] eval-mae:0.087827 train-mae:0.061160 ## [268] eval-mae:0.087786 train-mae:0.061073 ## [269] eval-mae:0.087769 train-mae:0.060986 ## [270] eval-mae:0.087661 train-mae:0.060906 ## [271] eval-mae:0.087615 train-mae:0.060839 ## [272] eval-mae:0.087578 train-mae:0.060745 ## [273] eval-mae:0.087529 train-mae:0.060659 ## [274] eval-mae:0.087554 train-mae:0.060569 ## [275] eval-mae:0.087489 train-mae:0.060491 ## [276] eval-mae:0.087411 train-mae:0.060398 ## [277] eval-mae:0.087333 train-mae:0.060327 ## [278] eval-mae:0.087272 train-mae:0.060290 ## [279] eval-mae:0.087254 train-mae:0.060206 ## [280] eval-mae:0.087197 train-mae:0.060154 ## [281] eval-mae:0.087200 train-mae:0.060103 ## [282] eval-mae:0.087172 train-mae:0.060053 ## [283] eval-mae:0.087125 train-mae:0.059954 ## [284] eval-mae:0.087026 train-mae:0.059857 ## [285] eval-mae:0.086999 train-mae:0.059762 ## [286] eval-mae:0.086915 train-mae:0.059643 ## [287] eval-mae:0.086855 train-mae:0.059590 ## [288] eval-mae:0.086838 train-mae:0.059497 ## [289] eval-mae:0.086809 train-mae:0.059417 ## [290] eval-mae:0.086732 train-mae:0.059345 ## [291] eval-mae:0.086776 train-mae:0.059269 ## [292] eval-mae:0.086760 train-mae:0.059201 ## [293] eval-mae:0.086720 train-mae:0.059145 ## [294] eval-mae:0.086673 train-mae:0.059100 ## [295] eval-mae:0.086609 train-mae:0.059041 ## [296] eval-mae:0.086595 train-mae:0.058986 ## [297] eval-mae:0.086593 train-mae:0.058957 ## [298] eval-mae:0.086586 train-mae:0.058895 ## [299] eval-mae:0.086577 train-mae:0.058870 ## [300] eval-mae:0.086516 train-mae:0.058809 ## [301] eval-mae:0.086485 train-mae:0.058778 ## [302] eval-mae:0.086479 train-mae:0.058720 ## [303] eval-mae:0.086427 train-mae:0.058670 ## [304] eval-mae:0.086438 train-mae:0.058585 ## [305] eval-mae:0.086284 train-mae:0.058460 ## [306] eval-mae:0.086287 train-mae:0.058395 ## [307] eval-mae:0.086234 train-mae:0.058296 ## [308] eval-mae:0.086151 train-mae:0.058170 ## [309] eval-mae:0.086172 train-mae:0.058146 ## [310] eval-mae:0.086082 train-mae:0.058028 ## [311] eval-mae:0.086119 train-mae:0.057975 ## [312] eval-mae:0.085976 train-mae:0.057914 ## [313] eval-mae:0.086000 train-mae:0.057830 ## [314] eval-mae:0.085938 train-mae:0.057790 ## [315] eval-mae:0.085945 train-mae:0.057748 ## [316] eval-mae:0.085901 train-mae:0.057673 ## [317] eval-mae:0.085880 train-mae:0.057618 ## [318] eval-mae:0.085865 train-mae:0.057565 ## [319] eval-mae:0.085865 train-mae:0.057540 ## [320] eval-mae:0.085835 train-mae:0.057481 ## [321] eval-mae:0.085732 train-mae:0.057387 ## [322] eval-mae:0.085633 train-mae:0.057302 ## [323] eval-mae:0.085625 train-mae:0.057261 ## [324] eval-mae:0.085565 train-mae:0.057225 ## [325] eval-mae:0.085518 train-mae:0.057109 ## [326] eval-mae:0.085518 train-mae:0.057035 ## [327] eval-mae:0.085509 train-mae:0.056989 ## [328] eval-mae:0.085450 train-mae:0.056925 ## [329] eval-mae:0.085354 train-mae:0.056854 ## [330] eval-mae:0.085405 train-mae:0.056818 ## [331] eval-mae:0.085403 train-mae:0.056759 ## [332] eval-mae:0.085380 train-mae:0.056720 ## [333] eval-mae:0.085301 train-mae:0.056663 ## [334] eval-mae:0.085302 train-mae:0.056629 ## [335] eval-mae:0.085303 train-mae:0.056604 ## [336] eval-mae:0.085306 train-mae:0.056546 ## [337] eval-mae:0.085299 train-mae:0.056521 ## [338] eval-mae:0.085303 train-mae:0.056471 ## [339] eval-mae:0.085293 train-mae:0.056430 ## [340] eval-mae:0.085250 train-mae:0.056383 ## [341] eval-mae:0.085262 train-mae:0.056357 ## [342] eval-mae:0.085198 train-mae:0.056260 ## [343] eval-mae:0.085143 train-mae:0.056180 ## [344] eval-mae:0.085119 train-mae:0.056119 ## [345] eval-mae:0.085114 train-mae:0.056049 ## [346] eval-mae:0.085076 train-mae:0.055955 ## [347] eval-mae:0.085052 train-mae:0.055891 ## [348] eval-mae:0.084995 train-mae:0.055784 ## [349] eval-mae:0.084884 train-mae:0.055763 ## [350] eval-mae:0.084881 train-mae:0.055723 ## [351] eval-mae:0.084850 train-mae:0.055677 ## [352] eval-mae:0.084835 train-mae:0.055634 ## [353] eval-mae:0.084813 train-mae:0.055604 ## [354] eval-mae:0.084814 train-mae:0.055518 ## [355] eval-mae:0.084729 train-mae:0.055429 ## [356] eval-mae:0.084664 train-mae:0.055366 ## [357] eval-mae:0.084641 train-mae:0.055308 ## [358] eval-mae:0.084652 train-mae:0.055266 ## [359] eval-mae:0.084666 train-mae:0.055200 ## [360] eval-mae:0.084570 train-mae:0.055146 ## [361] eval-mae:0.084525 train-mae:0.055081 ## [362] eval-mae:0.084480 train-mae:0.055013 ## [363] eval-mae:0.084481 train-mae:0.054947 ## [364] eval-mae:0.084424 train-mae:0.054909 ## [365] eval-mae:0.084447 train-mae:0.054874 ## [366] eval-mae:0.084462 train-mae:0.054830 ## [367] eval-mae:0.084453 train-mae:0.054784 ## [368] eval-mae:0.084497 train-mae:0.054713 ## [369] eval-mae:0.084524 train-mae:0.054628 ## [370] eval-mae:0.084564 train-mae:0.054578 ## [371] eval-mae:0.084652 train-mae:0.054503 ## [372] eval-mae:0.084584 train-mae:0.054418 ## [373] eval-mae:0.084584 train-mae:0.054359 ## [374] eval-mae:0.084543 train-mae:0.054309 ## [375] eval-mae:0.084549 train-mae:0.054245 ## [376] eval-mae:0.084527 train-mae:0.054191 ## [377] eval-mae:0.084571 train-mae:0.054131 ## [378] eval-mae:0.084512 train-mae:0.054093 ## [379] eval-mae:0.084489 train-mae:0.054033 ## [380] eval-mae:0.084500 train-mae:0.053985 ## [381] eval-mae:0.084476 train-mae:0.053950 ## [382] eval-mae:0.084487 train-mae:0.053913 ## [383] eval-mae:0.084448 train-mae:0.053867 ## [384] eval-mae:0.084456 train-mae:0.053785 ## [385] eval-mae:0.084410 train-mae:0.053715 ## [386] eval-mae:0.084386 train-mae:0.053668 ## [387] eval-mae:0.084407 train-mae:0.053649 ## [388] eval-mae:0.084424 train-mae:0.053626 ## [389] eval-mae:0.084410 train-mae:0.053594 ## [390] eval-mae:0.084467 train-mae:0.053542 ## [391] eval-mae:0.084463 train-mae:0.053521 ## [392] eval-mae:0.084370 train-mae:0.053448 ## [393] eval-mae:0.084482 train-mae:0.053389 ## [394] eval-mae:0.084497 train-mae:0.053355 ## [395] eval-mae:0.084482 train-mae:0.053313 ## [396] eval-mae:0.084498 train-mae:0.053266 ## [397] eval-mae:0.084478 train-mae:0.053233 ## [398] eval-mae:0.084425 train-mae:0.053193 ## [399] eval-mae:0.084415 train-mae:0.053149 ## [400] eval-mae:0.084407 train-mae:0.053104 ## [401] eval-mae:0.084395 train-mae:0.053061 ## [402] eval-mae:0.084426 train-mae:0.053023 ## [403] eval-mae:0.084408 train-mae:0.052971 ## [404] eval-mae:0.084358 train-mae:0.052871 ## [405] eval-mae:0.084301 train-mae:0.052844 ## [406] eval-mae:0.084331 train-mae:0.052780 ## [407] eval-mae:0.084369 train-mae:0.052714 ## [408] eval-mae:0.084420 train-mae:0.052650 ## [409] eval-mae:0.084449 train-mae:0.052608 ## [410] eval-mae:0.084383 train-mae:0.052540 ## [411] eval-mae:0.084424 train-mae:0.052486 ## [412] eval-mae:0.084369 train-mae:0.052419 ## [413] eval-mae:0.084357 train-mae:0.052369 ## [414] eval-mae:0.084351 train-mae:0.052343 ## [415] eval-mae:0.084340 train-mae:0.052329 ## [416] eval-mae:0.084311 train-mae:0.052281 ## [417] eval-mae:0.084291 train-mae:0.052225 ## [418] eval-mae:0.084283 train-mae:0.052165 ## [419] eval-mae:0.084310 train-mae:0.052132 ## [420] eval-mae:0.084325 train-mae:0.052103 ## [421] eval-mae:0.084254 train-mae:0.052044 ## [422] eval-mae:0.084209 train-mae:0.051979 ## [423] eval-mae:0.084190 train-mae:0.051961 ## [424] eval-mae:0.084179 train-mae:0.051901 ## [425] eval-mae:0.084110 train-mae:0.051819 ## [426] eval-mae:0.084115 train-mae:0.051767 ## [427] eval-mae:0.084119 train-mae:0.051744 ## [428] eval-mae:0.084201 train-mae:0.051716 ## [429] eval-mae:0.084185 train-mae:0.051659 ## [430] eval-mae:0.084138 train-mae:0.051643 ## [431] eval-mae:0.084084 train-mae:0.051593 ## [432] eval-mae:0.084070 train-mae:0.051544 ## [433] eval-mae:0.084097 train-mae:0.051488 ## [434] eval-mae:0.084022 train-mae:0.051436 ## [435] eval-mae:0.084042 train-mae:0.051411 ## [436] eval-mae:0.084057 train-mae:0.051396 ## [437] eval-mae:0.084068 train-mae:0.051339 ## [438] eval-mae:0.084071 train-mae:0.051288 ## [439] eval-mae:0.084004 train-mae:0.051223 ## [440] eval-mae:0.083965 train-mae:0.051140 ## [441] eval-mae:0.083886 train-mae:0.051050 ## [442] eval-mae:0.083863 train-mae:0.051024 ## [443] eval-mae:0.083845 train-mae:0.050989 ## [444] eval-mae:0.083819 train-mae:0.050962 ## [445] eval-mae:0.083856 train-mae:0.050925 ## [446] eval-mae:0.083814 train-mae:0.050879 ## [447] eval-mae:0.083765 train-mae:0.050836 ## [448] eval-mae:0.083769 train-mae:0.050787 ## [449] eval-mae:0.083775 train-mae:0.050745 ## [450] eval-mae:0.083750 train-mae:0.050700 ## [451] eval-mae:0.083791 train-mae:0.050674 ## [452] eval-mae:0.083776 train-mae:0.050637 ## [453] eval-mae:0.083723 train-mae:0.050550 ## [454] eval-mae:0.083803 train-mae:0.050513 ## [455] eval-mae:0.083859 train-mae:0.050460 ## [456] eval-mae:0.083814 train-mae:0.050408 ## [457] eval-mae:0.083767 train-mae:0.050340 ## [458] eval-mae:0.083771 train-mae:0.050287 ## [459] eval-mae:0.083755 train-mae:0.050240 ## [460] eval-mae:0.083750 train-mae:0.050189 ## [461] eval-mae:0.083720 train-mae:0.050142 ## [462] eval-mae:0.083717 train-mae:0.050106 ## [463] eval-mae:0.083710 train-mae:0.050061 ## [464] eval-mae:0.083683 train-mae:0.050015 ## [465] eval-mae:0.083689 train-mae:0.049983 ## [466] eval-mae:0.083666 train-mae:0.049909 ## [467] eval-mae:0.083639 train-mae:0.049852 ## [468] eval-mae:0.083617 train-mae:0.049820 ## [469] eval-mae:0.083591 train-mae:0.049770 ## [470] eval-mae:0.083577 train-mae:0.049716 ## [471] eval-mae:0.083554 train-mae:0.049673 ## [472] eval-mae:0.083583 train-mae:0.049596 ## [473] eval-mae:0.083558 train-mae:0.049555 ## [474] eval-mae:0.083495 train-mae:0.049509 ## [475] eval-mae:0.083587 train-mae:0.049473 ## [476] eval-mae:0.083601 train-mae:0.049437 ## [477] eval-mae:0.083587 train-mae:0.049383 ## [478] eval-mae:0.083559 train-mae:0.049347 ## [479] eval-mae:0.083517 train-mae:0.049307 ## [480] eval-mae:0.083496 train-mae:0.049250 ## [481] eval-mae:0.083533 train-mae:0.049206 ## [482] eval-mae:0.083537 train-mae:0.049162 ## [483] eval-mae:0.083506 train-mae:0.049146 ## [484] eval-mae:0.083505 train-mae:0.049081 ## [485] eval-mae:0.083484 train-mae:0.049040 ## [486] eval-mae:0.083516 train-mae:0.048998 ## [487] eval-mae:0.083491 train-mae:0.048962 ## [488] eval-mae:0.083445 train-mae:0.048926 ## [489] eval-mae:0.083446 train-mae:0.048881 ## [490] eval-mae:0.083456 train-mae:0.048840 ## [491] eval-mae:0.083439 train-mae:0.048826 ## [492] eval-mae:0.083419 train-mae:0.048768 ## [493] eval-mae:0.083413 train-mae:0.048739 ## [494] eval-mae:0.083410 train-mae:0.048667 ## [495] eval-mae:0.083395 train-mae:0.048628 ## [496] eval-mae:0.083412 train-mae:0.048589 ## [497] eval-mae:0.083414 train-mae:0.048558 ## [498] eval-mae:0.083424 train-mae:0.048521 ## [499] eval-mae:0.083406 train-mae:0.048495 ## [500] eval-mae:0.083423 train-mae:0.048462 ## [501] eval-mae:0.083402 train-mae:0.048429 ## [502] eval-mae:0.083383 train-mae:0.048368 ## [503] eval-mae:0.083338 train-mae:0.048326 ## [504] eval-mae:0.083347 train-mae:0.048276 ## [505] eval-mae:0.083347 train-mae:0.048219 ## [506] eval-mae:0.083345 train-mae:0.048153 ## [507] eval-mae:0.083294 train-mae:0.048102 ## [508] eval-mae:0.083321 train-mae:0.048060 ## [509] eval-mae:0.083434 train-mae:0.048037 ## [510] eval-mae:0.083403 train-mae:0.047984 ## [511] eval-mae:0.083413 train-mae:0.047944 ## [512] eval-mae:0.083429 train-mae:0.047920 ## [513] eval-mae:0.083422 train-mae:0.047848 ## [514] eval-mae:0.083424 train-mae:0.047797 ## [515] eval-mae:0.083417 train-mae:0.047785 ## [516] eval-mae:0.083381 train-mae:0.047721 ## [517] eval-mae:0.083367 train-mae:0.047657 ## [518] eval-mae:0.083448 train-mae:0.047613 ## [519] eval-mae:0.083447 train-mae:0.047596 ## [520] eval-mae:0.083448 train-mae:0.047582 ## [521] eval-mae:0.083486 train-mae:0.047549 ## [522] eval-mae:0.083497 train-mae:0.047541 ## [523] eval-mae:0.083452 train-mae:0.047492 ## [524] eval-mae:0.083480 train-mae:0.047451 ## [525] eval-mae:0.083466 train-mae:0.047403 ## [526] eval-mae:0.083412 train-mae:0.047376 ## [527] eval-mae:0.083386 train-mae:0.047350 ## [528] eval-mae:0.083379 train-mae:0.047307 ## [529] eval-mae:0.083400 train-mae:0.047270 ## [530] eval-mae:0.083399 train-mae:0.047251 ## [531] eval-mae:0.083375 train-mae:0.047216 ## [532] eval-mae:0.083389 train-mae:0.047145 ## [533] eval-mae:0.083398 train-mae:0.047097 ## [534] eval-mae:0.083554 train-mae:0.047045 ## [535] eval-mae:0.083531 train-mae:0.046996 ## [536] eval-mae:0.083492 train-mae:0.046947 ## [537] eval-mae:0.083512 train-mae:0.046911 ## [538] eval-mae:0.083471 train-mae:0.046876 ## [539] eval-mae:0.083465 train-mae:0.046823 ## [540] eval-mae:0.083473 train-mae:0.046812 ## [541] eval-mae:0.083713 train-mae:0.046781 ## [542] eval-mae:0.083704 train-mae:0.046763 ## [543] eval-mae:0.083721 train-mae:0.046713 ## [544] eval-mae:0.083725 train-mae:0.046696 ## [545] eval-mae:0.083722 train-mae:0.046662 ## [546] eval-mae:0.083720 train-mae:0.046620 ## [547] eval-mae:0.083701 train-mae:0.046592 ## [548] eval-mae:0.083718 train-mae:0.046556 ## [549] eval-mae:0.083690 train-mae:0.046525 ## [550] eval-mae:0.083672 train-mae:0.046515 ## [551] eval-mae:0.083683 train-mae:0.046481 ## [552] eval-mae:0.083655 train-mae:0.046449 ## [553] eval-mae:0.083640 train-mae:0.046404 ## [554] eval-mae:0.083666 train-mae:0.046354 ## [555] eval-mae:0.083599 train-mae:0.046326 ## [556] eval-mae:0.083763 train-mae:0.046306 ## [557] eval-mae:0.083761 train-mae:0.046247 ## [558] eval-mae:0.083770 train-mae:0.046206 ## [559] eval-mae:0.083779 train-mae:0.046170 ## [560] eval-mae:0.083762 train-mae:0.046133 ## [561] eval-mae:0.083762 train-mae:0.046083 ## [562] eval-mae:0.083710 train-mae:0.046065 ## [563] eval-mae:0.083731 train-mae:0.046022 ## [564] eval-mae:0.083765 train-mae:0.045998 ## [565] eval-mae:0.083778 train-mae:0.045987 ## [566] eval-mae:0.083797 train-mae:0.045909 ## [567] eval-mae:0.083871 train-mae:0.045876 ## [568] eval-mae:0.083859 train-mae:0.045829 ## [569] eval-mae:0.083843 train-mae:0.045788 ## [570] eval-mae:0.083819 train-mae:0.045774 ## [571] eval-mae:0.083869 train-mae:0.045727 ## [572] eval-mae:0.083920 train-mae:0.045674 ## [573] eval-mae:0.083919 train-mae:0.045650 ## [574] eval-mae:0.083938 train-mae:0.045619 ## [575] eval-mae:0.083917 train-mae:0.045581 ## [576] eval-mae:0.083931 train-mae:0.045545 ## [577] eval-mae:0.083879 train-mae:0.045508 ## [578] eval-mae:0.083853 train-mae:0.045480 ## [579] eval-mae:0.083834 train-mae:0.045453 ## [580] eval-mae:0.083861 train-mae:0.045425 ## [581] eval-mae:0.083882 train-mae:0.045386 ## [582] eval-mae:0.083881 train-mae:0.045353 ## [583] eval-mae:0.083884 train-mae:0.045307 ## [584] eval-mae:0.083881 train-mae:0.045272 ## [585] eval-mae:0.083879 train-mae:0.045234 ## [586] eval-mae:0.083839 train-mae:0.045194 ## [587] eval-mae:0.083812 train-mae:0.045156 ## [588] eval-mae:0.083850 train-mae:0.045141 ## [589] eval-mae:0.083856 train-mae:0.045110 ## [590] eval-mae:0.083834 train-mae:0.045063 ## [591] eval-mae:0.083821 train-mae:0.045037 ## [592] eval-mae:0.083797 train-mae:0.044993 ## [593] eval-mae:0.083789 train-mae:0.044946 ## [594] eval-mae:0.083779 train-mae:0.044935 ## [595] eval-mae:0.083772 train-mae:0.044895 ## [596] eval-mae:0.083797 train-mae:0.044883 ## [597] eval-mae:0.083818 train-mae:0.044855 ## [598] eval-mae:0.083830 train-mae:0.044829 ## [599] eval-mae:0.083813 train-mae:0.044787 ## [600] eval-mae:0.083772 train-mae:0.044749 ## [601] eval-mae:0.083758 train-mae:0.044721 ## [602] eval-mae:0.083731 train-mae:0.044681 ## [603] eval-mae:0.083759 train-mae:0.044630 ## [604] eval-mae:0.083749 train-mae:0.044590 ## [605] eval-mae:0.083722 train-mae:0.044564 ## [606] eval-mae:0.083730 train-mae:0.044516 ## [607] eval-mae:0.083769 train-mae:0.044474 ## [608] eval-mae:0.083765 train-mae:0.044426 ## [609] eval-mae:0.083755 train-mae:0.044395 ## [610] eval-mae:0.083184 train-mae:0.044377 ## [611] eval-mae:0.083125 train-mae:0.044355 ## [612] eval-mae:0.083128 train-mae:0.044330 ## [613] eval-mae:0.083133 train-mae:0.044309 ## [614] eval-mae:0.083118 train-mae:0.044274 ## [615] eval-mae:0.083122 train-mae:0.044259 ## [616] eval-mae:0.083136 train-mae:0.044192 ## [617] eval-mae:0.083122 train-mae:0.044152 ## [618] eval-mae:0.083146 train-mae:0.044102 ## [619] eval-mae:0.083129 train-mae:0.044062 ## [620] eval-mae:0.083112 train-mae:0.044038 ## [621] eval-mae:0.083128 train-mae:0.043983 ## [622] eval-mae:0.083160 train-mae:0.043955 ## [623] eval-mae:0.083160 train-mae:0.043931 ## [624] eval-mae:0.083141 train-mae:0.043882 ## [625] eval-mae:0.083063 train-mae:0.043845 ## [626] eval-mae:0.083058 train-mae:0.043815 ## [627] eval-mae:0.083066 train-mae:0.043773 ## [628] eval-mae:0.082594 train-mae:0.043764 ## [629] eval-mae:0.082608 train-mae:0.043735 ## [630] eval-mae:0.082599 train-mae:0.043704 ## [631] eval-mae:0.082554 train-mae:0.043646 ## [632] eval-mae:0.082559 train-mae:0.043611 ## [633] eval-mae:0.082571 train-mae:0.043567 ## [634] eval-mae:0.082574 train-mae:0.043515 ## [635] eval-mae:0.082560 train-mae:0.043513 ## [636] eval-mae:0.082534 train-mae:0.043489 ## [637] eval-mae:0.082546 train-mae:0.043475 ## [638] eval-mae:0.082504 train-mae:0.043430 ## [639] eval-mae:0.082500 train-mae:0.043392 ## [640] eval-mae:0.082509 train-mae:0.043369 ## [641] eval-mae:0.082480 train-mae:0.043328 ## [642] eval-mae:0.082465 train-mae:0.043285 ## [643] eval-mae:0.082479 train-mae:0.043252 ## [644] eval-mae:0.082498 train-mae:0.043217 ## [645] eval-mae:0.082482 train-mae:0.043201 ## [646] eval-mae:0.082426 train-mae:0.043154 ## [647] eval-mae:0.082397 train-mae:0.043114 ## [648] eval-mae:0.082370 train-mae:0.043101 ## [649] eval-mae:0.082360 train-mae:0.043095 ## [650] eval-mae:0.082347 train-mae:0.043057 ## [651] eval-mae:0.082353 train-mae:0.043026 ## [652] eval-mae:0.082386 train-mae:0.042987 ## [653] eval-mae:0.082540 train-mae:0.042955 ## [654] eval-mae:0.082546 train-mae:0.042921 ## [655] eval-mae:0.082538 train-mae:0.042910 ## [656] eval-mae:0.082519 train-mae:0.042877 ## [657] eval-mae:0.082486 train-mae:0.042846 ## [658] eval-mae:0.082517 train-mae:0.042802 ## [659] eval-mae:0.082529 train-mae:0.042793 ## [660] eval-mae:0.082736 train-mae:0.042778 ## [661] eval-mae:0.082703 train-mae:0.042731 ## [662] eval-mae:0.082692 train-mae:0.042679 ## [663] eval-mae:0.082664 train-mae:0.042631 ## [664] eval-mae:0.082711 train-mae:0.042607 ## [665] eval-mae:0.082700 train-mae:0.042594 ## [666] eval-mae:0.082730 train-mae:0.042547 ## [667] eval-mae:0.082709 train-mae:0.042515 ## [668] eval-mae:0.082710 train-mae:0.042496 ## [669] eval-mae:0.082713 train-mae:0.042460 ## [670] eval-mae:0.082732 train-mae:0.042417 ## [671] eval-mae:0.082707 train-mae:0.042398 ## [672] eval-mae:0.082714 train-mae:0.042370 ## [673] eval-mae:0.082732 train-mae:0.042333 ## [674] eval-mae:0.082714 train-mae:0.042310 ## [675] eval-mae:0.082727 train-mae:0.042288 ## [676] eval-mae:0.082659 train-mae:0.042249 ## [677] eval-mae:0.082657 train-mae:0.042231 ## [678] eval-mae:0.082255 train-mae:0.042229 ## [679] eval-mae:0.082245 train-mae:0.042204 ## [680] eval-mae:0.082245 train-mae:0.042195 ## [681] eval-mae:0.082193 train-mae:0.042151 ## [682] eval-mae:0.082198 train-mae:0.042120 ## [683] eval-mae:0.082191 train-mae:0.042080 ## [684] eval-mae:0.082182 train-mae:0.042057 ## [685] eval-mae:0.082129 train-mae:0.042027 ## [686] eval-mae:0.082126 train-mae:0.042013 ## [687] eval-mae:0.082111 train-mae:0.041975 ## [688] eval-mae:0.082122 train-mae:0.041936 ## [689] eval-mae:0.082117 train-mae:0.041894 ## [690] eval-mae:0.082102 train-mae:0.041851 ## [691] eval-mae:0.082152 train-mae:0.041832 ## [692] eval-mae:0.082135 train-mae:0.041814 ## [693] eval-mae:0.082112 train-mae:0.041762 ## [694] eval-mae:0.082119 train-mae:0.041745 ## [695] eval-mae:0.082079 train-mae:0.041697 ## [696] eval-mae:0.082064 train-mae:0.041669 ## [697] eval-mae:0.082041 train-mae:0.041626 ## [698] eval-mae:0.082023 train-mae:0.041618 ## [699] eval-mae:0.081983 train-mae:0.041580 ## [700] eval-mae:0.081974 train-mae:0.041536 ## [701] eval-mae:0.082011 train-mae:0.041498 ## [702] eval-mae:0.081995 train-mae:0.041478 ## [703] eval-mae:0.082008 train-mae:0.041446 ## [704] eval-mae:0.082004 train-mae:0.041407 ## [705] eval-mae:0.081988 train-mae:0.041385 ## [706] eval-mae:0.082060 train-mae:0.041361 ## [707] eval-mae:0.082040 train-mae:0.041329 ## [708] eval-mae:0.082032 train-mae:0.041314 ## [709] eval-mae:0.082054 train-mae:0.041304 ## [710] eval-mae:0.082058 train-mae:0.041294 ## [711] eval-mae:0.082060 train-mae:0.041238 ## [712] eval-mae:0.082092 train-mae:0.041209 ## [713] eval-mae:0.082079 train-mae:0.041165 ## [714] eval-mae:0.082047 train-mae:0.041141 ## [715] eval-mae:0.082048 train-mae:0.041120 ## [716] eval-mae:0.082037 train-mae:0.041067 ## [717] eval-mae:0.082029 train-mae:0.041033 ## [718] eval-mae:0.082039 train-mae:0.041027 ## [719] eval-mae:0.082013 train-mae:0.040986 ## [720] eval-mae:0.082002 train-mae:0.040944 ## [721] eval-mae:0.081925 train-mae:0.040908 ## [722] eval-mae:0.081925 train-mae:0.040875 ## [723] eval-mae:0.081958 train-mae:0.040859 ## [724] eval-mae:0.081934 train-mae:0.040849 ## [725] eval-mae:0.081981 train-mae:0.040810 ## [726] eval-mae:0.081994 train-mae:0.040791 ## [727] eval-mae:0.082016 train-mae:0.040765 ## [728] eval-mae:0.082013 train-mae:0.040733 ## [729] eval-mae:0.081985 train-mae:0.040709 ## [730] eval-mae:0.081995 train-mae:0.040694 ## [731] eval-mae:0.081950 train-mae:0.040663 ## [732] eval-mae:0.081951 train-mae:0.040627 ## [733] eval-mae:0.081946 train-mae:0.040607 ## [734] eval-mae:0.081970 train-mae:0.040578 ## [735] eval-mae:0.081972 train-mae:0.040551 ## [736] eval-mae:0.081967 train-mae:0.040527 ## [737] eval-mae:0.081953 train-mae:0.040493 ## [738] eval-mae:0.081934 train-mae:0.040466 ## [739] eval-mae:0.081940 train-mae:0.040443 ## [740] eval-mae:0.081721 train-mae:0.040430 ## [741] eval-mae:0.081709 train-mae:0.040379 ## [742] eval-mae:0.081655 train-mae:0.040355 ## [743] eval-mae:0.081632 train-mae:0.040331 ## [744] eval-mae:0.081617 train-mae:0.040299 ## [745] eval-mae:0.081620 train-mae:0.040286 ## [746] eval-mae:0.081607 train-mae:0.040255 ## [747] eval-mae:0.081590 train-mae:0.040207 ## [748] eval-mae:0.081606 train-mae:0.040176 ## [749] eval-mae:0.081599 train-mae:0.040151 ## [750] eval-mae:0.081551 train-mae:0.040120 ## [751] eval-mae:0.081543 train-mae:0.040106 ## [752] eval-mae:0.081548 train-mae:0.040084 ## [753] eval-mae:0.081553 train-mae:0.040057 ## [754] eval-mae:0.081546 train-mae:0.040025 ## [755] eval-mae:0.081541 train-mae:0.040000 ## [756] eval-mae:0.081525 train-mae:0.039966 ## [757] eval-mae:0.081550 train-mae:0.039926 ## [758] eval-mae:0.081532 train-mae:0.039901 ## [759] eval-mae:0.081501 train-mae:0.039869 ## [760] eval-mae:0.081517 train-mae:0.039809 ## [761] eval-mae:0.081492 train-mae:0.039765 ## [762] eval-mae:0.081460 train-mae:0.039740 ## [763] eval-mae:0.081411 train-mae:0.039709 ## [764] eval-mae:0.081407 train-mae:0.039686 ## [765] eval-mae:0.081346 train-mae:0.039653 ## [766] eval-mae:0.081360 train-mae:0.039632 ## [767] eval-mae:0.081332 train-mae:0.039603 ## [768] eval-mae:0.081325 train-mae:0.039587 ## [769] eval-mae:0.081310 train-mae:0.039555 ## [770] eval-mae:0.081299 train-mae:0.039524 ## [771] eval-mae:0.081338 train-mae:0.039502 ## [772] eval-mae:0.081322 train-mae:0.039479 ## [773] eval-mae:0.081322 train-mae:0.039471 ## [774] eval-mae:0.081343 train-mae:0.039420 ## [775] eval-mae:0.081323 train-mae:0.039392 ## [776] eval-mae:0.081451 train-mae:0.039358 ## [777] eval-mae:0.081454 train-mae:0.039340 ## [778] eval-mae:0.081474 train-mae:0.039315 ## [779] eval-mae:0.081465 train-mae:0.039286 ## [780] eval-mae:0.081457 train-mae:0.039251 ## [781] eval-mae:0.081455 train-mae:0.039237 ## [782] eval-mae:0.081433 train-mae:0.039222 ## [783] eval-mae:0.081434 train-mae:0.039198 ## [784] eval-mae:0.081321 train-mae:0.039180 ## [785] eval-mae:0.081348 train-mae:0.039128 ## [786] eval-mae:0.081348 train-mae:0.039094 ## [787] eval-mae:0.081357 train-mae:0.039076 ## [788] eval-mae:0.081360 train-mae:0.039037 ## [789] eval-mae:0.081355 train-mae:0.039030 ## [790] eval-mae:0.081338 train-mae:0.038997 ## [791] eval-mae:0.081296 train-mae:0.038952 ## [792] eval-mae:0.081285 train-mae:0.038913 ## [793] eval-mae:0.081278 train-mae:0.038890 ## [794] eval-mae:0.081243 train-mae:0.038857 ## [795] eval-mae:0.081208 train-mae:0.038838 ## [796] eval-mae:0.081219 train-mae:0.038809 ## [797] eval-mae:0.081215 train-mae:0.038795 ## [798] eval-mae:0.081219 train-mae:0.038766 ## [799] eval-mae:0.081235 train-mae:0.038741 ## [800] eval-mae:0.081238 train-mae:0.038708 ## [801] eval-mae:0.081194 train-mae:0.038675 ## [802] eval-mae:0.081198 train-mae:0.038649 ## [803] eval-mae:0.081176 train-mae:0.038638 ## [804] eval-mae:0.081195 train-mae:0.038616 ## [805] eval-mae:0.081199 train-mae:0.038605 ## [806] eval-mae:0.081239 train-mae:0.038563 ## [807] eval-mae:0.081191 train-mae:0.038522 ## [808] eval-mae:0.081174 train-mae:0.038497 ## [809] eval-mae:0.081168 train-mae:0.038456 ## [810] eval-mae:0.081173 train-mae:0.038423 ## [811] eval-mae:0.081171 train-mae:0.038400 ## [812] eval-mae:0.081180 train-mae:0.038372 ## [813] eval-mae:0.081186 train-mae:0.038345 ## [814] eval-mae:0.081191 train-mae:0.038308 ## [815] eval-mae:0.081176 train-mae:0.038267 ## [816] eval-mae:0.081134 train-mae:0.038246 ## [817] eval-mae:0.081134 train-mae:0.038245 ## [818] eval-mae:0.081116 train-mae:0.038208 ## [819] eval-mae:0.081122 train-mae:0.038193 ## [820] eval-mae:0.081122 train-mae:0.038181 ## [821] eval-mae:0.081108 train-mae:0.038160 ## [822] eval-mae:0.081066 train-mae:0.038127 ## [823] eval-mae:0.081006 train-mae:0.038104 ## [824] eval-mae:0.080996 train-mae:0.038099 ## [825] eval-mae:0.080992 train-mae:0.038055 ## [826] eval-mae:0.081000 train-mae:0.038045 ## [827] eval-mae:0.081026 train-mae:0.038005 ## [828] eval-mae:0.081042 train-mae:0.037976 ## [829] eval-mae:0.081048 train-mae:0.037961 ## [830] eval-mae:0.081036 train-mae:0.037942 ## [831] eval-mae:0.081047 train-mae:0.037905 ## [832] eval-mae:0.081007 train-mae:0.037888 ## [833] eval-mae:0.081037 train-mae:0.037862 ## [834] eval-mae:0.081004 train-mae:0.037845 ## [835] eval-mae:0.081014 train-mae:0.037795 ## [836] eval-mae:0.080995 train-mae:0.037767 ## [837] eval-mae:0.080989 train-mae:0.037734 ## [838] eval-mae:0.080951 train-mae:0.037716 ## [839] eval-mae:0.080926 train-mae:0.037657 ## [840] eval-mae:0.080914 train-mae:0.037630 ## [841] eval-mae:0.080921 train-mae:0.037595 ## [842] eval-mae:0.080914 train-mae:0.037580 ## [843] eval-mae:0.080885 train-mae:0.037561 ## [844] eval-mae:0.080898 train-mae:0.037552 ## [845] eval-mae:0.080906 train-mae:0.037534 ## [846] eval-mae:0.080894 train-mae:0.037504 ## [847] eval-mae:0.080900 train-mae:0.037472 ## [848] eval-mae:0.080901 train-mae:0.037456 ## [849] eval-mae:0.080900 train-mae:0.037432 ## [850] eval-mae:0.080889 train-mae:0.037425 ## [851] eval-mae:0.080876 train-mae:0.037384 ## [852] eval-mae:0.080868 train-mae:0.037361 ## [853] eval-mae:0.080866 train-mae:0.037343 ## [854] eval-mae:0.080818 train-mae:0.037305 ## [855] eval-mae:0.080843 train-mae:0.037285 ## [856] eval-mae:0.080827 train-mae:0.037247 ## [857] eval-mae:0.080838 train-mae:0.037215 ## [858] eval-mae:0.080844 train-mae:0.037182 ## [859] eval-mae:0.080832 train-mae:0.037158 ## [860] eval-mae:0.080888 train-mae:0.037131 ## [861] eval-mae:0.080927 train-mae:0.037107 ## [862] eval-mae:0.080920 train-mae:0.037061 ## [863] eval-mae:0.080911 train-mae:0.037031 ## [864] eval-mae:0.080905 train-mae:0.036995 ## [865] eval-mae:0.080919 train-mae:0.036978 ## [866] eval-mae:0.080915 train-mae:0.036956 ## [867] eval-mae:0.080922 train-mae:0.036923 ## [868] eval-mae:0.080952 train-mae:0.036889 ## [869] eval-mae:0.080953 train-mae:0.036857 ## [870] eval-mae:0.080890 train-mae:0.036809 ## [871] eval-mae:0.080880 train-mae:0.036796 ## [872] eval-mae:0.080865 train-mae:0.036770 ## [873] eval-mae:0.080851 train-mae:0.036742 ## [874] eval-mae:0.080848 train-mae:0.036699 ## [875] eval-mae:0.080831 train-mae:0.036693 ## [876] eval-mae:0.080819 train-mae:0.036662 ## [877] eval-mae:0.080816 train-mae:0.036639 ## [878] eval-mae:0.080817 train-mae:0.036610 ## [879] eval-mae:0.080853 train-mae:0.036578 ## [880] eval-mae:0.080859 train-mae:0.036565 ## [881] eval-mae:0.080858 train-mae:0.036533 ## [882] eval-mae:0.080855 train-mae:0.036494 ## [883] eval-mae:0.080840 train-mae:0.036474 ## [884] eval-mae:0.080839 train-mae:0.036462 ## [885] eval-mae:0.080828 train-mae:0.036437 ## [886] eval-mae:0.080783 train-mae:0.036398 ## [887] eval-mae:0.080783 train-mae:0.036363 ## [888] eval-mae:0.080781 train-mae:0.036339 ## [889] eval-mae:0.080789 train-mae:0.036333 ## [890] eval-mae:0.080756 train-mae:0.036293 ## [891] eval-mae:0.080767 train-mae:0.036256 ## [892] eval-mae:0.080778 train-mae:0.036230 ## [893] eval-mae:0.080791 train-mae:0.036200 ## [894] eval-mae:0.080790 train-mae:0.036175 ## [895] eval-mae:0.080790 train-mae:0.036152 ## [896] eval-mae:0.080791 train-mae:0.036121 ## [897] eval-mae:0.080788 train-mae:0.036099 ## [898] eval-mae:0.080779 train-mae:0.036068 ## [899] eval-mae:0.080804 train-mae:0.036035 ## [900] eval-mae:0.080797 train-mae:0.036011 ## [901] eval-mae:0.080786 train-mae:0.035976 ## [902] eval-mae:0.080790 train-mae:0.035943 ## [903] eval-mae:0.080781 train-mae:0.035902 ## [904] eval-mae:0.080767 train-mae:0.035876 ## [905] eval-mae:0.080753 train-mae:0.035863 ## [906] eval-mae:0.080769 train-mae:0.035848 ## [907] eval-mae:0.080891 train-mae:0.035827 ## [908] eval-mae:0.080911 train-mae:0.035775 ## [909] eval-mae:0.080912 train-mae:0.035729 ## [910] eval-mae:0.080923 train-mae:0.035712 ## [911] eval-mae:0.080928 train-mae:0.035680 ## [912] eval-mae:0.080901 train-mae:0.035669 ## [913] eval-mae:0.080920 train-mae:0.035649 ## [914] eval-mae:0.080902 train-mae:0.035630 ## [915] eval-mae:0.080925 train-mae:0.035594 ## [916] eval-mae:0.080898 train-mae:0.035575 ## [917] eval-mae:0.080903 train-mae:0.035552 ## [918] eval-mae:0.081019 train-mae:0.035543 ## [919] eval-mae:0.081006 train-mae:0.035508 ## [920] eval-mae:0.081035 train-mae:0.035461 ## [921] eval-mae:0.081015 train-mae:0.035436 ## [922] eval-mae:0.081013 train-mae:0.035406 ## [923] eval-mae:0.080998 train-mae:0.035371 ## [924] eval-mae:0.080992 train-mae:0.035346 ## [925] eval-mae:0.080968 train-mae:0.035323 ## [926] eval-mae:0.080941 train-mae:0.035300 ## [927] eval-mae:0.080940 train-mae:0.035269 ## [928] eval-mae:0.080921 train-mae:0.035256 ## [929] eval-mae:0.080920 train-mae:0.035243 ## [930] eval-mae:0.080942 train-mae:0.035210 ## [931] eval-mae:0.080951 train-mae:0.035189 ## [932] eval-mae:0.080991 train-mae:0.035158 ## [933] eval-mae:0.080865 train-mae:0.035144 ## [934] eval-mae:0.080879 train-mae:0.035121 ## [935] eval-mae:0.080883 train-mae:0.035085 ## [936] eval-mae:0.080880 train-mae:0.035056 ## [937] eval-mae:0.080885 train-mae:0.035024 ## [938] eval-mae:0.080903 train-mae:0.034991 ## [939] eval-mae:0.080995 train-mae:0.034968 ## [940] eval-mae:0.081014 train-mae:0.034942 ## [941] eval-mae:0.081009 train-mae:0.034920 ## [942] eval-mae:0.081000 train-mae:0.034892 ## [943] eval-mae:0.080989 train-mae:0.034861 ## [944] eval-mae:0.081009 train-mae:0.034863 ## [945] eval-mae:0.081009 train-mae:0.034845 ## [946] eval-mae:0.080985 train-mae:0.034808 ## [947] eval-mae:0.080977 train-mae:0.034772 ## [948] eval-mae:0.081004 train-mae:0.034745 ## [949] eval-mae:0.080999 train-mae:0.034696 ## [950] eval-mae:0.081015 train-mae:0.034681 ## [951] eval-mae:0.081012 train-mae:0.034649 ## [952] eval-mae:0.081019 train-mae:0.034635 ## [953] eval-mae:0.081019 train-mae:0.034628 ## [954] eval-mae:0.081012 train-mae:0.034602 ## [955] eval-mae:0.081014 train-mae:0.034561 ## [956] eval-mae:0.081027 train-mae:0.034521 ## [957] eval-mae:0.081019 train-mae:0.034492 ## [958] eval-mae:0.081032 train-mae:0.034465 ## [959] eval-mae:0.081021 train-mae:0.034441 ## [960] eval-mae:0.081023 train-mae:0.034426 ## [961] eval-mae:0.081008 train-mae:0.034410 ## [962] eval-mae:0.081013 train-mae:0.034393 ## [963] eval-mae:0.081018 train-mae:0.034386 ## [964] eval-mae:0.081015 train-mae:0.034352 ## [965] eval-mae:0.080996 train-mae:0.034339 ## [966] eval-mae:0.081023 train-mae:0.034321 ## [967] eval-mae:0.081046 train-mae:0.034300 ## [968] eval-mae:0.081037 train-mae:0.034290 ## [969] eval-mae:0.081045 train-mae:0.034268 ## [970] eval-mae:0.081048 train-mae:0.034238 ## [971] eval-mae:0.081015 train-mae:0.034224 ## [972] eval-mae:0.081020 train-mae:0.034200 ## [973] eval-mae:0.081022 train-mae:0.034190 ## [974] eval-mae:0.081010 train-mae:0.034161 ## [975] eval-mae:0.081000 train-mae:0.034127 ## [976] eval-mae:0.080990 train-mae:0.034102 ## [977] eval-mae:0.080977 train-mae:0.034080 ## [978] eval-mae:0.080960 train-mae:0.034067 ## [979] eval-mae:0.080949 train-mae:0.034053 ## [980] eval-mae:0.080940 train-mae:0.034017 ## [981] eval-mae:0.080915 train-mae:0.033997 ## [982] eval-mae:0.080893 train-mae:0.033971 ## [983] eval-mae:0.080912 train-mae:0.033962 ## [984] eval-mae:0.080910 train-mae:0.033948 ## [985] eval-mae:0.080915 train-mae:0.033927 ## [986] eval-mae:0.080915 train-mae:0.033923 ## [987] eval-mae:0.080909 train-mae:0.033910 ## [988] eval-mae:0.080936 train-mae:0.033896 ## [989] eval-mae:0.080937 train-mae:0.033895 ## [990] eval-mae:0.080934 train-mae:0.033880 ## [991] eval-mae:0.080933 train-mae:0.033856 ## [992] eval-mae:0.080948 train-mae:0.033830 ## [993] eval-mae:0.080964 train-mae:0.033823 ## [994] eval-mae:0.080979 train-mae:0.033783 ## [995] eval-mae:0.080932 train-mae:0.033746 ## [996] eval-mae:0.080966 train-mae:0.033725 ## [997] eval-mae:0.080970 train-mae:0.033710 ## [998] eval-mae:0.080980 train-mae:0.033682 ## [999] eval-mae:0.080963 train-mae:0.033658 ## [1000] eval-mae:0.080967 train-mae:0.033639 eval &lt;- bst$evaluation_log %&gt;% gather(tipo, rmse, -iter) ggplot(eval, aes(x=iter, y=rmse, colour=tipo, group= tipo)) + geom_line() + scale_y_log10() "]
]
